digraph G {
	node [shape=box]; compound=true; ratio=fill;
	"" [color=grey];
	"javax.swing.JPopupMenu" [color=grey];
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtAssertImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtAssertImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.reflect.code.CtAssert";
	"spoon.support.reflect.code.CtAssertImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.support.reflect.reference.CtVariableReferenceImpl";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.support.reflect.reference.CtReferenceImpl";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "java.io.Serializable";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "java.lang.Override";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "java.lang.reflect.AnnotatedElement";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "java.lang.String";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "java.util.List";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "java.lang.IllegalStateException";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.reference.CtParameterReferenceImpl" -> "spoon.reflect.visitor.CtVisitor";
	"java.lang.SafeVarargs" [color=grey];
	"java.lang.UnsupportedOperationException" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.Block" [color=grey];
	"spoon.reflect.code.CtTargetedAccess" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.code.CtTargetedAccess" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.code.CtTargetedAccess" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.code.CtTargetedAccess" -> "java.lang.Comparable";
	"spoon.reflect.code.CtTargetedAccess" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "java.lang.Iterable";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.template.TemplateParameter";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.declaration.CtAnonymousExecutable" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.visitor.filter.DirectReferenceFilter" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.filter.DirectReferenceFilter" -> "java.lang.Comparable";
	"spoon.reflect.visitor.filter.DirectReferenceFilter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.filter.DirectReferenceFilter" -> "java.lang.Object";
	"spoon.reflect.visitor.filter.DirectReferenceFilter" -> "java.lang.Class";
	"spoon.reflect.visitor.filter.DirectReferenceFilter" -> "spoon.reflect.visitor.filter.AbstractReferenceFilter";
	"spoon.reflect.visitor.filter.DirectReferenceFilter" -> "spoon.reflect.visitor.ReferenceFilter";
	"spoon.reflect.visitor.filter.DirectReferenceFilter" -> "T";
	"Path" [color=grey];
	"spoon.reflect.visitor.filter.ReferenceTypeFilter" -> "java.lang.Class";
	"spoon.reflect.visitor.filter.ReferenceTypeFilter" -> "spoon.reflect.visitor.filter.AbstractReferenceFilter";
	"spoon.reflect.visitor.filter.ReferenceTypeFilter" -> "spoon.reflect.visitor.ReferenceFilter";
	"spoon.reflect.visitor.filter.ReferenceTypeFilter" -> "T";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.util.List";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.io.File";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.lang.String";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.util.HashSet";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.util.Set";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.lang.Object";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "spoon.compiler.Environment";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.io.FileInputStream";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.lang.reflect.Array";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.lang.Exception";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.lang.RuntimeException";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.cu.CompilationUnitImpl" -> "spoon.reflect.cu.SourceCodeFragment";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.support.compiler.SnippetCompilationHelper";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.support.compiler.SnippetCompilationError";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "S";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.SpoonException";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "java.lang.RuntimeException";
	"spoon.support.reflect.code.CtCodeSnippetStatementImpl" -> "spoon.reflect.visitor.CtVisitor";
	"org.eclipse.jdt.internal.compiler.ast.NameReference" [color=grey];
	"spoon.reflect.code.CtCodeElement" -> "R";
	"org.eclipse.jdt.internal.compiler.ast.CaseStatement" [color=grey];
	"java.io.Serializable" [color=grey];
	"spoon.reflect.declaration.CtTypedElement" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.declaration.CtTypedElement" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.declaration.CtTypedElement" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.declaration.CtTypedElement" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtTypedElement" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.JavaIdentifiers" -> "java.util.Set";
	"spoon.reflect.visitor.JavaIdentifiers" -> "java.lang.String";
	"spoon.reflect.visitor.JavaIdentifiers" -> "java.lang.Character";
	"spoon.reflect.visitor.JavaIdentifiers" -> "java.util.StringTokenizer";
	"org.xml.sax.SAXException" [color=grey];
	"spoon.reflect.factory.PackageFactory" -> "java.util.TreeMap";
	"spoon.reflect.factory.PackageFactory" -> "java.util.Map";
	"spoon.reflect.factory.PackageFactory" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.reflect.factory.PackageFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.factory.PackageFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.PackageFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.PackageFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.PackageFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.PackageFactory" -> "java.io.Serializable";
	"spoon.reflect.factory.PackageFactory" -> "java.util.ArrayList";
	"spoon.reflect.factory.PackageFactory" -> "java.util.Collection";
	"spoon.reflect.factory.PackageFactory" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.factory.PackageFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.PackageFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.PackageFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.PackageFactory" -> "java.util.List";
	"spoon.reflect.factory.PackageFactory" -> "java.util.Set";
	"spoon.reflect.factory.PackageFactory" -> "java.lang.String";
	"spoon.reflect.factory.PackageFactory" -> "java.lang.Object";
	"spoon.reflect.factory.PackageFactory" -> "java.lang.RuntimeException";
	"spoon.reflect.factory.PackageFactory" -> "java.util.StringTokenizer";
	"spoon.reflect.factory.PackageFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.PackageFactory" -> "java.lang.Package";
	"spoon.reflect.factory.PackageFactory" -> "java.lang.IllegalArgumentException";
	"spoon.reflect.code.CtAssert" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtAssert" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtAssert" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtAssert" -> "java.lang.Comparable";
	"spoon.reflect.code.CtAssert" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtAssert" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtAssert" -> "spoon.template.TemplateParameter";
	"spoon.reflect.code.CtContinue" -> "java.lang.String";
	"spoon.reflect.code.CtContinue" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.code.CtContinue" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtContinue" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtContinue" -> "java.lang.Comparable";
	"spoon.reflect.code.CtContinue" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtCaseImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtCaseImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtCaseImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.reflect.code.CtCase";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.code.CtCaseImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.code.CtCaseImpl" -> "java.util.Iterator";
	"spoon.support.reflect.code.CtCaseImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtCaseImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.code.CtCaseImpl" -> "java.util.ArrayList";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.factory.Factory";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.visitor.CtInheritanceScanner";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.reference.CtReference";
	"spoon.support.template.SubstitutionVisitor" -> "java.lang.Comparable";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.processing.FactoryAccessor";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.template.Template";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.code.CtStatement";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.declaration.CtType";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.template.SubstitutionVisitor" -> "java.util.Collection";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.template.TemplateParameter";
	"spoon.support.template.SubstitutionVisitor" -> "java.lang.String";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.support.template.SubstitutionVisitor" -> "java.lang.Object";
	"spoon.support.template.SubstitutionVisitor" -> "java.lang.Class";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.factory.ClassFactory";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.support.template.Parameters";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.code.CtBlock";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.template.SubstitutionVisitor" -> "java.lang.Iterable";
	"spoon.support.template.SubstitutionVisitor" -> "java.util.ArrayList";
	"spoon.support.template.SubstitutionVisitor" -> "java.lang.Override";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.support.template.SkipException";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.SpoonException";
	"spoon.support.template.SubstitutionVisitor" -> "java.lang.RuntimeException";
	"spoon.support.template.SubstitutionVisitor" -> "spoon.support.template.UndefinedParameterException";
	"spoon.reflect.declaration.CtVariable" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.declaration.CtVariable" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.declaration.CtVariable" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.declaration.CtVariable" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtVariable" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtVariable" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.declaration.CtVariable" -> "spoon.template.TemplateParameter";
	"spoon.reflect.declaration.CtVariable" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.declaration.CtVariable" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.code.CtNewArray" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtNewArray" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtNewArray" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtNewArray" -> "java.lang.Comparable";
	"spoon.reflect.code.CtNewArray" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtNewArray" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtNewArray" -> "spoon.template.TemplateParameter";
	"spoon.reflect.code.CtNewArray" -> "java.util.List";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.visitor.SignaturePrinter" -> "org.apache.log4j.Logger";
	"spoon.support.visitor.SignaturePrinter" -> "java.lang.StringBuffer";
	"spoon.support.visitor.SignaturePrinter" -> "java.lang.Object";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.visitor.SignaturePrinter" -> "java.lang.Comparable";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.processing.FactoryAccessor";
	"spoon.support.visitor.SignaturePrinter" -> "java.lang.String";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.reference.CtReference";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.cu.SourcePosition";
	"spoon.support.visitor.SignaturePrinter" -> "java.lang.Exception";
	"spoon.support.visitor.SignaturePrinter" -> "org.apache.log4j.Category";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtCase";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtStatement";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.visitor.SignaturePrinter" -> "java.lang.Iterable";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtExpression";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.template.TemplateParameter";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtSwitch";
	"spoon.support.visitor.SignaturePrinter" -> "java.util.List";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtBlock";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtReturn";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtEnum";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtType";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtAssignment";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.BinaryOperatorKind";
	"spoon.support.visitor.SignaturePrinter" -> "java.lang.Enum";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.visitor.SignaturePrinter" -> "E";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtAssert";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtConditional";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtField";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.visitor.SignaturePrinter" -> "java.lang.NullPointerException";
	"spoon.support.visitor.SignaturePrinter" -> "java.io.PrintStream";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtInterface";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtInvocation";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtLiteral";
	"spoon.support.visitor.SignaturePrinter" -> "T";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtNewArray";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtNewClass";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtThisAccess";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.UnaryOperatorKind";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtBreak";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtCatch";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtContinue";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtDo";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtLoop";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtFor";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtForEach";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtIf";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtSynchronized";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtThrow";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtTry";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.support.visitor.SignaturePrinter" -> "spoon.reflect.code.CtWhile";
	"org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression" [color=grey];
	"spoon.Path" [color=grey];
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.factory.CodeFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.CodeFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.factory.CodeFactory" -> "spoon.template.TemplateParameter";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtAssignment";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.reflect.factory.CodeFactory" -> "java.lang.String";
	"spoon.reflect.factory.CodeFactory" -> "java.util.List";
	"spoon.reflect.factory.CodeFactory" -> "java.util.ArrayList";
	"spoon.reflect.factory.CodeFactory" -> "E";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.CodeFactory" -> "java.lang.SuppressWarnings";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.factory.CodeFactory" -> "java.lang.Iterable";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.BinaryOperatorKind";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtFieldAccess";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.reflect.factory.CodeFactory" -> "java.lang.reflect.Array";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.CodeFactory" -> "java.lang.Class";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtInvocation";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.reflect.factory.CodeFactory" -> "T";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtLiteral";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.factory.CodeFactory" -> "java.lang.Object";
	"spoon.reflect.factory.CodeFactory" -> "java.lang.RuntimeException";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtNewArray";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.reflect.factory.CodeFactory" -> "java.util.Set";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtThisAccess";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.reflect.factory.CodeFactory" -> "java.util.TreeSet";
	"spoon.reflect.factory.CodeFactory" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"javax.swing.AbstractButton" [color=grey];
	"spoon.reflect.declaration.CtAnnotation" -> "java.lang.String";
	"spoon.reflect.declaration.CtAnnotation" -> "T";
	"spoon.reflect.declaration.CtAnnotation" -> "A";
	"spoon.reflect.declaration.CtAnnotation" -> "java.util.Map";
	"spoon.reflect.declaration.CtAnnotation" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.declaration.CtAnnotation" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.declaration.CtAnnotation" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.declaration.CtAnnotation" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtAnnotation" -> "spoon.processing.FactoryAccessor";
	"spoon.compiler.ModelBuildingException" -> "java.lang.String";
	"spoon.compiler.ModelBuildingException" -> "spoon.SpoonException";
	"spoon.compiler.ModelBuildingException" -> "java.lang.RuntimeException";
	"spoon.compiler.ModelBuildingException" -> "java.lang.Exception";
	"java.util.zip.ZipInputStream" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.PrefixExpression" [color=grey];
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtWhileImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.support.reflect.code.CtLoopImpl";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtWhileImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.reflect.code.CtLoop";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.reflect.code.CtWhile";
	"spoon.support.reflect.code.CtWhileImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.support.reflect.code.CtTargetedExpressionImpl";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.support.reflect.code.CtArrayAccessImpl" -> "spoon.reflect.visitor.CtVisitor";
	"E" [color=grey];
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.ConstructorFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.ConstructorFactory" -> "java.util.Set";
	"spoon.reflect.factory.ConstructorFactory" -> "java.util.List";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.factory.ConstructorFactory" -> "java.lang.Iterable";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.template.TemplateParameter";
	"spoon.reflect.factory.ConstructorFactory" -> "java.lang.String";
	"spoon.reflect.factory.ConstructorFactory" -> "java.lang.SuppressWarnings";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.CtMethod";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.reflect.factory.ConstructorFactory" -> "java.lang.reflect.Constructor";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.ConstructorFactory" -> "java.lang.Class";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.factory.ConstructorFactory" -> "java.lang.reflect.Array";
	"spoon.reflect.factory.ConstructorFactory" -> "java.util.Arrays";
	"spoon.reflect.factory.ConstructorFactory" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.reference.CtGenericElementReference" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.reference.CtGenericElementReference" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.reference.CtGenericElementReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtGenericElementReference" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.reference.CtGenericElementReference" -> "java.util.List";
	"java.awt.Window" [color=grey];
	"A" [color=grey];
	"spoon.reflect.code.CtDo" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtDo" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtDo" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtDo" -> "java.lang.Comparable";
	"spoon.reflect.code.CtDo" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtDo" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtDo" -> "spoon.template.TemplateParameter";
	"javax.xml.parsers.DocumentBuilderFactory" [color=grey];
	"N" [color=grey];
	"spoon.reflect.code.CtCase" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtCase" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtCase" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtCase" -> "java.lang.Comparable";
	"spoon.reflect.code.CtCase" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtCase" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtCase" -> "spoon.template.TemplateParameter";
	"org.eclipse.jdt.internal.compiler.util.Util" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.ThrowStatement" [color=grey];
	"spoon.support.reflect.code.CtLiteralImpl" -> "T";
	"spoon.support.reflect.code.CtLiteralImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtLiteralImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtLiteralImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtLiteralImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtLiteralImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtLiteralImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtLiteralImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtLiteralImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtLiteralImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtLiteralImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtLiteralImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtLiteralImpl" -> "spoon.reflect.code.CtLiteral";
	"spoon.support.reflect.code.CtLiteralImpl" -> "spoon.reflect.visitor.CtVisitor";
	"java.util.HashMap" [color=grey];
	"spoon.support.reflect.code.CtNewArrayImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "spoon.reflect.code.CtNewArray";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtNewArrayImpl" -> "spoon.reflect.visitor.CtVisitor";
	"T" [color=grey];
	"spoon.reflect.code.CtCatch" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.code.CtCatch" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.code.CtCatch" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtCatch" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtCatch" -> "java.lang.Comparable";
	"spoon.reflect.code.CtCatch" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtCatch" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.code.CtCatch" -> "java.lang.Iterable";
	"spoon.reflect.code.CtCatch" -> "spoon.template.TemplateParameter";
	"spoon.reflect.code.CtCatch" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.reflect.code.CtCatch" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.code.CtCatch" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.code.CtCatch" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.code.CtCatch" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.util.List";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.io.Serializable";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.support.reflect.reference.CtReferenceImpl";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.String";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.Object";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.util.Set";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.Override";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.reflect.Method";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.reflect.Modifier";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.reflect.Constructor";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.reflect.AnnotatedElement";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.Class";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.reflect.Array";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.support.util.RtHelper";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.ClassCastException";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "org.apache.log4j.Logger";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.lang.Throwable";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "org.apache.log4j.Category";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "java.util.Collection";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.reference.CtExecutableReferenceImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "java.lang.reflect.Array";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "spoon.reflect.visitor.filter.FilteringOperator";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "java.lang.Object";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "java.lang.SafeVarargs";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "T";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "java.lang.Class";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "java.lang.String";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "java.lang.Comparable";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.filter.CompositeFilter" -> "java.lang.SuppressWarnings";
	"P" [color=grey];
	"S" [color=grey];
	"R" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral" [color=grey];
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.String";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.io.File";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.io.PrintWriter";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.eclipse.jdt.internal.compiler.env.INameEnvironment";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.util.ArrayList";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.util.List";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.compiler.SpoonCompiler";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.support.compiler.jdt.TreeBuilderRequestor";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.eclipse.jdt.internal.compiler.ICompilerRequestor";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.support.compiler.VirtualFolder";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.compiler.SpoonFolder";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.compiler.SpoonResource";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.factory.Factory";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.util.HashMap";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.util.Map";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.Object";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.Exception";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.compiler.Environment";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.System";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.support.compiler.jdt.JDTBatchCompiler";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.eclipse.jdt.internal.compiler.batch.Main";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.Thread";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.ClassLoader";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.net.URLClassLoader";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.reflect.Array";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.net.URL";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.io.PrintStream";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.apache.commons.io.FileUtils";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.util.Collection";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.SuppressWarnings";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.support.compiler.jdt.JDTTreeBuilder";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.eclipse.jdt.internal.compiler.ASTVisitor";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.factory.CompilationUnitFactory";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.util.Set";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.compiler.SpoonFile";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.Override";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.apache.log4j.Logger";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.Throwable";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.apache.log4j.Category";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.visitor.PrettyPrinter";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.visitor.DefaultJavaPrettyPrinter";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.io.ByteArrayInputStream";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.io.InputStream";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.util.HashSet";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.eclipse.jdt.internal.compiler.batch.CompilationUnit";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.eclipse.jdt.internal.compiler.util.Util";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.support.compiler.jdt.CompilerClassLoader";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.compiler.SpoonResourceHelper";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.io.IOException";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.OutputType";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.RuntimeException";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.lang.Comparable";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.io.FileOutputStream";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.apache.commons.io.IOUtils";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.processing.FileGenerator";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.processing.Processor";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.support.QueueProcessingManager";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.processing.ProcessingManager";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.net.URI";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.Launcher";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.support.compiler.FileSystemFile";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.reflect.factory.PackageFactory";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "java.io.Serializable";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.eclipse.jdt.core.compiler.CategorizedProblem";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "org.eclipse.jdt.core.compiler.IProblem";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.compiler.ModelBuildingException";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.SpoonException";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.processing.Severity";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.compiler.InvalidClassPathException";
	"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" -> "spoon.support.compiler.FileSystemFolder";
	"org.eclipse.jdt.internal.compiler.ast.BinaryExpression" [color=grey];
	"spoon.support.util.BasicCompilationUnit" -> "java.lang.reflect.Array";
	"spoon.support.util.BasicCompilationUnit" -> "java.lang.String";
	"spoon.support.util.BasicCompilationUnit" -> "java.lang.Object";
	"spoon.support.util.BasicCompilationUnit" -> "org.eclipse.jdt.internal.compiler.env.ICompilationUnit";
	"spoon.support.util.BasicCompilationUnit" -> "java.io.File";
	"spoon.support.util.BasicCompilationUnit" -> "org.eclipse.jdt.internal.compiler.util.Util";
	"spoon.support.util.BasicCompilationUnit" -> "java.io.IOException";
	"spoon.support.util.BasicCompilationUnit" -> "org.eclipse.jdt.core.compiler.CharOperation";
	"javax.swing.tree.DefaultMutableTreeNode" [color=grey];
	"spoon.support.QueueProcessingManager" -> "spoon.processing.Processor";
	"spoon.support.QueueProcessingManager" -> "spoon.processing.FactoryAccessor";
	"spoon.support.QueueProcessingManager" -> "spoon.reflect.factory.Factory";
	"spoon.support.QueueProcessingManager" -> "java.util.Queue";
	"spoon.support.QueueProcessingManager" -> "spoon.support.visitor.ProcessingVisitor";
	"spoon.support.QueueProcessingManager" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.QueueProcessingManager" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.QueueProcessingManager" -> "java.lang.Object";
	"spoon.support.QueueProcessingManager" -> "spoon.processing.ProcessingManager";
	"spoon.support.QueueProcessingManager" -> "java.lang.Class";
	"spoon.support.QueueProcessingManager" -> "java.util.LinkedList";
	"spoon.support.QueueProcessingManager" -> "java.lang.Exception";
	"spoon.support.QueueProcessingManager" -> "spoon.compiler.Environment";
	"spoon.support.QueueProcessingManager" -> "spoon.processing.Severity";
	"spoon.support.QueueProcessingManager" -> "java.lang.String";
	"spoon.support.QueueProcessingManager" -> "java.lang.Thread";
	"spoon.support.QueueProcessingManager" -> "java.lang.ClassLoader";
	"spoon.support.QueueProcessingManager" -> "java.lang.ClassNotFoundException";
	"spoon.support.QueueProcessingManager" -> "java.lang.SuppressWarnings";
	"spoon.support.QueueProcessingManager" -> "java.util.Collection";
	"spoon.support.QueueProcessingManager" -> "java.lang.Override";
	"spoon.support.QueueProcessingManager" -> "spoon.support.util.Timer";
	"spoon.support.QueueProcessingManager" -> "spoon.reflect.factory.PackageFactory";
	"spoon.support.QueueProcessingManager" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.QueueProcessingManager" -> "java.io.Serializable";
	"spoon.support.QueueProcessingManager" -> "spoon.processing.AbstractProcessor";
	"spoon.support.QueueProcessingManager" -> "spoon.processing.ProcessorProperties";
	"spoon.support.QueueProcessingManager" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.QueueProcessingManager" -> "java.lang.Comparable";
	"spoon.support.QueueProcessingManager" -> "java.util.ArrayList";
	"spoon.support.StandardEnvironment" -> "java.io.Serializable";
	"spoon.support.StandardEnvironment" -> "spoon.compiler.Environment";
	"spoon.support.StandardEnvironment" -> "org.apache.log4j.Logger";
	"spoon.support.StandardEnvironment" -> "java.lang.String";
	"spoon.support.StandardEnvironment" -> "spoon.processing.FileGenerator";
	"spoon.support.StandardEnvironment" -> "spoon.processing.Processor";
	"spoon.support.StandardEnvironment" -> "spoon.processing.FactoryAccessor";
	"spoon.support.StandardEnvironment" -> "spoon.reflect.factory.Factory";
	"spoon.support.StandardEnvironment" -> "spoon.processing.ProcessingManager";
	"spoon.support.StandardEnvironment" -> "java.io.File";
	"spoon.support.StandardEnvironment" -> "java.util.TreeMap";
	"spoon.support.StandardEnvironment" -> "java.util.Map";
	"spoon.support.StandardEnvironment" -> "java.lang.ClassLoader";
	"spoon.support.StandardEnvironment" -> "java.lang.Object";
	"spoon.support.StandardEnvironment" -> "java.lang.Override";
	"spoon.support.StandardEnvironment" -> "java.lang.reflect.Array";
	"spoon.support.StandardEnvironment" -> "java.io.FileInputStream";
	"spoon.support.StandardEnvironment" -> "java.io.FileNotFoundException";
	"spoon.support.StandardEnvironment" -> "java.io.InputStream";
	"spoon.support.StandardEnvironment" -> "java.lang.Thread";
	"spoon.support.StandardEnvironment" -> "java.lang.Deprecated";
	"spoon.support.StandardEnvironment" -> "spoon.processing.ProcessorProperties";
	"spoon.support.StandardEnvironment" -> "spoon.support.processing.XmlProcessorProperties";
	"spoon.support.StandardEnvironment" -> "org.xml.sax.SAXException";
	"spoon.support.StandardEnvironment" -> "java.lang.RuntimeException";
	"spoon.support.StandardEnvironment" -> "java.io.IOException";
	"spoon.support.StandardEnvironment" -> "org.apache.log4j.Category";
	"spoon.support.StandardEnvironment" -> "java.lang.StringBuffer";
	"spoon.support.StandardEnvironment" -> "spoon.processing.Severity";
	"spoon.support.StandardEnvironment" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.StandardEnvironment" -> "java.lang.Comparable";
	"spoon.support.StandardEnvironment" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.StandardEnvironment" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.StandardEnvironment" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.StandardEnvironment" -> "spoon.reflect.cu.SourcePosition";
	"spoon.support.StandardEnvironment" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.StandardEnvironment" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.StandardEnvironment" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.StandardEnvironment" -> "spoon.reflect.declaration.ParentNotInitializedException";
	"spoon.support.StandardEnvironment" -> "spoon.SpoonException";
	"spoon.support.StandardEnvironment" -> "java.io.PrintStream";
	"java.util.regex.Matcher" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration" [color=grey];
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.env.INameEnvironment";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.impl.CompilerOptions";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.ICompilerRequestor";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.IProblemFactory";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "java.io.PrintWriter";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.core.compiler.CompilationProgress";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.Compiler";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "java.lang.reflect.Array";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.parser.Parser";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.lookup.MethodVerifier";
	"spoon.support.compiler.jdt.TreeBuilderCompiler" -> "org.eclipse.jdt.internal.compiler.CompilationResult";
	"spoon.reflect.ModelStreamer" -> "java.io.InputStream";
	"spoon.reflect.ModelStreamer" -> "java.io.IOException";
	"spoon.reflect.ModelStreamer" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.ModelStreamer" -> "java.io.OutputStream";
	"org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration" [color=grey];
	"java.util.StringTokenizer" [color=grey];
	"org.xml.sax.Attributes" [color=grey];
	"spoon.compiler.SpoonFile" -> "java.io.InputStream";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "java.util.Set";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.factory.CodeFactory";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.code.CtLocalVariableImpl" -> "java.util.TreeSet";
	"spoon.compiler.SpoonResource" -> "java.io.File";
	"spoon.compiler.SpoonResource" -> "java.lang.String";
	"spoon.compiler.SpoonResource" -> "spoon.compiler.SpoonFolder";
	"org.eclipse.jdt.internal.compiler.ast.AssertStatement" [color=grey];
	"spoon.reflect.visitor.filter.AnnotationFilter" -> "java.lang.Class";
	"spoon.reflect.visitor.filter.AnnotationFilter" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.filter.AnnotationFilter" -> "java.lang.Comparable";
	"spoon.reflect.visitor.filter.AnnotationFilter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.filter.AnnotationFilter" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.reflect.visitor.filter.AnnotationFilter" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.visitor.filter.AnnotationFilter" -> "E";
	"javax.swing.JFrame" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation" [color=grey];
	"spoon.support.util.NotDirectlyModifiableList" -> "java.util.ArrayList";
	"spoon.support.util.NotDirectlyModifiableList" -> "E";
	"spoon.support.util.NotDirectlyModifiableList" -> "java.lang.String";
	"spoon.support.util.NotDirectlyModifiableList" -> "java.lang.RuntimeException";
	"spoon.support.util.NotDirectlyModifiableList" -> "java.lang.Override";
	"spoon.support.util.NotDirectlyModifiableList" -> "java.util.Collection";
	"spoon.support.util.NotDirectlyModifiableList" -> "java.lang.Object";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtStatementListImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtStatementListImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtStatementListImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.code.CtStatementListImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.code.CtStatementListImpl" -> "R";
	"spoon.support.reflect.code.CtStatementListImpl" -> "java.util.Iterator";
	"spoon.support.reflect.code.CtStatementListImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtStatementListImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.code.CtStatementListImpl" -> "spoon.reflect.cu.SourcePosition";
	"org.eclipse.jdt.internal.compiler.lookup.ProblemReferenceBinding" [color=grey];
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "java.util.List";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.declaration.CtTypeParameterImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.template.Parameters$" -> "java.lang.Object";
	"spoon.support.template.Parameters$" -> "spoon.template.TemplateParameter";
	"spoon.support.template.Parameters$" -> "java.lang.Number";
	"spoon.support.template.Parameters$" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.template.Parameters$" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.template.Parameters$" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.template.Parameters$" -> "java.lang.Comparable";
	"spoon.support.template.Parameters$" -> "spoon.processing.FactoryAccessor";
	"spoon.support.template.Parameters$" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.template.Parameters$" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.template.Parameters$" -> "T";
	"spoon.reflect.visitor.Child" -> "java.lang.annotation.ElementType";
	"spoon.reflect.visitor.Child" -> "java.lang.reflect.Array";
	"java.lang.Comparable" [color=grey];
	"spoon.FileSet" [color=grey];
	"java.io.ObjectOutputStream" [color=grey];
	"spoon.reflect.code.CtInvocation" -> "java.util.List";
	"org.eclipse.jdt.internal.compiler.lookup.WildcardBinding" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.NullLiteral" [color=grey];
	"spoon.reflect.visitor.filter.TypeFilter" -> "java.lang.Class";
	"spoon.reflect.visitor.filter.TypeFilter" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.reflect.visitor.filter.TypeFilter" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.visitor.filter.TypeFilter" -> "T";
	"org.eclipse.jdt.internal.compiler.lookup.Scope" [color=grey];
	"org.eclipse.jdt.core.compiler.CategorizedProblem" [color=grey];
	"spoon.SpoonTask" -> "java.lang.String";
	"spoon.SpoonTask" -> "java.io.File";
	"spoon.SpoonTask" -> "java.util.Vector";
	"spoon.SpoonTask" -> "java.util.ArrayList";
	"spoon.SpoonTask" -> "java.util.List";
	"spoon.SpoonTask" -> "spoon.Path";
	"spoon.SpoonTask" -> "spoon.Java";
	"spoon.SpoonTask" -> "Java";
	"spoon.SpoonTask" -> "Path";
	"spoon.SpoonTask" -> "spoon.SpoonTask$ProcessorType";
	"spoon.SpoonTask" -> "FileSet";
	"spoon.SpoonTask" -> "spoon.FileSet";
	"spoon.SpoonTask" -> "DirectoryScanner";
	"spoon.SpoonTask" -> "spoon.DirectoryScanner";
	"spoon.SpoonTask" -> "java.lang.reflect.Array";
	"spoon.SpoonTask" -> "BuildException";
	"spoon.SpoonTask" -> "java.lang.Override";
	"spoon.SpoonTask" -> "spoon.BuildException";
	"spoon.SpoonTask" -> "Reference";
	"spoon.SpoonTask" -> "spoon.Reference";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.util.TreeMap";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.util.Map";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Object";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Class";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Exception";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.declaration.CtField";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.code.CtLiteral";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Enum";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "E";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.reflect.Member";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.reflect.Field";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "org.apache.log4j.Logger";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Throwable";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "org.apache.log4j.Category";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.code.CtFieldAccess";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.factory.EvalFactory";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.eval.PartialEvaluator";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.util.Collection";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.util.List";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.reflect.Array";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.util.Arrays";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Boolean";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "byte";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Byte";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Double";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Float";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Integer";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.Long";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "T";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.ClassLoader";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.reflect.InvocationHandler";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.reflect.Proxy";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "A";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.reflect.Method";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.lang.RuntimeException";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.util.Map$Entry";
	"spoon.support.reflect.declaration.CtAnnotationImpl" -> "java.util.Set";
	"org.eclipse.jdt.internal.compiler.ASTVisitor" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding" [color=grey];
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtInvocationImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtInvocationImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtInvocationImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.code.CtBlock";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.code.CtInvocationImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.code.CtInvocationImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.support.reflect.code.CtTargetedExpressionImpl";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.code.CtInvocation";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.code.CtInvocationImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.code.CtInvocationImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtInvocationImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.reflect.visitor.CtStackScanner" -> "java.util.Stack";
	"spoon.reflect.visitor.CtStackScanner" -> "spoon.reflect.visitor.CtScanner";
	"spoon.reflect.visitor.CtStackScanner" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.CtStackScanner" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.CtStackScanner" -> "java.lang.Comparable";
	"spoon.reflect.visitor.CtStackScanner" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.CtStackScanner" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.CtStackScanner" -> "java.lang.String";
	"spoon.reflect.visitor.CtStackScanner" -> "java.lang.RuntimeException";
	"spoon.Java" [color=grey];
	"java.awt.GraphicsConfiguration" [color=grey];
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.reflect.code.CtBlock";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.reflect.code.CtSynchronized";
	"spoon.support.reflect.code.CtSynchronizedImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.template.StatementTemplate" -> "java.lang.Object";
	"spoon.template.StatementTemplate" -> "spoon.template.Template";
	"spoon.template.StatementTemplate" -> "spoon.template.TemplateParameter";
	"spoon.template.StatementTemplate" -> "java.lang.Void";
	"spoon.template.StatementTemplate" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.template.StatementTemplate" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.template.StatementTemplate" -> "spoon.reflect.declaration.CtElement";
	"spoon.template.StatementTemplate" -> "java.lang.Comparable";
	"spoon.template.StatementTemplate" -> "spoon.processing.FactoryAccessor";
	"spoon.template.StatementTemplate" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.template.StatementTemplate" -> "spoon.reflect.declaration.CtClass";
	"spoon.template.StatementTemplate" -> "spoon.reflect.code.CtStatement";
	"spoon.template.StatementTemplate" -> "spoon.reflect.code.CtCodeElement";
	"spoon.template.StatementTemplate" -> "spoon.reflect.declaration.CtType";
	"spoon.template.StatementTemplate" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.template.StatementTemplate" -> "spoon.reflect.factory.Factory";
	"spoon.template.StatementTemplate" -> "spoon.reflect.factory.ClassFactory";
	"spoon.template.StatementTemplate" -> "spoon.reflect.factory.TypeFactory";
	"spoon.template.StatementTemplate" -> "spoon.reflect.factory.SubFactory";
	"spoon.template.StatementTemplate" -> "java.lang.Class";
	"spoon.template.StatementTemplate" -> "java.lang.String";
	"spoon.template.StatementTemplate" -> "spoon.reflect.declaration.CtMethod";
	"spoon.template.StatementTemplate" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.template.StatementTemplate" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.template.StatementTemplate" -> "spoon.reflect.code.CtBlock";
	"spoon.template.StatementTemplate" -> "spoon.reflect.code.CtStatementList";
	"spoon.template.StatementTemplate" -> "java.lang.Iterable";
	"spoon.template.StatementTemplate" -> "java.util.List";
	"spoon.template.StatementTemplate" -> "spoon.template.Substitution";
	"spoon.template.StatementTemplate" -> "spoon.reflect.factory.CoreFactory";
	"spoon.template.StatementTemplate" -> "java.lang.Throwable";
	"spoon.support.compiler.jdt.TreeBuilderRequestor" -> "spoon.support.compiler.jdt.JDTBasedSpoonCompiler";
	"spoon.support.compiler.jdt.TreeBuilderRequestor" -> "spoon.compiler.SpoonCompiler";
	"spoon.support.compiler.jdt.TreeBuilderRequestor" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.TreeBuilderRequestor" -> "java.lang.Object";
	"spoon.support.compiler.jdt.TreeBuilderRequestor" -> "org.eclipse.jdt.internal.compiler.ICompilerRequestor";
	"spoon.support.compiler.jdt.TreeBuilderRequestor" -> "org.eclipse.jdt.internal.compiler.CompilationResult";
	"spoon.support.compiler.jdt.TreeBuilderRequestor" -> "java.util.List";
	"spoon.support.compiler.jdt.TreeBuilderRequestor" -> "java.lang.reflect.Array";
	"java.lang.IllegalStateException" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.FieldDeclaration" [color=grey];
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.declaration.CtField";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.factory.FieldFactory";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "java.lang.Override";
	"spoon.support.reflect.declaration.CtFieldImpl" -> "spoon.reflect.visitor.CtVisitor";
	"java.awt.GridLayout" [color=grey];
	"java.lang.annotation.ElementType" [color=grey];
	"java.lang.annotation.Annotation" [color=grey];
	"spoon.SpoonException" -> "java.lang.RuntimeException";
	"spoon.SpoonException" -> "java.lang.String";
	"spoon.SpoonException" -> "java.lang.Exception";
	"spoon.SpoonException" -> "java.lang.Throwable";
	"spoon.reflect.code.CtThrow" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtThrow" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtThrow" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtThrow" -> "java.lang.Comparable";
	"spoon.reflect.code.CtThrow" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtThrow" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtThrow" -> "spoon.template.TemplateParameter";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.visitor.CtScanner";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.Query" -> "java.lang.Comparable";
	"spoon.reflect.visitor.Query" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.visitor.QueryVisitor";
	"spoon.reflect.visitor.Query" -> "java.util.List";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.visitor.Query" -> "java.util.ArrayList";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.factory.PackageFactory";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.visitor.Query" -> "java.io.Serializable";
	"spoon.reflect.visitor.Query" -> "java.util.Collection";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.visitor.ReferenceFilter";
	"spoon.reflect.visitor.Query" -> "spoon.reflect.visitor.ReferenceQueryVisitor";
	"spoon.support.compiler.SnippetCompilationError" -> "java.util.List";
	"spoon.support.compiler.SnippetCompilationError" -> "java.lang.String";
	"spoon.support.compiler.SnippetCompilationError" -> "spoon.SpoonException";
	"spoon.support.compiler.SnippetCompilationError" -> "java.lang.RuntimeException";
	"spoon.support.compiler.SnippetCompilationError" -> "java.util.ArrayList";
	"Reference" [color=grey];
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.code.CtBlock";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtCatchImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.code.CtCatchImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtCatchImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.code.CtCatch";
	"spoon.support.reflect.code.CtCatchImpl" -> "spoon.reflect.visitor.CtVisitor";
	"java.io.FileNotFoundException" [color=grey];
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.support.reflect.declaration.CtExecutableImpl";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "java.lang.Override";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.declaration.CtConstructorImpl" -> "java.lang.RuntimeException";
	"spoon.reflect.code.CtWhile" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtWhile" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtWhile" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtWhile" -> "java.lang.Comparable";
	"spoon.reflect.code.CtWhile" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtWhile" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtWhile" -> "spoon.template.TemplateParameter";
	"spoon.reflect.code.CtAnnotationFieldAccess" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.code.CtAnnotationFieldAccess" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.code.CtAnnotationFieldAccess" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.code.CtAnnotationFieldAccess" -> "java.lang.Comparable";
	"spoon.reflect.code.CtAnnotationFieldAccess" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtConditionalImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtConditionalImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtConditionalImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtConditionalImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtConditionalImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtConditionalImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtConditionalImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtConditionalImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtConditionalImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtConditionalImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtConditionalImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtConditionalImpl" -> "spoon.reflect.code.CtConditional";
	"spoon.support.reflect.code.CtConditionalImpl" -> "spoon.reflect.visitor.CtVisitor";
	"org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression" [color=grey];
	"spoon.reflect.code.CtLiteral" -> "T";
	"org.eclipse.jdt.internal.compiler.lookup.ArrayBinding" [color=grey];
	"java.lang.reflect.Method" [color=grey];
	"java.lang.Thread" [color=grey];
	"spoon.template.Local" -> "java.lang.annotation.ElementType";
	"spoon.template.Local" -> "java.lang.reflect.Array";
	"java.util.Collections" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.UnaryExpression" [color=grey];
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "java.lang.Comparable";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.code.CtFieldAccess";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.template.TemplateParameter";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.visitor.filter.FieldAccessFilter" -> "java.lang.Object";
	"org.w3c.dom.Node" [color=grey];
	"spoon.support.util.SortedList" -> "java.util.Comparator";
	"spoon.support.util.SortedList" -> "java.util.LinkedList";
	"spoon.support.util.SortedList" -> "E";
	"spoon.support.util.SortedList" -> "java.lang.Override";
	"spoon.support.util.SortedList" -> "java.util.Collection";
	"spoon.reflect.reference.CtParameterReference" -> "spoon.reflect.declaration.CtParameter";
	"spoon.reflect.reference.CtParameterReference" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.reference.CtParameterReference" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.reference.CtParameterReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtParameterReference" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.reference.CtParameterReference" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.reference.CtParameterReference" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.reference.CtParameterReference" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.reference.CtParameterReference" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.reference.CtParameterReference" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.reference.CtParameterReference" -> "spoon.reflect.reference.CtReference";
	"org.eclipse.jdt.internal.compiler.ast.ForeachStatement" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.TryStatement" [color=grey];
	"spoon.support.processing.SpoonletXmlHandler" -> "spoon.reflect.factory.Factory";
	"spoon.support.processing.SpoonletXmlHandler" -> "spoon.Launcher";
	"spoon.support.processing.SpoonletXmlHandler" -> "java.util.List";
	"spoon.support.processing.SpoonletXmlHandler" -> "spoon.support.processing.XmlProcessorProperties";
	"spoon.support.processing.SpoonletXmlHandler" -> "spoon.processing.ProcessorProperties";
	"spoon.support.processing.SpoonletXmlHandler" -> "java.lang.String";
	"spoon.support.processing.SpoonletXmlHandler" -> "org.xml.sax.helpers.DefaultHandler";
	"spoon.support.processing.SpoonletXmlHandler" -> "java.lang.reflect.Array";
	"spoon.support.processing.SpoonletXmlHandler" -> "java.lang.Override";
	"spoon.support.processing.SpoonletXmlHandler" -> "org.xml.sax.SAXException";
	"spoon.support.processing.SpoonletXmlHandler" -> "spoon.compiler.Environment";
	"spoon.support.processing.SpoonletXmlHandler" -> "org.xml.sax.Attributes";
	"spoon.support.processing.SpoonletXmlHandler" -> "spoon.compiler.SpoonResource";
	"spoon.support.processing.SpoonletXmlHandler" -> "java.util.ArrayList";
	"org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation" [color=grey];
	"java.util.Collection" [color=grey];
	"java.lang.IllegalAccessException" [color=grey];
	"spoon.compiler.SpoonCompiler" -> "java.lang.Exception";
	"spoon.compiler.SpoonCompiler" -> "java.io.File";
	"spoon.compiler.SpoonCompiler" -> "java.lang.String";
	"spoon.compiler.SpoonCompiler" -> "java.util.Set";
	"spoon.compiler.SpoonCompiler" -> "java.io.IOException";
	"spoon.compiler.SpoonCompiler" -> "spoon.compiler.SpoonResource";
	"spoon.compiler.SpoonCompiler" -> "java.util.List";
	"spoon.compiler.SpoonCompiler" -> "spoon.OutputType";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.eval.SymbolicEvaluator";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.factory.EvalFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.EvalFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.eval.SymbolicInstance";
	"spoon.reflect.factory.EvalFactory" -> "java.util.Collection";
	"spoon.reflect.factory.EvalFactory" -> "java.util.HashMap";
	"spoon.reflect.factory.EvalFactory" -> "java.util.Map";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.declaration.CtMethod";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.eval.observer.SymbolicEvaluationPathsMaker";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.eval.SymbolicEvaluatorObserver";
	"spoon.reflect.factory.EvalFactory" -> "spoon.support.reflect.eval.VisitorPartialEvaluator";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.eval.PartialEvaluator";
	"spoon.reflect.factory.EvalFactory" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.factory.EvalFactory" -> "java.lang.reflect.Array";
	"spoon.reflect.factory.EvalFactory" -> "spoon.support.reflect.eval.VisitorSymbolicEvaluator";
	"org.eclipse.jdt.internal.compiler.ast.UnionTypeReference" [color=grey];
	"java.awt.GraphicsDevice" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.SingleNameReference" [color=grey];
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.code.CtExpressionImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtExpressionImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtExpressionImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtExpressionImpl" -> "T";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtExpressionImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.code.CtExpressionImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.code.CtExpressionImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtStatementImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtStatementImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtStatementImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.declaration.ParentNotInitializedException";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.SpoonException";
	"spoon.support.reflect.code.CtStatementImpl" -> "java.lang.RuntimeException";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.code.CtStatementImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtStatementImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.code.CtBlock";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.code.CtIf";
	"spoon.support.reflect.code.CtStatementImpl" -> "java.lang.IllegalArgumentException";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.code.CtSwitch";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.code.CtCase";
	"spoon.support.reflect.code.CtStatementImpl" -> "spoon.reflect.code.CtLoop";
	"spoon.processing.ProcessorProperties" -> "java.lang.Class";
	"spoon.processing.ProcessorProperties" -> "java.lang.String";
	"spoon.processing.ProcessorProperties" -> "T";
	"com.martiansoftware.jsap.FlaggedOption" [color=grey];
	"java.util.Date" [color=grey];
	"java.lang.Cloneable" [color=grey];
	"java.lang.reflect.Proxy" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.Initializer" [color=grey];
	"java.io.ObjectInputStream" [color=grey];
	"java.util.HashSet" [color=grey];
	"java.lang.Exception" [color=grey];
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "java.util.List";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "java.io.Serializable";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "spoon.support.reflect.reference.CtTypeReferenceImpl";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "spoon.support.reflect.reference.CtReferenceImpl";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "java.lang.Class";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "java.lang.Override";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "A";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "java.lang.String";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "java.lang.Object";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "java.lang.reflect.AnnotatedElement";
	"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.processing.Property" -> "java.lang.String";
	"java.lang.NullPointerException" [color=grey];
	"org.eclipse.jdt.internal.compiler.IProblemFactory" [color=grey];
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "java.lang.Class";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.reflect.visitor.filter.TypeFilter";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.reflect.visitor.Filter";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.reflect.code.CtStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "java.lang.Comparable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "java.lang.String";
	"spoon.support.compiler.jdt.JDTTreeBuilder$" -> "java.lang.Override";
	"java.lang.Enum" [color=grey];
	"java.io.InputStream" [color=grey];
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.AnnotationFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.AnnotationFactory" -> "java.lang.Class";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.AnnotationFactory" -> "java.lang.String";
	"spoon.reflect.factory.AnnotationFactory" -> "java.lang.Object";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.declaration.CtField";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.reflect.factory.AnnotationFactory" -> "java.lang.reflect.Method";
	"spoon.reflect.factory.AnnotationFactory" -> "java.lang.reflect.Array";
	"spoon.reflect.factory.AnnotationFactory" -> "java.lang.Exception";
	"spoon.reflect.factory.AnnotationFactory" -> "java.lang.RuntimeException";
	"spoon.reflect.factory.AnnotationFactory" -> "java.util.Collection";
	"spoon.reflect.factory.AnnotationFactory" -> "java.util.Arrays";
	"spoon.reflect.factory.AnnotationFactory" -> "java.util.List";
	"spoon.reflect.factory.AnnotationFactory" -> "java.util.Map";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.factory.AnnotationFactory" -> "java.util.Set";
	"spoon.reflect.factory.AnnotationFactory" -> "spoon.reflect.factory.PackageFactory";
	"spoon.reflect.factory.AnnotationFactory" -> "java.io.Serializable";
	"spoon.support.SerializationModelStreamer" -> "java.lang.Object";
	"spoon.support.SerializationModelStreamer" -> "spoon.reflect.ModelStreamer";
	"spoon.support.SerializationModelStreamer" -> "java.io.InputStream";
	"spoon.support.SerializationModelStreamer" -> "java.io.ObjectInputStream";
	"spoon.support.SerializationModelStreamer" -> "spoon.reflect.factory.Factory";
	"spoon.support.SerializationModelStreamer" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.SerializationModelStreamer" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.SerializationModelStreamer" -> "spoon.reflect.factory.PackageFactory";
	"spoon.support.SerializationModelStreamer" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.SerializationModelStreamer" -> "java.io.Serializable";
	"spoon.support.SerializationModelStreamer" -> "java.util.Collection";
	"spoon.support.SerializationModelStreamer" -> "java.lang.ClassNotFoundException";
	"spoon.support.SerializationModelStreamer" -> "org.apache.log4j.Logger";
	"spoon.support.SerializationModelStreamer" -> "java.lang.Throwable";
	"spoon.support.SerializationModelStreamer" -> "java.lang.String";
	"spoon.support.SerializationModelStreamer" -> "org.apache.log4j.Category";
	"spoon.support.SerializationModelStreamer" -> "java.io.IOException";
	"spoon.support.SerializationModelStreamer" -> "java.io.OutputStream";
	"spoon.support.SerializationModelStreamer" -> "java.io.ObjectOutputStream";
	"spoon.reflect.visitor.filter.ReturnOrThrowFilter" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.reflect.visitor.filter.ReturnOrThrowFilter" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.visitor.filter.ReturnOrThrowFilter" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.visitor.filter.ReturnOrThrowFilter" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.filter.ReturnOrThrowFilter" -> "java.lang.Comparable";
	"spoon.reflect.visitor.filter.ReturnOrThrowFilter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.filter.ReturnOrThrowFilter" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.reflect.visitor.filter.ReturnOrThrowFilter" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.visitor.filter.ReturnOrThrowFilter" -> "spoon.reflect.code.CtReturn";
	"spoon.reflect.visitor.filter.ReturnOrThrowFilter" -> "spoon.template.TemplateParameter";
	"spoon.reflect.visitor.filter.ReturnOrThrowFilter" -> "spoon.reflect.code.CtThrow";
	"org.eclipse.jdt.internal.compiler.ast.FalseLiteral" [color=grey];
	"spoon.support.util.Timer" -> "java.util.ArrayList";
	"spoon.support.util.Timer" -> "java.util.List";
	"spoon.support.util.Timer" -> "java.util.Stack";
	"spoon.support.util.Timer" -> "java.lang.String";
	"spoon.support.util.Timer" -> "java.lang.Object";
	"spoon.support.util.Timer" -> "java.lang.System";
	"spoon.support.util.Timer" -> "java.lang.Override";
	"spoon.support.util.Timer" -> "java.io.PrintStream";
	"spoon.support.util.Timer" -> "java.lang.RuntimeException";
	"org.eclipse.jdt.internal.compiler.ast.TypeReference" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.DoStatement" [color=grey];
	"spoon.support.reflect.declaration.CompilationUnitVirtualImpl" -> "spoon.support.reflect.cu.CompilationUnitImpl";
	"spoon.support.reflect.declaration.CompilationUnitVirtualImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CompilationUnitVirtualImpl" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.support.reflect.declaration.CompilationUnitVirtualImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CompilationUnitVirtualImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtBreakImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtBreakImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtBreakImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtBreakImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtBreakImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtBreakImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtBreakImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtBreakImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtBreakImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtBreakImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtBreakImpl" -> "spoon.reflect.code.CtBreak";
	"spoon.support.reflect.code.CtBreakImpl" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.reflect.code.CtBreakImpl" -> "spoon.reflect.visitor.CtVisitor";
	"org.eclipse.jdt.internal.compiler.ast.AllocationExpression" [color=grey];
	"java.lang.reflect.Array" [color=grey];
	"org.w3c.dom.Element" [color=grey];
	"spoon.support.template.DefaultParameterMatcher" -> "java.lang.Object";
	"spoon.support.template.DefaultParameterMatcher" -> "spoon.support.template.ParameterMatcher";
	"spoon.support.template.DefaultParameterMatcher" -> "spoon.template.TemplateMatcher";
	"spoon.support.template.DefaultParameterMatcher" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.template.DefaultParameterMatcher" -> "java.lang.Comparable";
	"spoon.support.template.DefaultParameterMatcher" -> "spoon.processing.FactoryAccessor";
	"spoon.support.template.DefaultParameterMatcher" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.util.List";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.io.Serializable";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.support.reflect.reference.CtReferenceImpl";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Class";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "A";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.RuntimeException";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Override";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.String";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtInterface";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Exception";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "org.apache.log4j.Logger";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "org.apache.log4j.Category";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.util.Set";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Object";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.reflect.Array";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "byte";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "short";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Thread";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.ClassLoader";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.reflect.AnnotatedElement";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.util.Collection";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.reflect.Method";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.factory.MethodFactory";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.reflect.Constructor";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.factory.ConstructorFactory";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.reflect.Field";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.factory.FieldFactory";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtField";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.support.util.RtHelper";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Integer";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Float";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Long";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Character";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Double";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Boolean";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Short";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Byte";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "java.lang.Void";
	"spoon.support.reflect.reference.CtTypeReferenceImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.util.TreeMap";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.util.Map";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.lang.String";
	"spoon.processing.AbstractAnnotationProcessor" -> "spoon.processing.AbstractProcessor";
	"spoon.processing.AbstractAnnotationProcessor" -> "spoon.processing.Processor";
	"spoon.processing.AbstractAnnotationProcessor" -> "spoon.processing.FactoryAccessor";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.lang.reflect.Method";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.lang.Object";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.lang.Class";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.lang.reflect.Array";
	"spoon.processing.AbstractAnnotationProcessor" -> "spoon.processing.AnnotationProcessor";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.lang.annotation.Annotation";
	"spoon.processing.AbstractAnnotationProcessor" -> "spoon.reflect.declaration.CtElement";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.lang.Comparable";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.util.Set";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.lang.SuppressWarnings";
	"spoon.processing.AbstractAnnotationProcessor" -> "E";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.util.List";
	"spoon.processing.AbstractAnnotationProcessor" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.lang.Override";
	"spoon.processing.AbstractAnnotationProcessor" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.processing.AbstractAnnotationProcessor" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.processing.AbstractAnnotationProcessor" -> "spoon.reflect.reference.CtReference";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.util.Collection";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.util.TreeSet";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.util.ArrayList";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.lang.Exception";
	"spoon.processing.AbstractAnnotationProcessor" -> "org.apache.log4j.Logger";
	"spoon.processing.AbstractAnnotationProcessor" -> "java.lang.Throwable";
	"spoon.processing.AbstractAnnotationProcessor" -> "org.apache.log4j.Category";
	"org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference" [color=grey];
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.support.reflect.code.CtVariableAccessImpl";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.reflect.code.CtTargetedAccessImpl" -> "spoon.reflect.visitor.CtVisitor";
	"byte" [color=grey];
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtNewClassImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtNewClassImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtNewClassImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.code.CtNewClassImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.support.reflect.code.CtTargetedExpressionImpl";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.code.CtNewClass";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.support.reflect.code.CtNewClassImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.code.CtNewClassImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtNewClassImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.code.CtNewClassImpl" -> "java.lang.Iterable";
	"org.w3c.dom.Document" [color=grey];
	"java.lang.Throwable" [color=grey];
	"spoon.reflect.visitor.Filter" -> "T";
	"spoon.reflect.visitor.Filter" -> "java.lang.Class";
	"java.lang.Class" [color=grey];
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.EnumFactory" -> "java.lang.Class";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.EnumFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.EnumFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.EnumFactory" -> "java.lang.Exception";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.declaration.CtEnum";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.factory.EnumFactory" -> "java.lang.String";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.factory.PackageFactory";
	"spoon.reflect.factory.EnumFactory" -> "java.io.Serializable";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.factory.EnumFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.EnumFactory" -> "java.util.Set";
	"spoon.reflect.factory.EnumFactory" -> "java.lang.SuppressWarnings";
	"org.eclipse.jdt.internal.compiler.ast.Assignment" [color=grey];
	"java.lang.Object" [color=grey];
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "spoon.support.reflect.declaration.CtSimpleTypeImpl";
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.support.reflect.declaration.CtAnnotationTypeImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.declaration.CtNamedElement" -> "java.lang.String";
	"spoon.reflect.declaration.CtNamedElement" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.declaration.CtNamedElement" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtNamedElement" -> "spoon.processing.FactoryAccessor";
	"java.util.TreeMap" [color=grey];
	"javax.swing.JScrollPane" [color=grey];
	"spoon.processing.XMLAnnotationProcessor" -> "java.lang.String";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.processing.Property";
	"spoon.processing.XMLAnnotationProcessor" -> "org.w3c.dom.Document";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.processing.AbstractManualProcessor";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.processing.Processor";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.processing.FactoryAccessor";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtElement";
	"spoon.processing.XMLAnnotationProcessor" -> "java.lang.Comparable";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.processing.XMLAnnotationProcessor" -> "java.util.regex.Pattern";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtField";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtVariable";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.processing.XMLAnnotationProcessor" -> "org.w3c.dom.Element";
	"spoon.processing.XMLAnnotationProcessor" -> "org.w3c.dom.NodeList";
	"spoon.processing.XMLAnnotationProcessor" -> "org.w3c.dom.Node";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.factory.Factory";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.factory.AnnotationFactory";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.factory.TypeFactory";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.factory.SubFactory";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.reference.CtReference";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.processing.XMLAnnotationProcessor" -> "java.lang.Class";
	"spoon.processing.XMLAnnotationProcessor" -> "java.lang.reflect.Method";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.compiler.Environment";
	"spoon.processing.XMLAnnotationProcessor" -> "java.lang.Object";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.processing.ProcessorProperties";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.support.processing.XmlProcessorProperties";
	"spoon.processing.XMLAnnotationProcessor" -> "java.lang.Exception";
	"spoon.processing.XMLAnnotationProcessor" -> "javax.xml.parsers.DocumentBuilderFactory";
	"spoon.processing.XMLAnnotationProcessor" -> "javax.xml.parsers.DocumentBuilder";
	"spoon.processing.XMLAnnotationProcessor" -> "java.lang.ClassLoader";
	"spoon.processing.XMLAnnotationProcessor" -> "java.io.InputStream";
	"spoon.processing.XMLAnnotationProcessor" -> "org.xml.sax.SAXParseException";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.processing.Severity";
	"spoon.processing.XMLAnnotationProcessor" -> "org.xml.sax.SAXException";
	"spoon.processing.XMLAnnotationProcessor" -> "org.apache.log4j.Logger";
	"spoon.processing.XMLAnnotationProcessor" -> "java.lang.Throwable";
	"spoon.processing.XMLAnnotationProcessor" -> "org.apache.log4j.Category";
	"spoon.processing.XMLAnnotationProcessor" -> "javax.xml.parsers.ParserConfigurationException";
	"spoon.processing.XMLAnnotationProcessor" -> "java.io.IOException";
	"spoon.processing.XMLAnnotationProcessor" -> "java.lang.Override";
	"spoon.processing.XMLAnnotationProcessor" -> "java.util.List";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtType";
	"spoon.processing.XMLAnnotationProcessor" -> "java.util.ArrayList";
	"spoon.processing.XMLAnnotationProcessor" -> "java.util.Set";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.declaration.CtClass";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.code.CtStatement";
	"spoon.processing.XMLAnnotationProcessor" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.declaration.CtSimpleType" -> "java.lang.String";
	"spoon.reflect.declaration.CtSimpleType" -> "spoon.reflect.declaration.CtField";
	"spoon.reflect.declaration.CtSimpleType" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.declaration.CtSimpleType" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.declaration.CtSimpleType" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtSimpleType" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtSimpleType" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.declaration.CtSimpleType" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.declaration.CtSimpleType" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.declaration.CtSimpleType" -> "N";
	"spoon.reflect.declaration.CtSimpleType" -> "java.lang.Class";
	"spoon.reflect.declaration.CtSimpleType" -> "java.util.List";
	"spoon.reflect.declaration.CtSimpleType" -> "java.util.Set";
	"spoon.reflect.declaration.CtSimpleType" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.declaration.CtSimpleType" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.declaration.CtSimpleType" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.declaration.CtSimpleType" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.declaration.CtSimpleType" -> "java.lang.Deprecated";
	"org.eclipse.jdt.internal.compiler.ast.MethodDeclaration" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.DoubleLiteral" [color=grey];
	"spoon.support.reflect.code.CtForImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtForImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtForImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtForImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.support.reflect.code.CtLoopImpl";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.reflect.code.CtLoop";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.reflect.code.CtFor";
	"spoon.support.reflect.code.CtForImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.code.CtForImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtForImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.compiler.ZipFolder" -> "java.io.File";
	"spoon.support.compiler.ZipFolder" -> "java.util.List";
	"spoon.support.compiler.ZipFolder" -> "java.lang.Object";
	"spoon.support.compiler.ZipFolder" -> "java.lang.String";
	"spoon.support.compiler.ZipFolder" -> "java.io.IOException";
	"spoon.support.compiler.ZipFolder" -> "spoon.compiler.SpoonFolder";
	"spoon.support.compiler.ZipFolder" -> "spoon.compiler.SpoonResource";
	"spoon.support.compiler.ZipFolder" -> "java.lang.Override";
	"spoon.support.compiler.ZipFolder" -> "java.lang.Exception";
	"spoon.support.compiler.ZipFolder" -> "org.apache.log4j.Logger";
	"spoon.support.compiler.ZipFolder" -> "java.lang.Throwable";
	"spoon.support.compiler.ZipFolder" -> "org.apache.log4j.Category";
	"spoon.support.compiler.ZipFolder" -> "java.util.ArrayList";
	"spoon.support.compiler.ZipFolder" -> "spoon.compiler.SpoonFile";
	"spoon.support.compiler.ZipFolder" -> "java.util.zip.ZipInputStream";
	"spoon.support.compiler.ZipFolder" -> "java.io.FileInputStream";
	"spoon.support.compiler.ZipFolder" -> "java.io.BufferedInputStream";
	"spoon.support.compiler.ZipFolder" -> "java.util.zip.ZipEntry";
	"spoon.support.compiler.ZipFolder" -> "java.io.ByteArrayOutputStream";
	"spoon.support.compiler.ZipFolder" -> "java.lang.reflect.Array";
	"spoon.support.compiler.ZipFolder" -> "java.io.OutputStream";
	"spoon.support.compiler.ZipFolder" -> "spoon.support.compiler.ZipFile";
	"spoon.support.compiler.ZipFolder" -> "spoon.compiler.SpoonResourceHelper";
	"spoon.support.compiler.ZipFolder" -> "java.io.FileNotFoundException";
	"BuildException" [color=grey];
	"spoon.reflect.reference.CtFieldReference" -> "java.lang.String";
	"spoon.reflect.reference.CtFieldReference" -> "java.lang.reflect.Member";
	"spoon.reflect.reference.CtFieldReference" -> "spoon.reflect.declaration.CtField";
	"spoon.reflect.reference.CtFieldReference" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.reference.CtFieldReference" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.reference.CtFieldReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtFieldReference" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.reference.CtFieldReference" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.reference.CtFieldReference" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.reference.CtFieldReference" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.reference.CtFieldReference" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.reference.CtFieldReference" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.reference.CtFieldReference" -> "spoon.reflect.reference.CtReference";
	"org.eclipse.jdt.internal.compiler.ast.EqualExpression" [color=grey];
	"spoon.template.TemplateMatcher" -> "java.util.ArrayList";
	"spoon.template.TemplateMatcher" -> "java.util.List";
	"spoon.template.TemplateMatcher" -> "java.util.HashMap";
	"spoon.template.TemplateMatcher" -> "java.util.Map";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtClass";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.code.CtStatement";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.code.CtCodeElement";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtElement";
	"spoon.template.TemplateMatcher" -> "java.lang.Comparable";
	"spoon.template.TemplateMatcher" -> "spoon.processing.FactoryAccessor";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtType";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.template.TemplateMatcher" -> "java.lang.Object";
	"spoon.template.TemplateMatcher" -> "java.lang.String";
	"spoon.template.TemplateMatcher" -> "spoon.template.TemplateException";
	"spoon.template.TemplateMatcher" -> "spoon.SpoonException";
	"spoon.template.TemplateMatcher" -> "java.lang.RuntimeException";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.visitor.CtScanner";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.template.TemplateMatcher" -> "";
	"spoon.template.TemplateMatcher" -> "java.lang.Class";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.reference.CtReference";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtPackage";
	"spoon.template.TemplateMatcher" -> "java.util.Collection";
	"spoon.template.TemplateMatcher" -> "java.util.Set";
	"spoon.template.TemplateMatcher" -> "java.lang.reflect.Field";
	"spoon.template.TemplateMatcher" -> "spoon.support.util.RtHelper";
	"spoon.template.TemplateMatcher" -> "java.lang.reflect.Array";
	"spoon.template.TemplateMatcher" -> "java.lang.reflect.AccessibleObject";
	"spoon.template.TemplateMatcher" -> "java.lang.reflect.Modifier";
	"spoon.template.TemplateMatcher" -> "java.lang.Exception";
	"spoon.template.TemplateMatcher" -> "org.apache.log4j.Logger";
	"spoon.template.TemplateMatcher" -> "java.lang.Throwable";
	"spoon.template.TemplateMatcher" -> "org.apache.log4j.Category";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.code.CtInvocation";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.code.CtExpression";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.template.TemplateMatcher" -> "spoon.template.TemplateParameter";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.code.CtFieldAccess";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.template.TemplateMatcher" -> "spoon.support.template.ParameterMatcher";
	"spoon.template.TemplateMatcher" -> "spoon.template.Parameter";
	"spoon.template.TemplateMatcher" -> "spoon.support.template.DefaultParameterMatcher";
	"spoon.template.TemplateMatcher" -> "java.lang.InstantiationException";
	"spoon.template.TemplateMatcher" -> "java.lang.IllegalAccessException";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtParameter";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtVariable";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.factory.Factory";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.factory.CoreFactory";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.code.CtStatementList";
	"spoon.template.TemplateMatcher" -> "java.lang.Iterable";
	"spoon.template.TemplateMatcher" -> "java.lang.SuppressWarnings";
	"spoon.template.TemplateMatcher" -> "java.util.regex.Pattern";
	"spoon.template.TemplateMatcher" -> "java.util.regex.Matcher";
	"spoon.template.TemplateMatcher" -> "java.io.PrintStream";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.factory.SubFactory";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.factory.TypeFactory";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.visitor.filter.InvocationFilter";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.visitor.Filter";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.visitor.Query";
	"spoon.template.TemplateMatcher" -> "spoon.support.template.Parameters";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.CtField";
	"spoon.template.TemplateMatcher" -> "java.util.Iterator";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.declaration.ParentNotInitializedException";
	"spoon.template.TemplateMatcher" -> "spoon.reflect.cu.SourcePosition";
	"spoon.template.TemplateMatcher" -> "java.lang.IllegalStateException";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtReturnImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtReturnImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.code.CtReturn";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.reflect.code.CtReturnImpl" -> "java.lang.Void";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.code.CtReturnImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" -> "spoon.compiler.Environment";
	"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" -> "java.lang.Object";
	"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" -> "spoon.reflect.eval.SymbolicEvaluatorObserver";
	"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" -> "spoon.reflect.eval.SymbolicEvaluator";
	"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" -> "java.lang.String";
	"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" -> "spoon.reflect.eval.SymbolicEvaluationStep";
	"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" -> "spoon.reflect.eval.StepKind";
	"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" -> "spoon.reflect.eval.SymbolicStackFrame";
	"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" -> "spoon.reflect.eval.SymbolicHeap";
	"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" -> "spoon.support.reflect.eval.VisitorSymbolicEvaluator";
	"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" -> "spoon.reflect.visitor.CtVisitor";
	"java.io.IOException" [color=grey];
	"short" [color=grey];
	"spoon.support.JavaOutputProcessor" -> "spoon.reflect.visitor.PrettyPrinter";
	"spoon.support.JavaOutputProcessor" -> "java.io.File";
	"spoon.support.JavaOutputProcessor" -> "java.util.ArrayList";
	"spoon.support.JavaOutputProcessor" -> "java.util.List";
	"spoon.support.JavaOutputProcessor" -> "java.util.HashMap";
	"spoon.support.JavaOutputProcessor" -> "java.util.Map";
	"spoon.support.JavaOutputProcessor" -> "spoon.processing.AbstractProcessor";
	"spoon.support.JavaOutputProcessor" -> "spoon.processing.Processor";
	"spoon.support.JavaOutputProcessor" -> "spoon.processing.FactoryAccessor";
	"spoon.support.JavaOutputProcessor" -> "spoon.processing.FileGenerator";
	"spoon.support.JavaOutputProcessor" -> "spoon.processing.TraversalStrategy";
	"spoon.support.JavaOutputProcessor" -> "java.lang.Override";
	"spoon.support.JavaOutputProcessor" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.JavaOutputProcessor" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.JavaOutputProcessor" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.JavaOutputProcessor" -> "java.lang.Comparable";
	"spoon.support.JavaOutputProcessor" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.JavaOutputProcessor" -> "spoon.compiler.Environment";
	"spoon.support.JavaOutputProcessor" -> "java.lang.String";
	"spoon.support.JavaOutputProcessor" -> "java.lang.IllegalArgumentException";
	"spoon.support.JavaOutputProcessor" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.support.JavaOutputProcessor" -> "spoon.reflect.cu.SourcePosition";
	"spoon.support.JavaOutputProcessor" -> "java.lang.IllegalStateException";
	"spoon.support.JavaOutputProcessor" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.JavaOutputProcessor" -> "java.io.PrintStream";
	"spoon.support.JavaOutputProcessor" -> "java.lang.RuntimeException";
	"spoon.support.JavaOutputProcessor" -> "java.io.FileNotFoundException";
	"spoon.support.JavaOutputProcessor" -> "org.apache.log4j.Logger";
	"spoon.support.JavaOutputProcessor" -> "java.lang.Throwable";
	"spoon.support.JavaOutputProcessor" -> "org.apache.log4j.Category";
	"spoon.support.JavaOutputProcessor" -> "java.io.IOException";
	"java.awt.event.KeyListener" [color=grey];
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtSwitchImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtSwitchImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtSwitchImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.reflect.code.CtSwitch";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.reflect.code.CtCase";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.code.CtSwitchImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.code.CtSwitchImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.code.CtSwitchImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtSwitchImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.factory.SubFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.SubFactory" -> "java.lang.Object";
	"spoon.support.compiler.VirtualFile" -> "java.io.InputStream";
	"spoon.support.compiler.VirtualFile" -> "java.lang.String";
	"spoon.support.compiler.VirtualFile" -> "java.lang.Object";
	"spoon.support.compiler.VirtualFile" -> "java.lang.reflect.Array";
	"spoon.support.compiler.VirtualFile" -> "java.io.ByteArrayInputStream";
	"spoon.support.compiler.VirtualFile" -> "spoon.compiler.SpoonFile";
	"spoon.support.compiler.VirtualFile" -> "spoon.compiler.SpoonResource";
	"spoon.support.compiler.VirtualFile" -> "java.lang.Override";
	"spoon.support.compiler.VirtualFile" -> "java.io.File";
	"spoon.support.compiler.VirtualFile" -> "spoon.support.compiler.VirtualFolder";
	"spoon.support.compiler.VirtualFile" -> "spoon.compiler.SpoonFolder";
	"spoon.reflect.code.CtVariableAccess" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.code.CtVariableAccess" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.code.CtVariableAccess" -> "java.lang.Comparable";
	"spoon.reflect.code.CtVariableAccess" -> "spoon.processing.FactoryAccessor";
	"org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding" [color=grey];
	"org.eclipse.jdt.internal.compiler.impl.Constant" [color=grey];
	"spoon.compiler.Environment" -> "java.lang.ClassLoader";
	"spoon.compiler.Environment" -> "java.lang.String";
	"spoon.compiler.Environment" -> "spoon.processing.FileGenerator";
	"spoon.compiler.Environment" -> "spoon.processing.Processor";
	"spoon.compiler.Environment" -> "spoon.processing.FactoryAccessor";
	"spoon.compiler.Environment" -> "spoon.processing.ProcessingManager";
	"spoon.compiler.Environment" -> "java.lang.Exception";
	"spoon.compiler.Environment" -> "spoon.processing.ProcessorProperties";
	"spoon.compiler.Environment" -> "spoon.processing.Severity";
	"spoon.compiler.Environment" -> "spoon.reflect.declaration.CtElement";
	"spoon.compiler.Environment" -> "java.lang.Comparable";
	"spoon.compiler.Environment" -> "java.lang.reflect.Array";
	"spoon.compiler.Environment" -> "java.io.File";
	"java.lang.Override" [color=grey];
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.visitor.CtScanner";
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.declaration.CtElement";
	"spoon.template.TemplateMatcher$" -> "java.lang.Comparable";
	"spoon.template.TemplateMatcher$" -> "spoon.processing.FactoryAccessor";
	"spoon.template.TemplateMatcher$" -> "spoon.template.TemplateMatcher";
	"spoon.template.TemplateMatcher$" -> "java.util.List";
	"spoon.template.TemplateMatcher$" -> "java.lang.Override";
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.declaration.CtField";
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.declaration.CtVariable";
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.template.TemplateMatcher$" -> "spoon.template.Parameter";
	"spoon.template.TemplateMatcher$" -> "java.lang.String";
	"spoon.template.TemplateMatcher$" -> "java.lang.reflect.Array";
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.reference.CtReference";
	"spoon.template.TemplateMatcher$" -> "java.util.Collection";
	"spoon.template.TemplateMatcher$" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "T";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.code.CtVariableAccessImpl" -> "spoon.reflect.visitor.CtVisitor";
	"org.eclipse.jdt.internal.compiler.Compiler" [color=grey];
	"java.lang.String" [color=grey];
	"spoon.reflect.declaration.ModifierKind" -> "java.lang.String";
	"spoon.reflect.declaration.ModifierKind" -> "java.lang.Enum";
	"spoon.reflect.declaration.ModifierKind" -> "java.util.Locale";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.AnnotationFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.ClassFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.CodeFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.ConstructorFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.EnumFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.compiler.Environment";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.EvalFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.FieldFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.InterfaceFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.MethodFactory";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.PackageFactory";
	"spoon.reflect.factory.FactoryImpl" -> "java.io.Serializable";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.reflect.factory.CompilationUnitFactory";
	"spoon.reflect.factory.FactoryImpl" -> "java.lang.Object";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.support.StandardEnvironment";
	"spoon.reflect.factory.FactoryImpl" -> "spoon.support.DefaultCoreFactory";
	"com.martiansoftware.jsap.Switch" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.CaptureBinding" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference" [color=grey];
	"java.lang.NoSuchMethodException" [color=grey];
	"spoon.reflect.reference.CtExecutableReference" -> "java.lang.String";
	"spoon.reflect.reference.CtExecutableReference" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.reference.CtExecutableReference" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.reference.CtExecutableReference" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.reference.CtExecutableReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtExecutableReference" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.reference.CtExecutableReference" -> "java.lang.reflect.Constructor";
	"spoon.reflect.reference.CtExecutableReference" -> "java.lang.reflect.Method";
	"spoon.reflect.reference.CtExecutableReference" -> "java.util.List";
	"spoon.reflect.reference.CtExecutableReference" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.reference.CtExecutableReference" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.reference.CtExecutableReference" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.reference.CtExecutableReference" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.reference.CtExecutableReference" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.reference.CtExecutableReference" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtAbstractInvocation" -> "java.util.List";
	"spoon.reflect.code.CtAbstractInvocation" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.code.CtAbstractInvocation" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.code.CtAbstractInvocation" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.code.CtAbstractInvocation" -> "java.lang.Comparable";
	"spoon.reflect.code.CtAbstractInvocation" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtAbstractInvocation" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtAbstractInvocation" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtAbstractInvocation" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtAbstractInvocation" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtAbstractInvocation" -> "spoon.template.TemplateParameter";
	"spoon.BuildException" [color=grey];
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.factory.Factory";
	"spoon.support.DefaultCoreFactory" -> "java.lang.Object";
	"spoon.support.DefaultCoreFactory" -> "java.io.Serializable";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtAnnotationImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.DefaultCoreFactory" -> "java.lang.Comparable";
	"spoon.support.DefaultCoreFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtBlockImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtStatement";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtBlock";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.DefaultCoreFactory" -> "java.lang.Iterable";
	"spoon.support.DefaultCoreFactory" -> "spoon.template.TemplateParameter";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtReturnImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtReturn";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtStatementListImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtCaseImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtCase";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtSwitchImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtSwitch";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtEnumImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtClassImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtTypeImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtSimpleTypeImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtType";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtEnum";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtAnnotationTypeImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtAssignmentImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtAssignment";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtExpression";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtOperatorAssignmentImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtArrayAccessImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtTargetedExpressionImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.support.DefaultCoreFactory" -> "T";
	"spoon.support.DefaultCoreFactory" -> "java.util.Stack";
	"spoon.support.DefaultCoreFactory" -> "java.lang.String";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.support.DefaultCoreFactory" -> "java.lang.Cloneable";
	"spoon.support.DefaultCoreFactory" -> "java.lang.Class";
	"spoon.support.DefaultCoreFactory" -> "java.lang.reflect.Method";
	"spoon.support.DefaultCoreFactory" -> "java.lang.reflect.Field";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.util.RtHelper";
	"spoon.support.DefaultCoreFactory" -> "java.lang.reflect.Array";
	"spoon.support.DefaultCoreFactory" -> "java.lang.reflect.AccessibleObject";
	"spoon.support.DefaultCoreFactory" -> "java.lang.reflect.Modifier";
	"spoon.support.DefaultCoreFactory" -> "java.util.Collection";
	"spoon.support.DefaultCoreFactory" -> "java.util.Set";
	"spoon.support.DefaultCoreFactory" -> "java.util.Map";
	"spoon.support.DefaultCoreFactory" -> "java.util.Map$Entry";
	"spoon.support.DefaultCoreFactory" -> "java.util.Vector";
	"spoon.support.DefaultCoreFactory" -> "java.lang.Exception";
	"spoon.support.DefaultCoreFactory" -> "org.apache.log4j.Logger";
	"spoon.support.DefaultCoreFactory" -> "java.lang.Throwable";
	"spoon.support.DefaultCoreFactory" -> "org.apache.log4j.Category";
	"spoon.support.DefaultCoreFactory" -> "java.lang.SuppressWarnings";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtAnnotationFieldAccesImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtFieldAccessImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtTargetedAccessImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtVariableAccessImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtFieldAccess";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtAssertImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtAssert";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtBinaryOperatorImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtCodeSnippetExpressionImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtConditionalImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtConditional";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtInvocationImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtInvocation";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtLiteralImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtLiteral";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtLocalVariableImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtNewArrayImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtNewArray";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtNewClassImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtNewClass";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtSuperAccessImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtSuperAccess";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtThisAccessImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtThisAccess";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtUnaryOperatorImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtConstructorImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtExecutableImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtFieldImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtField";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtInterfaceImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtInterface";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtMethodImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtParameterImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.reference.CtArrayTypeReferenceImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.reference.CtTypeReferenceImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.reference.CtReferenceImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.reference.CtExecutableReferenceImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.reference.CtFieldReferenceImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.reference.CtVariableReferenceImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.reference.CtLocalVariableReferenceImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.reference.CtParameterReferenceImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtBreakImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtBreak";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtCatchImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtCatch";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtCodeSnippetStatementImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtContinueImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtContinue";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtDoImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtLoopImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtLoop";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtDo";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtForImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtFor";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtForEachImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtForEach";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtIfImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtIf";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtSynchronizedImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtSynchronized";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtThrowImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtThrow";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtTryImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtTry";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.code.CtWhileImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.code.CtWhile";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.cu.CompilationUnitImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CompilationUnitVirtualImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.cu.SourcePositionImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.cu.SourcePosition";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtAnonymousExecutableImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtPackageImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.declaration.CtTypeParameterImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.reference.CtPackageReferenceImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.DefaultCoreFactory" -> "spoon.support.reflect.reference.CtTypeParameterReferenceImpl";
	"spoon.support.DefaultCoreFactory" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.support.gui.SpoonTreeBuilder$" -> "java.lang.Object";
	"spoon.support.gui.SpoonTreeBuilder$" -> "javax.swing.tree.DefaultMutableTreeNode";
	"spoon.support.gui.SpoonTreeBuilder$" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.gui.SpoonTreeBuilder$" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.gui.SpoonTreeBuilder$" -> "java.lang.Comparable";
	"spoon.support.gui.SpoonTreeBuilder$" -> "spoon.processing.FactoryAccessor";
	"spoon.support.gui.SpoonTreeBuilder$" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.gui.SpoonTreeBuilder$" -> "java.lang.Class";
	"spoon.support.gui.SpoonTreeBuilder$" -> "java.lang.String";
	"spoon.support.gui.SpoonTreeBuilder$" -> "java.lang.Override";
	"java.lang.Long" [color=grey];
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.String";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.Object";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.io.Serializable";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.Class";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "A";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.reflect.AnnotatedElement";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.util.HashMap";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.util.Map";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.reflect.Method";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.reflect.Array";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.Exception";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "org.apache.log4j.Logger";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.Throwable";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "org.apache.log4j.Category";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.Override";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.support.visitor.SignaturePrinter";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.compiler.Environment";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.visitor.DefaultJavaPrettyPrinter";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "spoon.reflect.visitor.PrettyPrinter";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.util.List";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.annotation.Annotation";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.util.Arrays";
	"spoon.support.reflect.reference.CtReferenceImpl" -> "java.lang.RuntimeException";
	"java.lang.System" [color=grey];
	"spoon.processing.Processor" -> "E";
	"spoon.processing.Processor" -> "java.util.Set";
	"spoon.processing.Processor" -> "spoon.compiler.Environment";
	"spoon.processing.Processor" -> "spoon.processing.TraversalStrategy";
	"spoon.processing.Processor" -> "spoon.processing.ProcessorProperties";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.support.reflect.declaration.CtTypeImpl";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.support.reflect.declaration.CtSimpleTypeImpl";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.reflect.declaration.CtInterface";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.declaration.CtInterfaceImpl" -> "spoon.reflect.visitor.CtVisitor";
	"java.awt.Component" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall" [color=grey];
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "java.util.ArrayList";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "java.util.List";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "java.lang.Object";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "java.lang.String";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "spoon.reflect.eval.SymbolicEvaluationStep";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "spoon.reflect.eval.StepKind";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "spoon.reflect.eval.SymbolicStackFrame";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "java.lang.Comparable";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "java.lang.Override";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "java.io.PrintStream";
	"spoon.reflect.eval.SymbolicEvaluationPath" -> "spoon.reflect.eval.SymbolicHeap";
	"java.util.Vector" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.TypeParameter" [color=grey];
	"spoon.reflect.declaration.CtClass" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.reflect.declaration.CtClass" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.declaration.CtClass" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtClass" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtClass" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.declaration.CtClass" -> "java.util.List";
	"spoon.reflect.declaration.CtClass" -> "java.util.Set";
	"spoon.reflect.declaration.CtClass" -> "java.lang.reflect.Array";
	"spoon.reflect.declaration.CtClass" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.reflect.declaration.CtClass" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.declaration.CtClass" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.declaration.CtClass" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.declaration.CtClass" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.declaration.CtClass" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.declaration.CtClass" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.declaration.CtClass" -> "spoon.reflect.reference.CtReference";
	"spoon.support.visitor.TypeReferenceScanner" -> "java.util.Set";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.visitor.TypeReferenceScanner" -> "java.util.HashSet";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.visitor.TypeReferenceScanner" -> "java.lang.Comparable";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.processing.FactoryAccessor";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.reference.CtReference";
	"spoon.support.visitor.TypeReferenceScanner" -> "java.lang.Override";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.declaration.CtEnum";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.code.CtStatement";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.declaration.CtType";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.visitor.TypeReferenceScanner" -> "java.util.List";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.declaration.CtInterface";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.code.CtExpression";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.template.TemplateParameter";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.visitor.TypeReferenceScanner" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.processing.FactoryAccessor" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.util.ArrayList";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.util.List";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.eval.SymbolicInstance";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.util.Stack";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.eval.SymbolicEvaluationStack";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.eval.SymbolicHeap";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.reflect.Array";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Object";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.eval.SymbolicEvaluatorObserver";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.eval.SymbolicEvaluator";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Comparable";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.String";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.RuntimeException";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtCase";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Iterable";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtSwitch";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtBlock";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtReturn";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.support.reflect.eval.ReturnException";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.SpoonException";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtEnum";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtAssignment";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.factory.FieldFactory";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtAssert";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.BinaryOperatorKind";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Number";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Class";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtConditional";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtField";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtInterface";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtInvocation";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtLiteral";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "T";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtNewArray";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtNewClass";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtThisAccess";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Override";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Integer";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "byte";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Byte";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Long";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Float";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "short";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Short";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.util.Vector";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.util.Arrays";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.util.HashMap";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.util.Map";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.visitor.filter.TypeFilter";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.visitor.Filter";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.visitor.Query";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.eval.StepKind";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.eval.SymbolicStackFrame";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.eval.SymbolicEvaluationStep";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.factory.EvalFactory";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.util.Set";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.support.reflect.eval.SymbolicWrappedException";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "org.apache.log4j.Logger";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "java.lang.Throwable";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "org.apache.log4j.Category";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.compiler.Environment";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.processing.Severity";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtBreak";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtCatch";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtContinue";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtDo";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtLoop";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtFor";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtForEach";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtIf";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtSynchronized";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtThrow";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtTry";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator" -> "spoon.reflect.code.CtWhile";
	"spoon.template.Parameter" -> "java.lang.annotation.ElementType";
	"spoon.template.Parameter" -> "java.lang.reflect.Array";
	"spoon.template.Parameter" -> "java.lang.String";
	"spoon.template.Parameter" -> "spoon.support.template.DefaultParameterMatcher";
	"spoon.template.Parameter" -> "spoon.support.template.ParameterMatcher";
	"spoon.template.Parameter" -> "java.lang.Class";
	"java.awt.event.KeyEvent" [color=grey];
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.reflect.code.UnaryOperatorKind";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.code.CtUnaryOperatorImpl" -> "java.lang.Iterable";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "java.lang.Object";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "spoon.reflect.visitor.Filter";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "java.lang.Comparable";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "java.lang.String";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "java.lang.Class";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "java.lang.Exception";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "org.apache.log4j.Logger";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "java.lang.Throwable";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "org.apache.log4j.Category";
	"spoon.support.compiler.SnippetCompilationHelper$" -> "java.lang.SuppressWarnings";
	"spoon.reflect.reference.CtReference" -> "java.lang.Class";
	"spoon.reflect.reference.CtReference" -> "A";
	"spoon.reflect.reference.CtReference" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.reference.CtReference" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.reference.CtReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtReference" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.reference.CtReference" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.reflect.reference.CtReference" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.reference.CtReference" -> "java.lang.String";
	"spoon.reflect.reference.CtReference" -> "java.util.List";
	"spoon.reflect.reference.CtReference" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "java.util.HashMap";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "java.util.Map";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "spoon.compiler.Environment";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "java.lang.Object";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "spoon.reflect.visitor.PrettyPrinter";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "java.lang.String";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "java.lang.StringBuffer";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "java.util.ArrayList";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "java.util.List";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "spoon.reflect.cu.SourceCodeFragment";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "java.lang.UnsupportedOperationException";
	"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" -> "java.lang.Override";
	"javax.swing.JFileChooser" [color=grey];
	"java.util.Iterator" [color=grey];
	"com.martiansoftware.jsap.Parameter" [color=grey];
	"spoon.support.reflect.cu.SourcePositionImpl" -> "java.lang.reflect.Array";
	"spoon.support.reflect.cu.SourcePositionImpl" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.support.reflect.cu.SourcePositionImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.cu.SourcePositionImpl" -> "java.lang.Object";
	"spoon.support.reflect.cu.SourcePositionImpl" -> "java.io.Serializable";
	"spoon.support.reflect.cu.SourcePositionImpl" -> "spoon.reflect.cu.SourcePosition";
	"spoon.support.reflect.cu.SourcePositionImpl" -> "java.io.File";
	"spoon.support.reflect.cu.SourcePositionImpl" -> "java.lang.Override";
	"spoon.support.reflect.cu.SourcePositionImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.cu.SourcePositionImpl" -> "spoon.compiler.Environment";
	"spoon.support.reflect.cu.SourcePositionImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "java.lang.Override";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.declaration.CtParameterImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.cu.Import" -> "java.lang.String";
	"spoon.reflect.cu.Import" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.cu.Import" -> "java.lang.Comparable";
	"spoon.reflect.cu.Import" -> "spoon.processing.FactoryAccessor";
	"java.lang.Iterable" [color=grey];
	"java.io.File" [color=grey];
	"java.util.Arrays" [color=grey];
	"java.lang.Void" [color=grey];
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtElementImpl" -> "org.apache.log4j.Logger";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.util.Collections";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.util.List";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.cu.SourcePosition";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.Object";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.Class";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtElementImpl" -> "A";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.visitor.filter.AnnotationFilter";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.visitor.Filter";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.visitor.Query";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.declaration.CtElementImpl" -> "P";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.declaration.ParentNotInitializedException";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.SpoonException";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.RuntimeException";
	"spoon.support.reflect.declaration.CtElementImpl" -> "T";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.reflect.Field";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.support.util.RtHelper";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.reflect.Array";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.reflect.AccessibleObject";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.util.Collection";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.IllegalAccessException";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.IllegalArgumentException";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.visitor.ReferenceFilter";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.support.reflect.declaration.CtUncomparableException";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.Override";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.ClassCastException";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.support.visitor.SignaturePrinter";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.compiler.Environment";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.visitor.DefaultJavaPrettyPrinter";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.visitor.PrettyPrinter";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.support.visitor.TypeReferenceScanner";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.Exception";
	"spoon.support.reflect.declaration.CtElementImpl" -> "java.lang.Throwable";
	"spoon.support.reflect.declaration.CtElementImpl" -> "org.apache.log4j.Category";
	"spoon.support.reflect.declaration.CtElementImpl" -> "spoon.reflect.visitor.ModelConsistencyChecker";
	"org.eclipse.jdt.internal.compiler.ast.CharLiteral" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.CompoundAssignment" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.FloatLiteral" [color=grey];
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.util.List";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.lang.Object";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "javax.swing.table.AbstractTableModel";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.util.ArrayList";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.lang.Class";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.lang.reflect.Field";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.lang.String";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.lang.IllegalArgumentException";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "org.apache.log4j.Logger";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.lang.Throwable";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "org.apache.log4j.Category";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.lang.IllegalAccessException";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.lang.reflect.Array";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.lang.Override";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.lang.reflect.AccessibleObject";
	"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" -> "java.lang.reflect.Modifier";
	"spoon.Launcher" -> "spoon.reflect.factory.Factory";
	"spoon.Launcher" -> "java.lang.reflect.Array";
	"spoon.Launcher" -> "java.util.ArrayList";
	"spoon.Launcher" -> "java.util.List";
	"spoon.Launcher" -> "com.martiansoftware.jsap.JSAP";
	"spoon.Launcher" -> "org.apache.log4j.Logger";
	"spoon.Launcher" -> "java.lang.Object";
	"spoon.Launcher" -> "java.lang.String";
	"spoon.Launcher" -> "com.martiansoftware.jsap.Switch";
	"spoon.Launcher" -> "com.martiansoftware.jsap.Parameter";
	"spoon.Launcher" -> "com.martiansoftware.jsap.FlaggedOption";
	"spoon.Launcher" -> "com.martiansoftware.jsap.stringparsers.IntegerStringParser";
	"spoon.Launcher" -> "com.martiansoftware.jsap.stringparsers.StringStringParser";
	"spoon.Launcher" -> "com.martiansoftware.jsap.stringparsers.FileStringParser";
	"spoon.Launcher" -> "spoon.OutputType";
	"spoon.Launcher" -> "com.martiansoftware.jsap.JSAPException";
	"spoon.Launcher" -> "com.martiansoftware.jsap.JSAPResult";
	"spoon.Launcher" -> "java.lang.Exception";
	"spoon.Launcher" -> "java.lang.IllegalStateException";
	"spoon.Launcher" -> "java.util.Iterator";
	"spoon.Launcher" -> "java.io.PrintStream";
	"spoon.Launcher" -> "java.lang.System";
	"spoon.Launcher" -> "java.util.ResourceBundle";
	"spoon.Launcher" -> "spoon.support.StandardEnvironment";
	"spoon.Launcher" -> "java.io.Serializable";
	"spoon.Launcher" -> "spoon.compiler.Environment";
	"spoon.Launcher" -> "spoon.compiler.SpoonCompiler";
	"spoon.Launcher" -> "spoon.processing.FactoryAccessor";
	"spoon.Launcher" -> "spoon.support.compiler.jdt.JDTBasedSpoonCompiler";
	"spoon.Launcher" -> "spoon.support.DefaultCoreFactory";
	"spoon.Launcher" -> "spoon.reflect.factory.CoreFactory";
	"spoon.Launcher" -> "spoon.reflect.factory.FactoryImpl";
	"spoon.Launcher" -> "spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter";
	"spoon.Launcher" -> "spoon.reflect.visitor.PrettyPrinter";
	"spoon.Launcher" -> "spoon.reflect.visitor.DefaultJavaPrettyPrinter";
	"spoon.Launcher" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.Launcher" -> "java.io.File";
	"spoon.Launcher" -> "spoon.support.JavaOutputProcessor";
	"spoon.Launcher" -> "spoon.processing.AbstractProcessor";
	"spoon.Launcher" -> "spoon.processing.Processor";
	"spoon.Launcher" -> "spoon.processing.FileGenerator";
	"spoon.Launcher" -> "spoon.compiler.SpoonResource";
	"spoon.Launcher" -> "spoon.compiler.SpoonFolder";
	"spoon.Launcher" -> "spoon.support.compiler.ZipFolder";
	"spoon.Launcher" -> "java.io.IOException";
	"spoon.Launcher" -> "spoon.processing.Severity";
	"spoon.Launcher" -> "java.lang.Throwable";
	"spoon.Launcher" -> "org.apache.log4j.Category";
	"spoon.Launcher" -> "spoon.compiler.SpoonFile";
	"spoon.Launcher" -> "org.xml.sax.helpers.XMLReaderFactory";
	"spoon.Launcher" -> "org.xml.sax.XMLReader";
	"spoon.Launcher" -> "spoon.support.processing.SpoonletXmlHandler";
	"spoon.Launcher" -> "org.xml.sax.helpers.DefaultHandler";
	"spoon.Launcher" -> "java.io.InputStream";
	"spoon.Launcher" -> "org.xml.sax.InputSource";
	"spoon.Launcher" -> "org.xml.sax.SAXException";
	"spoon.Launcher" -> "spoon.compiler.SpoonResourceHelper";
	"spoon.Launcher" -> "java.io.FileNotFoundException";
	"spoon.Launcher" -> "java.util.Arrays";
	"spoon.Launcher" -> "spoon.support.gui.SpoonModelTree";
	"spoon.Launcher" -> "javax.swing.JFrame";
	"spoon.Launcher" -> "java.awt.event.KeyListener";
	"spoon.Launcher" -> "java.awt.event.MouseListener";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "spoon.support.reflect.eval.VisitorPartialEvaluator";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "spoon.reflect.eval.PartialEvaluator";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "R";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.code.CtCodeElementImpl" -> "java.lang.Override";
	"org.eclipse.jdt.internal.compiler.impl.CompilerOptions" [color=grey];
	"spoon.support.compiler.SnippetCompilationHelper" -> "java.lang.Object";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.code.CtExpression";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.compiler.SnippetCompilationHelper" -> "java.lang.Comparable";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.template.TemplateParameter";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.factory.Factory";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.factory.ClassFactory";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.compiler.SnippetCompilationHelper" -> "java.lang.String";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.code.CtStatement";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtType";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.code.CtBlock";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.compiler.SnippetCompilationHelper" -> "java.lang.Iterable";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.code.CtReturn";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.compiler.SnippetCompilationHelper" -> "java.util.TreeSet";
	"spoon.support.compiler.SnippetCompilationHelper" -> "java.util.Set";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.factory.MethodFactory";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.reference.CtReference";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.compiler.SnippetCompilationHelper" -> "java.util.List";
	"spoon.support.compiler.SnippetCompilationHelper" -> "java.io.Serializable";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.visitor.Filter";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.visitor.Query";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.compiler.SnippetCompilationHelper" -> "java.lang.SuppressWarnings";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.support.compiler.SnippetCompilationError";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.SpoonException";
	"spoon.support.compiler.SnippetCompilationHelper" -> "java.lang.RuntimeException";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.support.compiler.jdt.JDTSnippetCompiler";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.support.compiler.jdt.JDTBasedSpoonCompiler";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.compiler.SpoonCompiler";
	"spoon.support.compiler.SnippetCompilationHelper" -> "java.lang.Exception";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.compiler.ModelBuildingException";
	"spoon.support.compiler.SnippetCompilationHelper" -> "spoon.reflect.declaration.ModifierKind";
	"java.awt.event.MouseListener" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement" [color=grey];
	"spoon.support.processing.XmlProcessorProperties$Loader" -> "java.lang.String";
	"spoon.support.processing.XmlProcessorProperties$Loader" -> "java.lang.Object";
	"spoon.support.processing.XmlProcessorProperties$Loader" -> "org.xml.sax.helpers.DefaultHandler";
	"spoon.support.processing.XmlProcessorProperties$Loader" -> "java.lang.reflect.Array";
	"spoon.support.processing.XmlProcessorProperties$Loader" -> "java.util.Collection";
	"spoon.support.processing.XmlProcessorProperties$Loader" -> "java.util.ArrayList";
	"spoon.support.processing.XmlProcessorProperties$Loader" -> "java.lang.SuppressWarnings";
	"spoon.support.processing.XmlProcessorProperties$Loader" -> "java.lang.Override";
	"spoon.support.processing.XmlProcessorProperties$Loader" -> "org.xml.sax.SAXException";
	"spoon.support.processing.XmlProcessorProperties$Loader" -> "java.util.Map";
	"spoon.support.processing.XmlProcessorProperties$Loader" -> "org.xml.sax.Attributes";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.support.reflect.code.CtTargetedAccessImpl";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.support.reflect.code.CtVariableAccessImpl";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.reflect.code.CtFieldAccessImpl" -> "spoon.reflect.code.CtFieldAccess";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.support.reflect.reference.CtVariableReferenceImpl";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.support.reflect.reference.CtReferenceImpl";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.io.Serializable";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.lang.String";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.lang.reflect.Member";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.lang.Override";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.lang.reflect.AnnotatedElement";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.lang.Class";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.lang.reflect.Method";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.lang.reflect.Field";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.lang.Exception";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "org.apache.log4j.Logger";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.lang.Throwable";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "org.apache.log4j.Category";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.declaration.CtField";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.util.Set";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.support.util.RtHelper";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.reference.CtFieldReferenceImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.compiler.FileSystemFolder" -> "java.io.File";
	"spoon.support.compiler.FileSystemFolder" -> "java.util.List";
	"spoon.support.compiler.FileSystemFolder" -> "java.lang.Object";
	"spoon.support.compiler.FileSystemFolder" -> "java.lang.String";
	"spoon.support.compiler.FileSystemFolder" -> "spoon.SpoonException";
	"spoon.support.compiler.FileSystemFolder" -> "java.lang.RuntimeException";
	"spoon.support.compiler.FileSystemFolder" -> "spoon.compiler.SpoonFolder";
	"spoon.support.compiler.FileSystemFolder" -> "spoon.compiler.SpoonResource";
	"spoon.support.compiler.FileSystemFolder" -> "java.lang.Override";
	"spoon.support.compiler.FileSystemFolder" -> "java.lang.Exception";
	"spoon.support.compiler.FileSystemFolder" -> "org.apache.log4j.Logger";
	"spoon.support.compiler.FileSystemFolder" -> "java.lang.Throwable";
	"spoon.support.compiler.FileSystemFolder" -> "org.apache.log4j.Category";
	"spoon.support.compiler.FileSystemFolder" -> "java.util.ArrayList";
	"spoon.support.compiler.FileSystemFolder" -> "spoon.compiler.SpoonFile";
	"spoon.support.compiler.FileSystemFolder" -> "java.lang.reflect.Array";
	"spoon.support.compiler.FileSystemFolder" -> "spoon.compiler.SpoonResourceHelper";
	"spoon.support.compiler.FileSystemFolder" -> "spoon.support.compiler.FileSystemFile";
	"spoon.support.compiler.FileSystemFolder" -> "java.io.FileNotFoundException";
	"org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference" [color=grey];
	"spoon.reflect.code.CtNewClass" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.code.CtNewClass" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.code.CtNewClass" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtNewClass" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtNewClass" -> "java.lang.Comparable";
	"spoon.reflect.code.CtNewClass" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtNewClass" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.code.CtNewClass" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.code.CtNewClass" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.code.CtNewClass" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.code.CtNewClass" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.declaration.CtExecutable" -> "java.lang.String";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.declaration.CtExecutable" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.declaration.CtExecutable" -> "java.lang.Iterable";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.template.TemplateParameter";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.declaration.CtParameter";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.declaration.CtExecutable" -> "java.util.List";
	"spoon.reflect.declaration.CtExecutable" -> "java.util.Set";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.declaration.CtExecutable" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.declaration.CtType" -> "spoon.reflect.declaration.CtMethod";
	"spoon.reflect.declaration.CtType" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.declaration.CtType" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.declaration.CtType" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.declaration.CtType" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtType" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtType" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.declaration.CtType" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.declaration.CtType" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.declaration.CtType" -> "java.lang.String";
	"spoon.reflect.declaration.CtType" -> "java.lang.reflect.Array";
	"spoon.reflect.declaration.CtType" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.declaration.CtType" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.declaration.CtType" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.declaration.CtType" -> "java.util.List";
	"spoon.reflect.declaration.CtType" -> "java.util.Set";
	"spoon.reflect.declaration.CtCodeSnippet" -> "java.lang.String";
	"spoon.Reference" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.TrueLiteral" [color=grey];
	"javax.xml.parsers.DocumentBuilder" [color=grey];
	"spoon.reflect.declaration.CtParameter" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.declaration.CtParameter" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.declaration.CtParameter" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.declaration.CtParameter" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtParameter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtParameter" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.declaration.CtParameter" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.declaration.CtParameter" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.declaration.CtParameter" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.reflect.declaration.CtParameter" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.declaration.CtParameter" -> "spoon.reflect.reference.CtReference";
	"java.net.URLClassLoader" [color=grey];
	"spoon.reflect.code.CtFieldAccess" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.code.CtFieldAccess" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.code.CtFieldAccess" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.code.CtFieldAccess" -> "java.lang.Comparable";
	"spoon.reflect.code.CtFieldAccess" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtElement" -> "java.lang.Class";
	"spoon.reflect.declaration.CtElement" -> "A";
	"spoon.reflect.declaration.CtElement" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.declaration.CtElement" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.declaration.CtElement" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.declaration.CtElement" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtElement" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtElement" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.reflect.declaration.CtElement" -> "java.util.List";
	"spoon.reflect.declaration.CtElement" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.declaration.CtElement" -> "spoon.reflect.declaration.ParentNotInitializedException";
	"spoon.reflect.declaration.CtElement" -> "P";
	"spoon.reflect.declaration.CtElement" -> "spoon.SpoonException";
	"spoon.reflect.declaration.CtElement" -> "java.lang.RuntimeException";
	"spoon.reflect.declaration.CtElement" -> "spoon.reflect.visitor.ReferenceFilter";
	"spoon.reflect.declaration.CtElement" -> "java.lang.String";
	"spoon.reflect.declaration.CtElement" -> "java.util.Set";
	"spoon.reflect.declaration.CtElement" -> "spoon.reflect.cu.SourcePosition";
	"spoon.reflect.declaration.CtElement" -> "spoon.reflect.visitor.CtVisitor";
	"java.lang.ClassLoader" [color=grey];
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "spoon.compiler.Environment";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "java.util.Stack";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "spoon.reflect.visitor.CtScanner";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "java.io.PrintStream";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "java.lang.String";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "java.lang.Comparable";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "java.lang.Object";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "java.lang.Class";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "spoon.reflect.cu.SourcePosition";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "java.util.Vector";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "spoon.processing.Severity";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.visitor.ModelConsistencyChecker" -> "java.lang.Override";
	"com.martiansoftware.jsap.JSAP" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.TypeBinding" [color=grey];
	"org.apache.log4j.Category" [color=grey];
	"spoon.support.reflect.declaration.CtPackageImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "T";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.reflect.factory.PackageFactory";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "java.lang.Override";
	"spoon.support.reflect.declaration.CtPackageImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.code.CtIf" -> "S";
	"spoon.reflect.code.CtIf" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtIf" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtIf" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtIf" -> "java.lang.Comparable";
	"spoon.reflect.code.CtIf" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtIf" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtIf" -> "spoon.template.TemplateParameter";
	"spoon.reflect.code.CtIf" -> "spoon.reflect.code.CtStatement";
	"org.eclipse.jdt.internal.compiler.ast.SingleTypeReference" [color=grey];
	"org.eclipse.jdt.core.compiler.IProblem" [color=grey];
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.support.compiler.SnippetCompilationHelper";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.support.compiler.SnippetCompilationError";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "E";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.SpoonException";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "java.lang.RuntimeException";
	"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.ClassFactory" -> "java.lang.String";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.ClassFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.ClassFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.factory.PackageFactory";
	"spoon.reflect.factory.ClassFactory" -> "java.io.Serializable";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.factory.ClassFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.ClassFactory" -> "java.util.Set";
	"spoon.reflect.factory.ClassFactory" -> "java.lang.Class";
	"spoon.reflect.factory.ClassFactory" -> "java.lang.Exception";
	"spoon.reflect.factory.ClassFactory" -> "java.lang.Override";
	"spoon.reflect.factory.ClassFactory" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.reflect.code.BinaryOperatorKind";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.support.reflect.code.CtBinaryOperatorImpl" -> "spoon.reflect.visitor.CtVisitor";
	"org.xml.sax.helpers.DefaultHandler" [color=grey];
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "java.util.Stack";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "java.util.ArrayList";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "java.util.List";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "java.lang.Object";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "java.lang.Comparable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "java.util.Vector";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "org.eclipse.jdt.internal.compiler.ast.ASTNode";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.factory.Factory";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.factory.CompilationUnitFactory";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "java.lang.reflect.Array";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "java.lang.String";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.cu.SourcePosition";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.support.compiler.jdt.JDTTreeBuilder$ASTPair";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.code.CtBlock";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.code.CtStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "java.lang.Iterable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.template.TemplateParameter";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "org.eclipse.jdt.internal.compiler.ast.MethodDeclaration";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.code.CtExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.reference.CtReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "org.eclipse.jdt.internal.compiler.ast.Expression";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "org.eclipse.jdt.internal.compiler.lookup.TypeBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "java.lang.SuppressWarnings";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "java.lang.RuntimeException";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.support.compiler.jdt.ParentExiter";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.visitor.CtInheritanceScanner";
	"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" -> "spoon.reflect.visitor.CtVisitor";
	"org.eclipse.jdt.internal.compiler.lookup.FieldBinding" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.IntLiteral" [color=grey];
	"spoon.support.template.Parameters" -> "java.lang.String";
	"spoon.support.template.Parameters" -> "java.util.HashMap";
	"spoon.support.template.Parameters" -> "java.util.Map";
	"spoon.support.template.Parameters" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.template.Parameters" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.template.Parameters" -> "spoon.reflect.reference.CtReference";
	"spoon.support.template.Parameters" -> "java.lang.Comparable";
	"spoon.support.template.Parameters" -> "spoon.processing.FactoryAccessor";
	"spoon.support.template.Parameters" -> "java.lang.Object";
	"spoon.support.template.Parameters" -> "java.lang.Class";
	"spoon.support.template.Parameters" -> "java.lang.Number";
	"spoon.support.template.Parameters" -> "spoon.template.TemplateParameter";
	"spoon.support.template.Parameters" -> "java.lang.SuppressWarnings";
	"spoon.support.template.Parameters" -> "java.lang.reflect.Field";
	"spoon.support.template.Parameters" -> "spoon.template.Parameter";
	"spoon.support.template.Parameters" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.template.Parameters" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.template.Parameters" -> "spoon.reflect.declaration.CtField";
	"spoon.support.template.Parameters" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.template.Parameters" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.template.Parameters" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.template.Parameters" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.template.Parameters" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.template.Parameters" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.support.template.Parameters" -> "spoon.reflect.factory.Factory";
	"spoon.support.template.Parameters" -> "java.lang.RuntimeException";
	"spoon.support.template.Parameters" -> "spoon.reflect.code.CtExpression";
	"spoon.support.template.Parameters" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.template.Parameters" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.support.template.Parameters" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.template.Parameters" -> "spoon.reflect.code.CtLiteral";
	"spoon.support.template.Parameters" -> "java.lang.Integer";
	"spoon.support.template.Parameters" -> "spoon.template.Template";
	"spoon.support.template.Parameters" -> "spoon.support.util.RtHelper";
	"spoon.support.template.Parameters" -> "java.lang.reflect.Array";
	"spoon.support.template.Parameters" -> "java.lang.reflect.Modifier";
	"spoon.support.template.Parameters" -> "java.lang.reflect.AccessibleObject";
	"spoon.support.template.Parameters" -> "java.lang.Exception";
	"spoon.support.template.Parameters" -> "spoon.support.template.UndefinedParameterException";
	"spoon.support.template.Parameters" -> "spoon.SpoonException";
	"spoon.support.template.Parameters" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.template.Parameters" -> "spoon.reflect.code.CtStatement";
	"spoon.support.template.Parameters" -> "spoon.reflect.declaration.CtType";
	"spoon.support.template.Parameters" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.template.Parameters" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.template.Parameters" -> "java.util.ArrayList";
	"spoon.support.template.Parameters" -> "java.util.Collection";
	"spoon.support.template.Parameters" -> "org.apache.log4j.Logger";
	"spoon.support.template.Parameters" -> "java.lang.Throwable";
	"spoon.support.template.Parameters" -> "org.apache.log4j.Category";
	"spoon.support.template.Parameters" -> "java.util.List";
	"spoon.support.template.Parameters" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.template.Parameters" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.code.CtSwitch" -> "spoon.reflect.code.CtCase";
	"spoon.reflect.code.CtSwitch" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.code.CtSwitch" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtSwitch" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtSwitch" -> "java.lang.Comparable";
	"spoon.reflect.code.CtSwitch" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtSwitch" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.code.CtSwitch" -> "java.lang.Iterable";
	"spoon.reflect.code.CtSwitch" -> "java.util.List";
	"spoon.reflect.code.CtSwitch" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtSwitch" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtSwitch" -> "spoon.template.TemplateParameter";
	"org.eclipse.jdt.internal.compiler.parser.Parser" [color=grey];
	"spoon.template.TypedBlockTemplateParameter" -> "java.lang.Object";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.template.TemplateParameter";
	"spoon.template.TypedBlockTemplateParameter" -> "R";
	"spoon.template.TypedBlockTemplateParameter" -> "java.lang.Throwable";
	"spoon.template.TypedBlockTemplateParameter" -> "java.lang.String";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.declaration.CtElement";
	"spoon.template.TypedBlockTemplateParameter" -> "java.lang.Comparable";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.processing.FactoryAccessor";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.declaration.CtClass";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.code.CtStatement";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.code.CtCodeElement";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.declaration.CtType";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.factory.Factory";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.factory.ClassFactory";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.factory.TypeFactory";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.factory.SubFactory";
	"spoon.template.TypedBlockTemplateParameter" -> "java.lang.Class";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.declaration.CtMethod";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.template.Template";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.code.CtBlock";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.code.CtStatementList";
	"spoon.template.TypedBlockTemplateParameter" -> "java.lang.Iterable";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.template.Substitution";
	"spoon.template.TypedBlockTemplateParameter" -> "spoon.reflect.factory.CoreFactory";
	"spoon.template.TypedBlockTemplateParameter" -> "java.lang.SuppressWarnings";
	"NestedTypeScanner" [color=grey];
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.support.reflect.code.CtTargetedAccessImpl";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.support.reflect.code.CtVariableAccessImpl";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.reflect.code.CtSuperAccessImpl" -> "spoon.reflect.code.CtSuperAccess";
	"spoon.support.reflect.eval.SymbolicWrappedException" -> "spoon.reflect.eval.SymbolicInstance";
	"spoon.support.reflect.eval.SymbolicWrappedException" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.eval.SymbolicWrappedException" -> "java.lang.Comparable";
	"spoon.support.reflect.eval.SymbolicWrappedException" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.eval.SymbolicWrappedException" -> "spoon.reflect.eval.SymbolicEvaluationStack";
	"spoon.support.reflect.eval.SymbolicWrappedException" -> "spoon.SpoonException";
	"spoon.support.reflect.eval.SymbolicWrappedException" -> "java.lang.RuntimeException";
	"spoon.reflect.declaration.CtGenericElement" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.declaration.CtGenericElement" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.declaration.CtGenericElement" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.declaration.CtGenericElement" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtGenericElement" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtGenericElement" -> "java.util.List";
	"spoon.reflect.reference.CtAnnonTypeParameterReference" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.reference.CtAnnonTypeParameterReference" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.reference.CtAnnonTypeParameterReference" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.reference.CtAnnonTypeParameterReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtAnnonTypeParameterReference" -> "spoon.processing.FactoryAccessor";
	"org.eclipse.jdt.internal.compiler.ast.CastExpression" [color=grey];
	"org.xml.sax.SAXParseException" [color=grey];
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.InterfaceFactory" -> "java.lang.String";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.declaration.CtInterface";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.InterfaceFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.factory.PackageFactory";
	"spoon.reflect.factory.InterfaceFactory" -> "java.io.Serializable";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.factory.InterfaceFactory" -> "java.lang.SuppressWarnings";
	"spoon.reflect.factory.InterfaceFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.InterfaceFactory" -> "java.util.Set";
	"spoon.reflect.factory.InterfaceFactory" -> "java.lang.Class";
	"spoon.reflect.factory.InterfaceFactory" -> "java.lang.Exception";
	"spoon.reflect.factory.InterfaceFactory" -> "java.lang.Override";
	"org.eclipse.jdt.internal.compiler.lookup.MethodScope" [color=grey];
	"spoon.reflect.cu.SourcePosition" -> "java.io.File";
	"spoon.reflect.cu.SourcePosition" -> "java.lang.String";
	"spoon.reflect.cu.SourcePosition" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.reflect.cu.SourcePosition" -> "spoon.processing.FactoryAccessor";
	"java.lang.Float" [color=grey];
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "java.lang.Object";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "java.lang.reflect.InvocationHandler";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "java.lang.reflect.Method";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "java.lang.reflect.Array";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.support.reflect.declaration.CtAnnotationImpl";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "java.lang.Class";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.reflect.code.CtLiteral";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" -> "java.lang.Throwable";
	"java.awt.DisplayMode" [color=grey];
	"spoon.support.visitor.ProcessingVisitor" -> "spoon.reflect.factory.Factory";
	"spoon.support.visitor.ProcessingVisitor" -> "spoon.processing.Processor";
	"spoon.support.visitor.ProcessingVisitor" -> "spoon.processing.FactoryAccessor";
	"spoon.support.visitor.ProcessingVisitor" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.visitor.ProcessingVisitor" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.visitor.ProcessingVisitor" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.visitor.ProcessingVisitor" -> "java.lang.Comparable";
	"spoon.support.visitor.ProcessingVisitor" -> "spoon.compiler.Environment";
	"spoon.support.visitor.ProcessingVisitor" -> "java.util.Set";
	"spoon.support.visitor.ProcessingVisitor" -> "java.lang.Object";
	"spoon.support.visitor.ProcessingVisitor" -> "java.lang.Class";
	"spoon.support.visitor.ProcessingVisitor" -> "java.util.Collection";
	"spoon.support.visitor.ProcessingVisitor" -> "java.util.ArrayList";
	"spoon.support.visitor.ProcessingVisitor" -> "java.lang.Override";
	"spoon.support.visitor.ProcessingVisitor" -> "java.lang.String";
	"spoon.support.visitor.ProcessingVisitor" -> "spoon.processing.TraversalStrategy";
	"spoon.support.visitor.ProcessingVisitor" -> "java.lang.SuppressWarnings";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.lang.String";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.lang.reflect.Array";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "javax.swing.JPanel";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "javax.swing.JScrollPane";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "javax.swing.JTable";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.lang.Object";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "javax.swing.JFrame";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.awt.BorderLayout";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.awt.Container";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "javax.swing.table.AbstractTableModel";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.awt.Window";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.awt.Component";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.awt.GraphicsConfiguration";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.awt.GraphicsDevice";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.awt.DisplayMode";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.lang.Class";
	"spoon.support.gui.SpoonObjectFieldsTable" -> "java.awt.Frame";
	"spoon.processing.ProblemFixer" -> "java.lang.String";
	"spoon.processing.ProblemFixer" -> "T";
	"spoon.processing.ProblemFixer" -> "spoon.reflect.Changes";
	"java.util.Locale" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference" [color=grey];
	"java.lang.reflect.AnnotatedElement" [color=grey];
	"org.eclipse.jdt.core.compiler.CompilationProgress" [color=grey];
	"spoon.support.reflect.code.CtContinueImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtContinueImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtContinueImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtContinueImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtContinueImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtContinueImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtContinueImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtContinueImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtContinueImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtContinueImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtContinueImpl" -> "spoon.reflect.code.CtContinue";
	"spoon.support.reflect.code.CtContinueImpl" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.reflect.code.CtContinueImpl" -> "spoon.reflect.visitor.CtVisitor";
	"java.util.ResourceBundle" [color=grey];
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.support.reflect.declaration.CtExecutableImpl";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtMethodImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.code.CtTry" -> "spoon.reflect.code.CtCatch";
	"spoon.reflect.code.CtTry" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtTry" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtTry" -> "java.lang.Comparable";
	"spoon.reflect.code.CtTry" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtTry" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.reflect.code.CtTry" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.code.CtTry" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.code.CtTry" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.code.CtTry" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.code.CtTry" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtTry" -> "java.util.List";
	"spoon.reflect.code.CtTry" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.code.CtTry" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.code.CtTry" -> "java.lang.Iterable";
	"spoon.reflect.code.CtTry" -> "spoon.template.TemplateParameter";
	"spoon.reflect.code.CtSynchronized" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.code.CtSynchronized" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.code.CtSynchronized" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtSynchronized" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtSynchronized" -> "java.lang.Comparable";
	"spoon.reflect.code.CtSynchronized" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtSynchronized" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.code.CtSynchronized" -> "java.lang.Iterable";
	"spoon.reflect.code.CtSynchronized" -> "spoon.template.TemplateParameter";
	"spoon.reflect.code.CtSynchronized" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtSynchronized" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.CoreFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.CoreFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.factory.CoreFactory" -> "java.lang.Iterable";
	"spoon.reflect.factory.CoreFactory" -> "spoon.template.TemplateParameter";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtReturn";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtCase";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtSwitch";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtEnum";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtAssignment";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.reflect.factory.CoreFactory" -> "T";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtAssert";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtConditional";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtFieldAccess";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtInvocation";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtLiteral";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtNewArray";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtNewClass";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtSuperAccess";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtThisAccess";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtField";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtInterface";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtMethod";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtParameter";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtBreak";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtCatch";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtContinue";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtDo";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtLoop";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtFor";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtForEach";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtIf";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtSynchronized";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtThrow";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtTry";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.code.CtWhile";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.reflect.factory.CoreFactory" -> "java.lang.reflect.Array";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.cu.SourcePosition";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.reflect.factory.CoreFactory" -> "spoon.reflect.reference.CtTypeParameterReference";
	"java.util.LinkedList" [color=grey];
	"org.eclipse.jdt.internal.compiler.CompilationResult" [color=grey];
	"java.util.Map$Entry" [color=grey];
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext" -> "java.util.Stack";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext" -> "java.lang.Comparable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext" -> "java.lang.Object";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext" -> "java.lang.String";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext" -> "java.lang.Override";
	"org.eclipse.jdt.internal.compiler.lookup.PackageBinding" [color=grey];
	"java.util.List" [color=grey];
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.support.template.SubstitutionVisitor";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.visitor.CtInheritanceScanner";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.lang.Comparable";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.processing.FactoryAccessor";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.util.List";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.util.ArrayList";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.lang.String";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.util.Collection";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.template.Template";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.support.template.Parameters";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.lang.Object";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.factory.Factory";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.lang.Override";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtExpression";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.template.TemplateParameter";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.reference.CtReference";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.lang.Class";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.lang.RuntimeException";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtLiteral";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.lang.SuppressWarnings";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtStatement";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtType";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.util.Set";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.util.TreeSet";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.template.Local";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtField";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtInvocation";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtFieldAccess";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.lang.Integer";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtReturn";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtBlock";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.lang.Iterable";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.support.template.SkipException";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.SpoonException";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.lang.reflect.Array";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.factory.CodeFactory";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.lang.Enum";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.factory.FieldFactory";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtNewArray";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.factory.PackageFactory";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "java.io.Serializable";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtForEach";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtLoop";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.visitor.filter.VariableAccessFilter";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.visitor.Filter";
	"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" -> "spoon.reflect.visitor.Query";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtTryImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtTryImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtTryImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.code.CtBlock";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.code.CtTryImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.code.CtTry";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.code.CtCatch";
	"spoon.support.reflect.code.CtTryImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.code.CtTryImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtTryImpl" -> "java.lang.Void";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.code.CtTryImpl" -> "spoon.reflect.visitor.CtVisitor";
	"org.eclipse.jdt.internal.compiler.ast.Javadoc" [color=grey];
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.support.reflect.reference.CtVariableReferenceImpl";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.support.reflect.reference.CtReferenceImpl";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "java.io.Serializable";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "java.lang.Override";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "java.lang.reflect.AnnotatedElement";
	"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" -> "spoon.reflect.visitor.CtVisitor";
	"org.eclipse.jdt.internal.compiler.lookup.MethodBinding" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.SuperReference" [color=grey];
	"spoon.template.TemplateParameter" -> "T";
	"spoon.template.TemplateParameter" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.template.TemplateParameter" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.template.TemplateParameter" -> "spoon.reflect.declaration.CtElement";
	"spoon.template.TemplateParameter" -> "java.lang.Comparable";
	"spoon.template.TemplateParameter" -> "spoon.processing.FactoryAccessor";
	"spoon.template.TemplateParameter" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.template.TemplateParameter" -> "spoon.reflect.code.CtCodeElement";
	"java.lang.reflect.InvocationHandler" [color=grey];
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtThrowImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtThrowImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.code.CtThrow";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.reflect.code.CtThrowImpl" -> "java.lang.Void";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.code.CtThrowImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.Parent" -> "java.lang.annotation.ElementType";
	"spoon.reflect.visitor.Parent" -> "java.lang.reflect.Array";
	"spoon.reflect.eval.PartialEvaluator" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.eval.PartialEvaluator" -> "java.lang.Comparable";
	"spoon.reflect.eval.PartialEvaluator" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.eval.PartialEvaluator" -> "R";
	"java.util.Comparator" [color=grey];
	"spoon.support.reflect.declaration.CtElementImpl$" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtElementImpl$" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtElementImpl$" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtElementImpl$" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtElementImpl$" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtElementImpl$" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.reflect.declaration.CtElementImpl$" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.declaration.CtElementImpl$" -> "spoon.reflect.cu.SourcePosition";
	"spoon.support.reflect.declaration.CtElementImpl$" -> "java.lang.Override";
	"java.awt.event.MouseEvent" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.LocalDeclaration" [color=grey];
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtForEachImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.support.reflect.code.CtLoopImpl";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtForEachImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.code.CtLoop";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.code.CtForEach";
	"spoon.support.reflect.code.CtForEachImpl" -> "spoon.reflect.visitor.CtVisitor";
	"javax.swing.JMenuItem" [color=grey];
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtLoopImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtLoopImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.reflect.code.CtLoop";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtLoopImpl" -> "java.lang.Void";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtLoopImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ASTVisitor";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.apache.log4j.Logger";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.support.compiler.jdt.ParentExiter";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.visitor.CtInheritanceScanner";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.factory.Factory";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.BlockScope";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.Comparable";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.TypeBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.reference.CtReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.NormalAnnotation";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.util.Stack";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.String";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.util.ArrayList";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.util.List";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.support.compiler.jdt.JDTTreeBuilder$ASTPair";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.visitor.filter.TypeFilter";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.visitor.Filter";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.visitor.Query";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.cu.SourcePosition";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.apache.log4j.Category";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.template.TemplateParameter";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.BinaryOperatorKind";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.Override";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.AllocationExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtNewClass";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.TypeReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.reflect.Array";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.MethodBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.Expression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.SuppressWarnings";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.ClassScope";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtField";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.Annotation";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.MethodScope";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.Argument";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.util.Set";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtNewArray";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ArrayInitializer";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ArrayReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtLiteral";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.AssertStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtAssert";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.Assignment";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtAssignment";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.BinaryExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.Block";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtBlock";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.Iterable";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.BreakStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtBreak";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.CaseStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtCase";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.CastExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.CharLiteral";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.impl.Constant";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtFieldAccess";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.CompoundAssignment";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ConditionalExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtConditional";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.Javadoc";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.Scope";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.Statement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ASTNode";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ContinueStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtContinue";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.DoStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtDo";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtLoop";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.DoubleLiteral";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.EqualExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtInvocation";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.RuntimeException";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.FalseLiteral";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.FieldDeclaration";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.FieldReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.FieldBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.FloatLiteral";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ForStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtFor";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ForeachStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtForEach";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.IfStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtIf";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.Initializer";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.IntLiteral";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.LabeledStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.LocalDeclaration";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.LongLiteral";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.MemberValuePair";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.MessageSend";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.Object";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.Class";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ThisReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.MethodDeclaration";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.Exception";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.NullLiteral";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.PostfixExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.UnaryOperatorKind";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.PrefixExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.TypeDeclaration";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.Binding";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.NameReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.factory.CompilationUnitFactory";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.VariableBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ReturnStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtReturn";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.SingleNameReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.SingleTypeReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.StringLiteral";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.SuperReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtSuperAccess";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.SwitchStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtSwitch";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtSynchronized";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtThisAccess";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.ThrowStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtThrow";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.TrueLiteral";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.TryStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtTry";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtCatch";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.UnionTypeReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.factory.PackageFactory";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.io.Serializable";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.PackageBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.UnaryExpression";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.WhileStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.code.CtWhile";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.StringBuffer";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.CompilationResult";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.env.ICompilationUnit";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.lang.StringIndexOutOfBoundsException";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.util.TreeSet";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtEnum";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtType";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "spoon.reflect.declaration.CtInterface";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.ast.TypeParameter";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder" -> "java.util.Vector";
	"java.util.Enumeration" [color=grey];
	"spoon.reflect.code.CtTargetedExpression" -> "E";
	"spoon.reflect.visitor.Root" -> "java.lang.annotation.ElementType";
	"spoon.reflect.visitor.Root" -> "java.lang.reflect.Array";
	"spoon.reflect.visitor.PrettyPrinter" -> "java.lang.String";
	"spoon.reflect.visitor.PrettyPrinter" -> "java.util.Map";
	"spoon.reflect.visitor.PrettyPrinter" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.reflect.visitor.PrettyPrinter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.PrettyPrinter" -> "java.util.List";
	"spoon.support.template.SkipException" -> "java.lang.Object";
	"spoon.support.template.SkipException" -> "java.lang.String";
	"spoon.support.template.SkipException" -> "spoon.SpoonException";
	"spoon.support.template.SkipException" -> "java.lang.RuntimeException";
	"spoon.support.compiler.jdt.CompilerClassLoader" -> "java.lang.reflect.Array";
	"spoon.support.compiler.jdt.CompilerClassLoader" -> "java.lang.ClassLoader";
	"spoon.support.compiler.jdt.CompilerClassLoader" -> "java.net.URLClassLoader";
	"spoon.reflect.eval.SymbolicHeap" -> "java.util.HashMap";
	"spoon.reflect.eval.SymbolicHeap" -> "java.util.Map";
	"spoon.reflect.eval.SymbolicHeap" -> "java.lang.Object";
	"spoon.reflect.eval.SymbolicHeap" -> "java.lang.String";
	"spoon.reflect.eval.SymbolicHeap" -> "java.util.Map$Entry";
	"spoon.reflect.eval.SymbolicHeap" -> "java.util.Set";
	"spoon.reflect.eval.SymbolicHeap" -> "spoon.reflect.eval.SymbolicInstance";
	"spoon.reflect.eval.SymbolicHeap" -> "java.lang.SuppressWarnings";
	"spoon.reflect.eval.SymbolicHeap" -> "spoon.reflect.eval.SymbolicEvaluator";
	"spoon.reflect.eval.SymbolicHeap" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.eval.SymbolicHeap" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.eval.SymbolicHeap" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.eval.SymbolicHeap" -> "java.lang.Comparable";
	"spoon.reflect.eval.SymbolicHeap" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.eval.SymbolicHeap" -> "java.lang.Override";
	"spoon.reflect.eval.SymbolicHeap" -> "java.io.PrintStream";
	"javax.swing.JPanel" [color=grey];
	"org.eclipse.jdt.internal.compiler.batch.FileSystem" [color=grey];
	"spoon.reflect.cu.CompilationUnit" -> "java.io.File";
	"spoon.reflect.cu.CompilationUnit" -> "java.lang.String";
	"spoon.reflect.cu.CompilationUnit" -> "java.util.List";
	"spoon.reflect.cu.CompilationUnit" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.cu.CompilationUnit" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.cu.CompilationUnit" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.cu.CompilationUnit" -> "java.lang.Comparable";
	"spoon.reflect.cu.CompilationUnit" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.cu.CompilationUnit" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.cu.CompilationUnit" -> "spoon.reflect.cu.SourceCodeFragment";
	"spoon.reflect.declaration.CtModifiable" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.reflect.declaration.CtModifiable" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.util.List";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.support.reflect.declaration.CtTypeImpl";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.support.reflect.declaration.CtSimpleTypeImpl";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.support.reflect.eval.VisitorPartialEvaluator";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.eval.PartialEvaluator";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.declaration.CtClassImpl" -> "R";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.lang.Override";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.lang.reflect.Array";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.declaration.CtClassImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.declaration.CtClassImpl" -> "java.lang.UnsupportedOperationException";
	"javax.swing.JOptionPane" [color=grey];
	"java.util.TreeSet" [color=grey];
	"java.util.Set" [color=grey];
	"spoon.reflect.declaration.CtEnum" -> "java.util.List";
	"java.util.zip.ZipEntry" [color=grey];
	"spoon.reflect.declaration.CtPackage" -> "java.lang.String";
	"spoon.reflect.declaration.CtPackage" -> "T";
	"spoon.reflect.declaration.CtPackage" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.declaration.CtPackage" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.declaration.CtPackage" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtPackage" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtPackage" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.declaration.CtPackage" -> "java.util.Set";
	"spoon.reflect.declaration.CtPackage" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.reflect.declaration.CtPackage" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.declaration.CtPackage" -> "spoon.reflect.declaration.CtSimpleType";
	"java.lang.SuppressWarnings" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.PostfixExpression" [color=grey];
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "spoon.support.reflect.reference.CtTypeReferenceImpl";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "spoon.support.reflect.reference.CtReferenceImpl";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "java.io.Serializable";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "java.lang.String";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "java.lang.Class";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "java.lang.reflect.Array";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "java.lang.Object";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "java.lang.Override";
	"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" -> "spoon.reflect.visitor.CtVisitor";
	"java.io.ByteArrayOutputStream" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.ArrayReference" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression" [color=grey];
	"java.io.FileOutputStream" [color=grey];
	"FileSet" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.MessageSend" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess" [color=grey];
	"org.w3c.dom.NodeList" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding" [color=grey];
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "java.util.Stack";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "java.lang.Object";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "spoon.reflect.eval.SymbolicStackFrame";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "java.util.Vector";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "java.lang.Override";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "java.lang.String";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "java.lang.Comparable";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "spoon.reflect.eval.SymbolicInstance";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "java.util.Map";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "java.lang.RuntimeException";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "java.io.PrintStream";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.eval.SymbolicEvaluationStack" -> "java.util.List";
	"org.eclipse.jdt.internal.compiler.ast.ReturnStatement" [color=grey];
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "spoon.support.compiler.jdt.JDTBasedSpoonCompiler";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "spoon.compiler.SpoonCompiler";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "org.eclipse.jdt.internal.compiler.batch.CompilationUnit";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "java.lang.reflect.Array";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "java.lang.String";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "spoon.reflect.factory.Factory";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "spoon.reflect.factory.CompilationUnitFactory";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "java.util.Map";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "java.io.InputStream";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "org.apache.commons.io.IOUtils";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "java.lang.Exception";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "org.apache.log4j.Logger";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "java.lang.Throwable";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "org.apache.log4j.Category";
	"spoon.support.compiler.jdt.CompilationUnitWrapper" -> "java.lang.Override";
	"DirectoryScanner" [color=grey];
	"spoon.support.compiler.jdt.ParentExiter" -> "java.lang.String";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.support.compiler.jdt.JDTTreeBuilder";
	"spoon.support.compiler.jdt.ParentExiter" -> "org.eclipse.jdt.internal.compiler.ASTVisitor";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.compiler.jdt.ParentExiter" -> "java.lang.Comparable";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.visitor.CtInheritanceScanner";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext";
	"spoon.support.compiler.jdt.ParentExiter" -> "java.util.Stack";
	"spoon.support.compiler.jdt.ParentExiter" -> "java.lang.Object";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtExpression";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.template.TemplateParameter";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.reference.CtReference";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.compiler.jdt.ParentExiter" -> "java.util.Map";
	"spoon.support.compiler.jdt.ParentExiter" -> "java.lang.Override";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtCase";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtStatement";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.compiler.jdt.ParentExiter" -> "java.lang.Iterable";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtSwitch";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtBlock";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtReturn";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtAssignment";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.compiler.jdt.ParentExiter" -> "java.util.Vector";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.support.compiler.jdt.ParentExiter" -> "E";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.compiler.jdt.ParentExiter" -> "java.util.Set";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtField";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtType";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtAssert";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.cu.SourcePosition";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtConditional";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtInvocation";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtNewArray";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtNewClass";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtLoop";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtCatch";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtDo";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtFor";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtForEach";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtIf";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.support.compiler.jdt.ParentExiter" -> "java.util.List";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtSynchronized";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtThrow";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtTry";
	"spoon.support.compiler.jdt.ParentExiter" -> "java.util.ArrayList";
	"spoon.support.compiler.jdt.ParentExiter" -> "spoon.reflect.code.CtWhile";
	"org.eclipse.jdt.core.compiler.CharOperation" [color=grey];
	"spoon.reflect.code.CtLocalVariable" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.reflect.code.CtLocalVariable" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.code.CtLocalVariable" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.code.CtLocalVariable" -> "java.lang.Comparable";
	"spoon.reflect.code.CtLocalVariable" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtBreak" -> "java.lang.String";
	"spoon.support.reflect.cu.ImportImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.cu.ImportImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.cu.ImportImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.cu.ImportImpl" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.reflect.cu.ImportImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.cu.ImportImpl" -> "java.lang.Object";
	"spoon.support.reflect.cu.ImportImpl" -> "spoon.reflect.cu.Import";
	"spoon.support.reflect.cu.ImportImpl" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.reflect.cu.ImportImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.cu.ImportImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.cu.ImportImpl" -> "java.lang.Override";
	"spoon.support.reflect.cu.ImportImpl" -> "java.lang.String";
	"spoon.reflect.code.CtCodeSnippetExpression" -> "spoon.support.compiler.SnippetCompilationError";
	"spoon.reflect.code.CtCodeSnippetExpression" -> "E";
	"spoon.reflect.code.CtCodeSnippetExpression" -> "spoon.SpoonException";
	"spoon.reflect.code.CtCodeSnippetExpression" -> "java.lang.RuntimeException";
	"java.lang.ClassNotFoundException" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.RawTypeBinding" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.ConditionalExpression" [color=grey];
	"org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.WhileStatement" [color=grey];
	"spoon.processing.AnnotationProcessor" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.processing.AnnotationProcessor" -> "spoon.reflect.declaration.CtElement";
	"spoon.processing.AnnotationProcessor" -> "java.lang.Comparable";
	"spoon.processing.AnnotationProcessor" -> "spoon.processing.FactoryAccessor";
	"spoon.processing.AnnotationProcessor" -> "java.util.Set";
	"spoon.processing.AnnotationProcessor" -> "A";
	"spoon.processing.AnnotationProcessor" -> "E";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.util.TreeMap";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.util.Map";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.util.TreeSet";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.util.Set";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.lang.Object";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.lang.String";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.MethodBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.apache.log4j.Logger";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.apache.log4j.Category";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.factory.Factory";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.reference.CtReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.lang.Comparable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.TypeBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.lang.reflect.Array";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.lang.SuppressWarnings";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.RawTypeBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.PackageBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.CaptureBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.WildcardBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.ArrayBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.ProblemReferenceBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.Binding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.lang.Class";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.lang.RuntimeException";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.VariableBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.FieldBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.ast.LocalDeclaration";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.ast.Argument";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.BlockScope";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.MethodScope";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.lookup.Scope";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.impl.ReferenceContext";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.support.compiler.jdt.JDTTreeBuilder";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "org.eclipse.jdt.internal.compiler.ASTVisitor";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.code.CtStatement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.util.ArrayList";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" -> "java.util.List";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.String";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.System";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.HashMap";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.Map";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.visitor.CtScanner";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.StringBuffer";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.compiler.Environment";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Object";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.visitor.PrettyPrinter";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Comparable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.Map$Entry";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.Set";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.support.reflect.cu.CtLineElementComparator";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.Comparator";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.support.util.SortedList";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.LinkedList";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.List";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtCase";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Iterable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.template.TemplateParameter";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtFieldAccess";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.SuppressWarnings";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtSwitch";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtReturn";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtEnum";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.Stack";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.ArrayList";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtField";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtAssignment";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.BinaryOperatorKind";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "E";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtAssert";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.ParentNotInitializedException";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.SpoonException";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.RuntimeException";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtNewClass";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtConditional";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtParameter";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Class";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.Vector";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtInterface";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtInvocation";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Exception";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "org.apache.log4j.Logger";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Throwable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "org.apache.log4j.Category";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtLiteral";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "T";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Long";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Float";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Character";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.reflect.Array";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtMethod";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.cu.SourcePosition";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Integer";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtNewArray";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtThisAccess";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Override";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.UnaryOperatorKind";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "byte";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.TreeMap";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.util.Collection";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.processing.Severity";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.lang.Enum";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "java.io.PrintStream";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtBreak";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtCatch";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtContinue";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtDo";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtLoop";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtFor";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtForEach";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtIf";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtSynchronized";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtThrow";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtTry";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter" -> "spoon.reflect.code.CtWhile";
	"spoon.support.compiler.VirtualFolder" -> "java.util.ArrayList";
	"spoon.support.compiler.VirtualFolder" -> "java.util.List";
	"spoon.support.compiler.VirtualFolder" -> "java.lang.Object";
	"spoon.support.compiler.VirtualFolder" -> "spoon.compiler.SpoonFolder";
	"spoon.support.compiler.VirtualFolder" -> "spoon.compiler.SpoonResource";
	"spoon.support.compiler.VirtualFolder" -> "spoon.compiler.SpoonFile";
	"spoon.support.compiler.VirtualFolder" -> "java.lang.String";
	"spoon.support.compiler.VirtualFolder" -> "java.io.File";
	"spoon.support.compiler.VirtualFolder" -> "java.lang.Override";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "spoon.support.compiler.jdt.JDTBasedSpoonCompiler";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "spoon.compiler.SpoonCompiler";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.util.HashSet";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.util.Set";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.io.PrintStream";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.io.PrintWriter";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.eclipse.jdt.internal.compiler.batch.Main";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.eclipse.jdt.internal.compiler.ICompilerRequestor";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.lang.Override";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.util.List";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.lang.System";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.eclipse.jdt.internal.compiler.env.INameEnvironment";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.eclipse.jdt.internal.compiler.batch.FileSystem";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.util.Map";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.eclipse.jdt.internal.compiler.impl.CompilerOptions";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "spoon.support.compiler.jdt.TreeBuilderRequestor";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.eclipse.jdt.internal.compiler.IProblemFactory";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "spoon.support.compiler.jdt.TreeBuilderCompiler";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.eclipse.jdt.internal.compiler.Compiler";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.lang.reflect.Array";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.lang.Exception";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.util.ArrayList";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.eclipse.jdt.internal.compiler.batch.CompilationUnit";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.lang.String";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "spoon.support.compiler.jdt.CompilationUnitWrapper";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "spoon.compiler.SpoonFile";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "spoon.compiler.SpoonResource";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.io.InputStream";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.apache.commons.io.IOUtils";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.apache.log4j.Logger";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "java.lang.Throwable";
	"spoon.support.compiler.jdt.JDTBatchCompiler" -> "org.apache.log4j.Category";
	"javax.xml.parsers.ParserConfigurationException" [color=grey];
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtBlockImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtBlockImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtBlockImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.code.CtBlock";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.code.CtBlockImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtBlockImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtBlockImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.code.CtBlockImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtBlockImpl" -> "T";
	"spoon.support.reflect.code.CtBlockImpl" -> "R";
	"spoon.support.reflect.code.CtBlockImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.code.CtBlockImpl" -> "java.util.Collections";
	"spoon.support.reflect.code.CtBlockImpl" -> "java.util.Iterator";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.factory.CodeFactory";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.visitor.Filter";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.visitor.Query";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.code.CtInvocation";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.code.CtBlockImpl" -> "spoon.reflect.reference.CtReference";
	"org.eclipse.jdt.internal.compiler.ast.LabeledStatement" [color=grey];
	"spoon.reflect.code.CtExpression" -> "java.util.List";
	"spoon.reflect.code.CtExpression" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.code.CtExpression" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.code.CtExpression" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.code.CtExpression" -> "java.lang.Comparable";
	"spoon.reflect.code.CtExpression" -> "spoon.processing.FactoryAccessor";
	"org.eclipse.jdt.internal.compiler.ast.ThisReference" [color=grey];
	"org.xml.sax.XMLReader" [color=grey];
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "java.util.List";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.code.CtAssignment";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "T";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.code.CtAssignmentImpl" -> "java.lang.Override";
	"java.lang.Deprecated" [color=grey];
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "java.util.TreeMap";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "java.util.Map";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.visitor.CtScanner";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "java.lang.Comparable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "java.lang.Override";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.declaration.CtEnum";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "java.lang.String";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "java.util.Set";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "java.util.List";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.declaration.CtInterface";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.template.TemplateParameter";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" -> "spoon.reflect.reference.CtArrayTypeReference";
	"org.xml.sax.helpers.XMLReaderFactory" [color=grey];
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "T";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtTargetedExpressionImpl" -> "spoon.reflect.code.CtTargetedExpression";
	"java.lang.ClassCastException" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.IfStatement" [color=grey];
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.FieldFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.FieldFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.FieldFactory" -> "java.util.Set";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.factory.FieldFactory" -> "java.lang.String";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.declaration.CtField";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.factory.FieldFactory" -> "java.util.List";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.factory.FieldFactory" -> "spoon.template.TemplateParameter";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.factory.FieldFactory" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.FieldFactory" -> "java.lang.reflect.Field";
	"spoon.reflect.factory.FieldFactory" -> "java.lang.Class";
	"spoon.reflect.factory.FieldFactory" -> "java.lang.SuppressWarnings";
	"org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration" [color=grey];
	"java.lang.StringIndexOutOfBoundsException" [color=grey];
	"spoon.SpoonTask$ProcessorType" -> "java.lang.String";
	"spoon.SpoonTask$ProcessorType" -> "java.lang.Object";
	"org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding" [color=grey];
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.support.reflect.reference.CtReferenceImpl";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "java.io.Serializable";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "java.lang.String";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "java.lang.Package";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "java.lang.Override";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "java.lang.reflect.AnnotatedElement";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.reflect.factory.PackageFactory";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.reference.CtPackageReferenceImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.code.CtStatement" -> "java.lang.String";
	"spoon.reflect.code.CtStatement" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtStatement" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtStatement" -> "java.lang.Comparable";
	"spoon.reflect.code.CtStatement" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtStatement" -> "spoon.reflect.declaration.ParentNotInitializedException";
	"spoon.reflect.code.CtStatement" -> "spoon.SpoonException";
	"spoon.reflect.code.CtStatement" -> "java.lang.RuntimeException";
	"spoon.reflect.code.CtStatement" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.code.CtStatement" -> "java.lang.Iterable";
	"org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment" [color=grey];
	"spoon.reflect.visitor.filter.NameFilter" -> "java.lang.String";
	"spoon.reflect.visitor.filter.NameFilter" -> "java.lang.Object";
	"spoon.reflect.visitor.filter.NameFilter" -> "java.lang.IllegalArgumentException";
	"spoon.reflect.visitor.filter.NameFilter" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.visitor.filter.NameFilter" -> "T";
	"spoon.reflect.visitor.filter.NameFilter" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.visitor.filter.NameFilter" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.filter.NameFilter" -> "java.lang.Comparable";
	"spoon.reflect.visitor.filter.NameFilter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.filter.NameFilter" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.visitor.filter.NameFilter" -> "java.lang.SuppressWarnings";
	"spoon.reflect.visitor.filter.NameFilter" -> "java.lang.Class";
	"com.martiansoftware.jsap.JSAPException" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.BreakStatement" [color=grey];
	"java.awt.event.ActionListener" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.LongLiteral" [color=grey];
	"spoon.support.reflect.declaration.CtUncomparableException" -> "spoon.SpoonException";
	"spoon.support.reflect.declaration.CtUncomparableException" -> "java.lang.RuntimeException";
	"spoon.support.reflect.declaration.CtUncomparableException" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtUncomparableException" -> "java.lang.Throwable";
	"org.eclipse.jdt.internal.compiler.lookup.VariableBinding" [color=grey];
	"spoon.template.TemplateException" -> "spoon.SpoonException";
	"spoon.template.TemplateException" -> "java.lang.RuntimeException";
	"spoon.template.TemplateException" -> "java.lang.String";
	"spoon.template.TemplateException" -> "java.lang.Throwable";
	"spoon.reflect.code.CtCodeSnippetStatement" -> "spoon.support.compiler.SnippetCompilationError";
	"spoon.reflect.code.CtCodeSnippetStatement" -> "S";
	"spoon.reflect.code.CtCodeSnippetStatement" -> "spoon.SpoonException";
	"spoon.reflect.code.CtCodeSnippetStatement" -> "java.lang.RuntimeException";
	"java.lang.Byte" [color=grey];
	"javax.swing.table.AbstractTableModel" [color=grey];
	"org.eclipse.jdt.internal.compiler.batch.CompilationUnit" [color=grey];
	"java.util.Map" [color=grey];
	"java.awt.Frame" [color=grey];
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.ExecutableFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.factory.ExecutableFactory" -> "java.lang.String";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtParameter";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.ExecutableFactory" -> "java.util.StringTokenizer";
	"spoon.reflect.factory.ExecutableFactory" -> "java.util.List";
	"spoon.reflect.factory.ExecutableFactory" -> "java.lang.reflect.Array";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtMethod";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.factory.ExecutableFactory" -> "java.util.ArrayList";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.factory.ExecutableFactory" -> "java.lang.Iterable";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.template.TemplateParameter";
	"spoon.reflect.factory.ExecutableFactory" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.reflect.eval.SymbolicInstance" -> "java.lang.String";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.eval.SymbolicInstance" -> "java.lang.Comparable";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.eval.SymbolicInstance" -> "java.util.TreeMap";
	"spoon.reflect.eval.SymbolicInstance" -> "java.util.Map";
	"spoon.reflect.eval.SymbolicInstance" -> "java.lang.Object";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.eval.SymbolicEvaluator";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.eval.SymbolicInstance" -> "java.lang.Enum";
	"spoon.reflect.eval.SymbolicInstance" -> "java.lang.Class";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.eval.SymbolicInstance" -> "java.util.Collection";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.declaration.CtField";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.template.TemplateParameter";
	"spoon.reflect.eval.SymbolicInstance" -> "java.util.List";
	"spoon.reflect.eval.SymbolicInstance" -> "java.lang.reflect.Method";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.support.util.RtHelper";
	"spoon.reflect.eval.SymbolicInstance" -> "java.lang.reflect.Array";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.factory.FieldFactory";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.eval.SymbolicInstance" -> "java.lang.Override";
	"spoon.reflect.eval.SymbolicInstance" -> "java.util.Set";
	"spoon.reflect.eval.SymbolicInstance" -> "spoon.reflect.eval.SymbolicHeap";
	"spoon.reflect.eval.SymbolicInstance" -> "java.lang.RuntimeException";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.factory.Factory";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.String";
	"spoon.support.processing.XmlProcessorProperties" -> "java.util.TreeMap";
	"spoon.support.processing.XmlProcessorProperties" -> "java.util.Map";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Object";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.processing.ProcessorProperties";
	"spoon.support.processing.XmlProcessorProperties" -> "java.io.InputStream";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.reflect.Array";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Class";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Boolean";
	"spoon.support.processing.XmlProcessorProperties" -> "byte";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Byte";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Character";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Double";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Float";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Integer";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Long";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.reference.CtReference";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Comparable";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.processing.FactoryAccessor";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.factory.FieldFactory";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.reflect.factory.PackageFactory";
	"spoon.support.processing.XmlProcessorProperties" -> "java.io.Serializable";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Enum";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.SuppressWarnings";
	"spoon.support.processing.XmlProcessorProperties" -> "T";
	"spoon.support.processing.XmlProcessorProperties" -> "java.util.Collection";
	"spoon.support.processing.XmlProcessorProperties" -> "java.util.ArrayList";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.StringBuffer";
	"spoon.support.processing.XmlProcessorProperties" -> "java.util.Map$Entry";
	"spoon.support.processing.XmlProcessorProperties" -> "java.util.Set";
	"spoon.support.processing.XmlProcessorProperties" -> "java.lang.Override";
	"spoon.support.processing.XmlProcessorProperties" -> "org.xml.sax.XMLReader";
	"spoon.support.processing.XmlProcessorProperties" -> "org.xml.sax.helpers.XMLReaderFactory";
	"spoon.support.processing.XmlProcessorProperties" -> "spoon.support.processing.XmlProcessorProperties$Loader";
	"spoon.support.processing.XmlProcessorProperties" -> "org.xml.sax.helpers.DefaultHandler";
	"spoon.support.processing.XmlProcessorProperties" -> "org.xml.sax.InputSource";
	"spoon.support.processing.XmlProcessorProperties" -> "java.io.IOException";
	"spoon.support.processing.XmlProcessorProperties" -> "org.xml.sax.SAXException";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.util.List";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.declaration.CtField";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "NestedTypeScanner";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "N";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.lang.Class";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.util.HashSet";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.visitor.filter.ReferenceTypeFilter";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.visitor.filter.AbstractReferenceFilter";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.visitor.ReferenceFilter";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.visitor.Query";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.lang.Object";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "java.lang.Override";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl" -> "spoon.support.compiler.SnippetCompilationHelper";
	"spoon.template.Substitution" -> "java.lang.Object";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtElement";
	"spoon.template.Substitution" -> "java.lang.Comparable";
	"spoon.template.Substitution" -> "spoon.processing.FactoryAccessor";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.template.Substitution" -> "spoon.template.Template";
	"spoon.template.Substitution" -> "E";
	"spoon.template.Substitution" -> "java.lang.String";
	"spoon.template.Substitution" -> "java.lang.RuntimeException";
	"spoon.template.Substitution" -> "spoon.reflect.factory.Factory";
	"spoon.template.Substitution" -> "spoon.reflect.factory.CoreFactory";
	"spoon.template.Substitution" -> "spoon.support.template.SubstitutionVisitor";
	"spoon.template.Substitution" -> "spoon.reflect.visitor.CtScanner";
	"spoon.template.Substitution" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.template.Substitution" -> "T";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtType";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.template.Substitution" -> "spoon.reflect.factory.ClassFactory";
	"spoon.template.Substitution" -> "spoon.reflect.factory.TypeFactory";
	"spoon.template.Substitution" -> "spoon.reflect.factory.SubFactory";
	"spoon.template.Substitution" -> "java.lang.Class";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtClass";
	"spoon.template.Substitution" -> "spoon.reflect.code.CtStatement";
	"spoon.template.Substitution" -> "spoon.reflect.code.CtCodeElement";
	"spoon.template.Substitution" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.template.Substitution" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.template.Substitution" -> "spoon.reflect.reference.CtReference";
	"spoon.template.Substitution" -> "java.util.Set";
	"spoon.template.Substitution" -> "spoon.support.template.Parameters";
	"spoon.template.Substitution" -> "java.util.Collection";
	"spoon.template.Substitution" -> "java.lang.Exception";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtMethod";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.template.Substitution" -> "spoon.template.Local";
	"spoon.template.Substitution" -> "spoon.template.Parameter";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.template.Substitution" -> "java.util.List";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtField";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtVariable";
	"spoon.template.Substitution" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.template.Substitution" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.template.Substitution" -> "java.lang.SuppressWarnings";
	"spoon.template.Substitution" -> "spoon.reflect.declaration.CtInterface";
	"spoon.template.Substitution" -> "spoon.reflect.factory.ConstructorFactory";
	"spoon.template.Substitution" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.template.Substitution" -> "java.lang.reflect.Array";
	"spoon.template.Substitution" -> "spoon.reflect.code.CtBlock";
	"spoon.template.Substitution" -> "spoon.reflect.code.CtStatementList";
	"spoon.template.Substitution" -> "java.lang.Iterable";
	"spoon.template.Substitution" -> "spoon.template.TemplateParameter";
	"spoon.template.Substitution" -> "spoon.reflect.code.CtExpression";
	"spoon.template.Substitution" -> "spoon.reflect.visitor.filter.ReferenceTypeFilter";
	"spoon.template.Substitution" -> "spoon.reflect.visitor.filter.AbstractReferenceFilter";
	"spoon.template.Substitution" -> "spoon.reflect.visitor.ReferenceFilter";
	"spoon.template.Substitution" -> "spoon.reflect.visitor.Query";
	"spoon.template.Substitution" -> "spoon.reflect.reference.CtPackageReference";
	"org.eclipse.jdt.internal.compiler.ast.ContinueStatement" [color=grey];
	"java.io.PrintStream" [color=grey];
	"spoon.reflect.reference.CtPackageReference" -> "java.lang.Package";
	"spoon.reflect.reference.CtPackageReference" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.reference.CtPackageReference" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.reference.CtPackageReference" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.reference.CtPackageReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtPackageReference" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.reference.CtPackageReference" -> "spoon.reflect.declaration.CtModifiable";
	"javax.swing.tree.TreePath" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope" [color=grey];
	"spoon.support.compiler.ZipFile" -> "java.lang.reflect.Array";
	"spoon.support.compiler.ZipFile" -> "java.lang.String";
	"spoon.support.compiler.ZipFile" -> "spoon.support.compiler.ZipFolder";
	"spoon.support.compiler.ZipFile" -> "spoon.compiler.SpoonFolder";
	"spoon.support.compiler.ZipFile" -> "spoon.compiler.SpoonResource";
	"spoon.support.compiler.ZipFile" -> "java.lang.Object";
	"spoon.support.compiler.ZipFile" -> "spoon.compiler.SpoonFile";
	"spoon.support.compiler.ZipFile" -> "java.lang.Override";
	"spoon.support.compiler.ZipFile" -> "java.io.File";
	"spoon.support.compiler.ZipFile" -> "java.io.ByteArrayInputStream";
	"spoon.support.compiler.ZipFile" -> "java.io.InputStream";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "java.util.List";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "spoon.reflect.eval.SymbolicEvaluationStack";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "java.util.ArrayList";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "java.lang.reflect.Array";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "java.lang.Object";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "java.util.Arrays";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "java.lang.Comparable";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "java.lang.String";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "java.lang.Override";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "spoon.support.reflect.eval.VisitorSymbolicEvaluator";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "spoon.reflect.eval.SymbolicEvaluator";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" -> "spoon.reflect.eval.SymbolicInstance";
	"java.util.regex.Pattern" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.SwitchStatement" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.Argument" [color=grey];
	"java.io.ByteArrayInputStream" [color=grey];
	"org.eclipse.jdt.internal.compiler.impl.ReferenceContext" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.Binding" [color=grey];
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "java.lang.Override";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.declaration.CtEnum";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.reflect.declaration.CtInterface";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.support.reflect.declaration.CtSimpleTypeImpl";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" -> "java.io.Serializable";
	"javax.swing.JTree" [color=grey];
	"spoon.reflect.declaration.CtConstructor" -> "java.lang.String";
	"spoon.reflect.declaration.CtConstructor" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.declaration.CtConstructor" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.declaration.CtConstructor" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.declaration.CtConstructor" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtConstructor" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtConstructor" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.declaration.CtConstructor" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.declaration.CtConstructor" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.declaration.CtConstructor" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.declaration.CtConstructor" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.declaration.CtConstructor" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.reference.CtVariableReference" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.reference.CtVariableReference" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.reference.CtVariableReference" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.reference.CtVariableReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtVariableReference" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.reference.CtVariableReference" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.reference.CtVariableReference" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.reference.CtVariableReference" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.reference.CtVariableReference" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.reference.CtVariableReference" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "spoon.reflect.visitor.ReferenceFilter";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "java.util.ArrayList";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "java.util.List";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "spoon.reflect.visitor.CtScanner";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "java.lang.String";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "java.lang.Comparable";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "java.lang.Class";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "java.lang.Object";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "java.lang.SuppressWarnings";
	"spoon.reflect.visitor.ReferenceQueryVisitor" -> "java.lang.Override";
	"spoon.reflect.factory.Factory" -> "spoon.compiler.Environment";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.AnnotationFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.ClassFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.CodeFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.CompilationUnitFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.ConstructorFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.EvalFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.FieldFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.MethodFactory";
	"spoon.reflect.factory.Factory" -> "spoon.reflect.factory.PackageFactory";
	"spoon.reflect.factory.Factory" -> "java.io.Serializable";
	"org.eclipse.jdt.internal.compiler.ast.ForStatement" [color=grey];
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.support.reflect.declaration.CtClassImpl";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.support.reflect.declaration.CtTypeImpl";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.support.reflect.declaration.CtSimpleTypeImpl";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.declaration.CtEnum";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "java.lang.Override";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "java.util.List";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.declaration.CtField";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "java.util.Collections";
	"spoon.support.reflect.declaration.CtEnumImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.cu.SourceCodeFragment" -> "java.lang.String";
	"spoon.reflect.cu.SourceCodeFragment" -> "java.lang.Object";
	"java.lang.RuntimeException" [color=grey];
	"com.martiansoftware.jsap.stringparsers.StringStringParser" [color=grey];
	"java.io.OutputStream" [color=grey];
	"spoon.support.SerializationModelStreamer$" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.SerializationModelStreamer$" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.SerializationModelStreamer$" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.SerializationModelStreamer$" -> "java.lang.Comparable";
	"spoon.support.SerializationModelStreamer$" -> "spoon.processing.FactoryAccessor";
	"spoon.support.SerializationModelStreamer$" -> "spoon.reflect.factory.Factory";
	"spoon.support.SerializationModelStreamer$" -> "java.lang.Override";
	"spoon.support.SerializationModelStreamer$" -> "spoon.reflect.reference.CtReference";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ASTPair" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ASTPair" -> "java.lang.Comparable";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ASTPair" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ASTPair" -> "org.eclipse.jdt.internal.compiler.ast.ASTNode";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ASTPair" -> "java.lang.Object";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ASTPair" -> "java.lang.Class";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ASTPair" -> "java.lang.String";
	"spoon.support.compiler.jdt.JDTTreeBuilder$ASTPair" -> "java.lang.Override";
	"spoon.processing.ProcessingManager" -> "spoon.processing.Processor";
	"spoon.processing.ProcessingManager" -> "spoon.processing.FactoryAccessor";
	"spoon.processing.ProcessingManager" -> "java.lang.Class";
	"spoon.processing.ProcessingManager" -> "java.util.Collection";
	"spoon.processing.ProcessingManager" -> "java.lang.String";
	"spoon.processing.ProcessingManager" -> "spoon.reflect.declaration.CtElement";
	"spoon.processing.ProcessingManager" -> "java.lang.Comparable";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Comparable";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Object";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.eval.PartialEvaluator";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.String";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.RuntimeException";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtCase";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Iterable";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtSwitch";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "R";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtBlock";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.util.List";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtReturn";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtEnum";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtAssignment";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtField";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtAssert";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtLiteral";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.BinaryOperatorKind";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Number";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Boolean";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtConditional";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtInterface";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtInvocation";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "T";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.support.util.RtHelper";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Exception";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtNewArray";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtNewClass";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Class";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Enum";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.util.Set";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtThisAccess";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Override";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.UnaryOperatorKind";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Integer";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "byte";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Byte";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Long";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Float";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "short";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.lang.Short";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtBreak";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtCatch";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtContinue";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtDo";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtLoop";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtFor";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "java.util.ArrayList";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtForEach";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtIf";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtSynchronized";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtThrow";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtTry";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.support.reflect.eval.VisitorPartialEvaluator" -> "spoon.reflect.code.CtWhile";
	"org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration" [color=grey];
	"spoon.reflect.code.CtReturn" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtReturn" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtReturn" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtReturn" -> "java.lang.Comparable";
	"spoon.reflect.code.CtReturn" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtReturn" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtReturn" -> "spoon.template.TemplateParameter";
	"java.lang.Boolean" [color=grey];
	"spoon.reflect.code.CtOperatorAssignment" -> "spoon.reflect.code.BinaryOperatorKind";
	"spoon.reflect.declaration.ParentNotInitializedException" -> "java.lang.String";
	"spoon.reflect.declaration.ParentNotInitializedException" -> "spoon.SpoonException";
	"spoon.reflect.declaration.ParentNotInitializedException" -> "java.lang.RuntimeException";
	"spoon.reflect.code.CtBinaryOperator" -> "spoon.reflect.code.BinaryOperatorKind";
	"spoon.reflect.code.CtBinaryOperator" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtBinaryOperator" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtBinaryOperator" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtBinaryOperator" -> "java.lang.Comparable";
	"spoon.reflect.code.CtBinaryOperator" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtBinaryOperator" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtBinaryOperator" -> "spoon.template.TemplateParameter";
	"spoon.reflect.code.CtFor" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.code.CtFor" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtFor" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtFor" -> "java.lang.Comparable";
	"spoon.reflect.code.CtFor" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtFor" -> "java.util.List";
	"spoon.reflect.code.CtFor" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtFor" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtFor" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.code.CtBlock";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.declaration.CtClass";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" -> "spoon.reflect.visitor.CtVisitor";
	"java.awt.event.ComponentEvent" [color=grey];
	"java.io.PrintWriter" [color=grey];
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.TypeFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.Void";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.String";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.Boolean";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.Byte";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.Character";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.Integer";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.Long";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.Float";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.Double";
	"spoon.reflect.factory.TypeFactory" -> "byte";
	"spoon.reflect.factory.TypeFactory" -> "java.util.Date";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.Object";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.Class";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.TypeFactory" -> "java.lang.SuppressWarnings";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.factory.PackageFactory";
	"spoon.reflect.factory.TypeFactory" -> "java.io.Serializable";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.reflect.factory.TypeFactory" -> "java.util.List";
	"spoon.reflect.factory.TypeFactory" -> "java.util.ArrayList";
	"spoon.reflect.factory.TypeFactory" -> "java.util.Collection";
	"spoon.reflect.factory.TypeFactory" -> "java.util.Set";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.reflect.factory.TypeFactory" -> "spoon.reflect.reference.CtTypeParameterReference";
	"org.eclipse.jdt.internal.compiler.ast.Expression" [color=grey];
	"java.io.BufferedInputStream" [color=grey];
	"spoon.support.template.ParameterMatcher" -> "spoon.template.TemplateMatcher";
	"spoon.support.template.ParameterMatcher" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.template.ParameterMatcher" -> "java.lang.Comparable";
	"spoon.support.template.ParameterMatcher" -> "spoon.processing.FactoryAccessor";
	"spoon.support.template.ParameterMatcher" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.eval.SymbolicEvaluator" -> "java.lang.Comparable";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.template.TemplateParameter";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.eval.SymbolicInstance";
	"spoon.reflect.eval.SymbolicEvaluator" -> "java.util.List";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.eval.SymbolicEvaluationStack";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.eval.SymbolicHeap";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.eval.SymbolicEvaluatorObserver";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.eval.SymbolicEvaluator" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.eval.SymbolicEvaluator" -> "java.lang.reflect.Array";
	"spoon.support.reflect.eval.ReturnException" -> "spoon.reflect.code.CtReturn";
	"spoon.support.reflect.eval.ReturnException" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.support.reflect.eval.ReturnException" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.eval.ReturnException" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.eval.ReturnException" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.eval.ReturnException" -> "java.lang.Comparable";
	"spoon.support.reflect.eval.ReturnException" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.eval.ReturnException" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.eval.ReturnException" -> "spoon.SpoonException";
	"spoon.support.reflect.eval.ReturnException" -> "java.lang.RuntimeException";
	"spoon.compiler.SpoonFolder" -> "java.util.List";
	"org.apache.commons.io.IOUtils" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.Statement" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.BlockScope" [color=grey];
	"java.util.AbstractSet" [color=grey];
	"java.lang.Number" [color=grey];
	"com.martiansoftware.jsap.stringparsers.IntegerStringParser" [color=grey];
	"spoon.reflect.visitor.filter.AbstractReferenceFilter" -> "java.lang.Class";
	"spoon.reflect.visitor.filter.AbstractReferenceFilter" -> "java.lang.String";
	"spoon.reflect.visitor.filter.AbstractReferenceFilter" -> "java.lang.Object";
	"spoon.reflect.visitor.filter.AbstractReferenceFilter" -> "spoon.reflect.visitor.ReferenceFilter";
	"spoon.reflect.visitor.filter.AbstractReferenceFilter" -> "java.lang.SuppressWarnings";
	"spoon.support.compiler.FileSystemFile" -> "java.io.File";
	"spoon.support.compiler.FileSystemFile" -> "java.lang.Object";
	"spoon.support.compiler.FileSystemFile" -> "spoon.compiler.SpoonFile";
	"spoon.support.compiler.FileSystemFile" -> "spoon.compiler.SpoonResource";
	"spoon.support.compiler.FileSystemFile" -> "java.lang.Override";
	"spoon.support.compiler.FileSystemFile" -> "spoon.compiler.SpoonResourceHelper";
	"spoon.support.compiler.FileSystemFile" -> "java.lang.String";
	"spoon.support.compiler.FileSystemFile" -> "java.io.FileInputStream";
	"spoon.support.compiler.FileSystemFile" -> "java.io.FileNotFoundException";
	"spoon.support.compiler.FileSystemFile" -> "org.apache.log4j.Logger";
	"spoon.support.compiler.FileSystemFile" -> "java.lang.Throwable";
	"spoon.support.compiler.FileSystemFile" -> "org.apache.log4j.Category";
	"spoon.support.compiler.FileSystemFile" -> "java.io.InputStream";
	"spoon.support.compiler.FileSystemFile" -> "java.lang.Exception";
	"spoon.support.compiler.FileSystemFile" -> "spoon.compiler.SpoonFolder";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "java.lang.Comparable";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "spoon.template.TemplateParameter";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.visitor.filter.VariableAccessFilter" -> "java.lang.Object";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "java.util.TreeMap";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "java.lang.Object";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "java.lang.reflect.Array";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "java.util.ArrayList";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "java.lang.Class";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "spoon.reflect.factory.TypeFactory";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtAnnotationImpl$" -> "java.lang.Override";
	"spoon.support.gui.SpoonModelTree$" -> "java.lang.Object";
	"spoon.support.gui.SpoonModelTree$" -> "java.awt.event.ActionListener";
	"spoon.support.gui.SpoonModelTree$" -> "java.awt.event.ActionEvent";
	"spoon.support.gui.SpoonModelTree$" -> "javax.swing.JFileChooser";
	"spoon.support.gui.SpoonModelTree$" -> "spoon.support.gui.SpoonModelTree";
	"spoon.support.gui.SpoonModelTree$" -> "javax.swing.JFrame";
	"spoon.support.gui.SpoonModelTree$" -> "java.awt.event.KeyListener";
	"spoon.support.gui.SpoonModelTree$" -> "java.awt.event.MouseListener";
	"spoon.support.gui.SpoonModelTree$" -> "spoon.support.SerializationModelStreamer";
	"spoon.support.gui.SpoonModelTree$" -> "spoon.reflect.ModelStreamer";
	"spoon.support.gui.SpoonModelTree$" -> "spoon.reflect.factory.Factory";
	"spoon.support.gui.SpoonModelTree$" -> "java.io.File";
	"spoon.support.gui.SpoonModelTree$" -> "java.io.FileOutputStream";
	"spoon.support.gui.SpoonModelTree$" -> "java.io.IOException";
	"spoon.support.gui.SpoonModelTree$" -> "org.apache.log4j.Logger";
	"spoon.support.gui.SpoonModelTree$" -> "java.lang.Throwable";
	"spoon.support.gui.SpoonModelTree$" -> "java.lang.String";
	"spoon.support.gui.SpoonModelTree$" -> "org.apache.log4j.Category";
	"spoon.support.gui.SpoonModelTree$" -> "javax.swing.JTree";
	"spoon.support.gui.SpoonModelTree$" -> "javax.swing.tree.DefaultMutableTreeNode";
	"spoon.support.gui.SpoonModelTree$" -> "spoon.support.gui.SpoonObjectFieldsTable";
	"java.lang.reflect.AccessibleObject" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.Annotation" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding" [color=grey];
	"spoon.compiler.InvalidClassPathException" -> "spoon.SpoonException";
	"spoon.compiler.InvalidClassPathException" -> "java.lang.RuntimeException";
	"spoon.compiler.InvalidClassPathException" -> "java.lang.String";
	"spoon.compiler.InvalidClassPathException" -> "java.lang.Exception";
	"spoon.compiler.InvalidClassPathException" -> "java.lang.Throwable";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.reflect.factory.Factory";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.lang.String";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.support.compiler.jdt.JDTBasedSpoonCompiler";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.compiler.SpoonCompiler";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.support.compiler.VirtualFile";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.compiler.SpoonFile";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.compiler.SpoonResource";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.lang.Exception";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.compiler.Environment";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.support.compiler.VirtualFolder";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.compiler.SpoonFolder";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.util.List";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.lang.System";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.lang.Override";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.support.compiler.jdt.JDTBatchCompiler";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "org.eclipse.jdt.internal.compiler.batch.Main";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.util.ArrayList";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.lang.Thread";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.lang.ClassLoader";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.net.URLClassLoader";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.lang.reflect.Array";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.net.URL";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.io.File";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "org.apache.log4j.Logger";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "org.apache.log4j.Category";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.lang.Throwable";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.support.compiler.jdt.JDTTreeBuilder";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "org.eclipse.jdt.internal.compiler.ASTVisitor";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "org.eclipse.jdt.core.compiler.CategorizedProblem";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "org.eclipse.jdt.core.compiler.IProblem";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.support.compiler.SnippetCompilationError";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "spoon.SpoonException";
	"spoon.support.compiler.jdt.JDTSnippetCompiler" -> "java.lang.RuntimeException";
	"com.martiansoftware.jsap.stringparsers.FileStringParser" [color=grey];
	"java.lang.reflect.Constructor" [color=grey];
	"spoon.support.util.NotDirectlyModifiableSet" -> "java.util.TreeSet";
	"spoon.support.util.NotDirectlyModifiableSet" -> "E";
	"spoon.support.util.NotDirectlyModifiableSet" -> "java.lang.String";
	"spoon.support.util.NotDirectlyModifiableSet" -> "java.lang.RuntimeException";
	"spoon.support.util.NotDirectlyModifiableSet" -> "java.lang.Override";
	"spoon.support.util.NotDirectlyModifiableSet" -> "java.util.Collection";
	"spoon.support.util.NotDirectlyModifiableSet" -> "java.lang.Object";
	"spoon.support.util.NotDirectlyModifiableSet" -> "java.util.AbstractSet";
	"spoon.reflect.visitor.QueryVisitor" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.visitor.QueryVisitor" -> "java.util.ArrayList";
	"spoon.reflect.visitor.QueryVisitor" -> "java.util.List";
	"spoon.reflect.visitor.QueryVisitor" -> "spoon.reflect.visitor.CtScanner";
	"spoon.reflect.visitor.QueryVisitor" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.QueryVisitor" -> "java.lang.String";
	"spoon.reflect.visitor.QueryVisitor" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.QueryVisitor" -> "java.lang.Comparable";
	"spoon.reflect.visitor.QueryVisitor" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.QueryVisitor" -> "java.lang.Class";
	"spoon.reflect.visitor.QueryVisitor" -> "java.lang.Object";
	"spoon.reflect.visitor.QueryVisitor" -> "java.lang.SuppressWarnings";
	"spoon.reflect.visitor.QueryVisitor" -> "java.lang.Override";
	"org.xml.sax.InputSource" [color=grey];
	"spoon.reflect.eval.SymbolicStackFrame" -> "java.util.HashMap";
	"spoon.reflect.eval.SymbolicStackFrame" -> "java.util.Map";
	"spoon.reflect.eval.SymbolicStackFrame" -> "spoon.reflect.eval.SymbolicInstance";
	"spoon.reflect.eval.SymbolicStackFrame" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.reflect.eval.SymbolicStackFrame" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.eval.SymbolicStackFrame" -> "java.lang.Comparable";
	"spoon.reflect.eval.SymbolicStackFrame" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.eval.SymbolicStackFrame" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.eval.SymbolicStackFrame" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.eval.SymbolicStackFrame" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.eval.SymbolicStackFrame" -> "java.util.List";
	"spoon.reflect.eval.SymbolicStackFrame" -> "java.lang.Object";
	"spoon.reflect.eval.SymbolicStackFrame" -> "java.util.Map$Entry";
	"spoon.reflect.eval.SymbolicStackFrame" -> "java.util.Set";
	"spoon.reflect.eval.SymbolicStackFrame" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.eval.SymbolicStackFrame" -> "java.util.ArrayList";
	"spoon.reflect.eval.SymbolicStackFrame" -> "java.lang.Override";
	"spoon.reflect.eval.SymbolicStackFrame" -> "java.lang.String";
	"spoon.reflect.eval.SymbolicStackFrame" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.eval.observer.SymbolicEvaluationPathsMaker" -> "java.util.ArrayList";
	"spoon.reflect.eval.observer.SymbolicEvaluationPathsMaker" -> "java.util.Collection";
	"spoon.reflect.eval.observer.SymbolicEvaluationPathsMaker" -> "spoon.reflect.eval.SymbolicEvaluationPath";
	"spoon.reflect.eval.observer.SymbolicEvaluationPathsMaker" -> "java.lang.Object";
	"spoon.reflect.eval.observer.SymbolicEvaluationPathsMaker" -> "spoon.reflect.eval.SymbolicEvaluatorObserver";
	"spoon.reflect.eval.observer.SymbolicEvaluationPathsMaker" -> "spoon.reflect.eval.SymbolicEvaluator";
	"spoon.reflect.eval.observer.SymbolicEvaluationPathsMaker" -> "spoon.reflect.eval.SymbolicEvaluationStep";
	"spoon.reflect.eval.observer.SymbolicEvaluationPathsMaker" -> "spoon.support.reflect.eval.VisitorSymbolicEvaluator";
	"spoon.reflect.eval.observer.SymbolicEvaluationPathsMaker" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.util.List";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.support.reflect.declaration.CtSimpleTypeImpl";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtType";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtMethod";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.lang.reflect.Array";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.lang.Object";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.lang.Override";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.util.HashSet";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.support.reflect.declaration.CtTypeImpl" -> "java.util.Arrays";
	"java.lang.reflect.Member" [color=grey];
	"spoon.reflect.code.CtAssignment" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtAssignment" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtAssignment" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtAssignment" -> "java.lang.Comparable";
	"spoon.reflect.code.CtAssignment" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtAssignment" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtAssignment" -> "spoon.template.TemplateParameter";
	"java.lang.Character" [color=grey];
	"spoon.reflect.declaration.CtTypeParameter" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.declaration.CtTypeParameter" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.declaration.CtTypeParameter" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.declaration.CtTypeParameter" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtTypeParameter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtTypeParameter" -> "java.lang.String";
	"spoon.reflect.declaration.CtTypeParameter" -> "java.util.List";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.factory.MethodFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.MethodFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.factory.MethodFactory" -> "java.util.Set";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.factory.MethodFactory" -> "java.lang.String";
	"spoon.reflect.factory.MethodFactory" -> "java.util.List";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.factory.MethodFactory" -> "java.lang.Iterable";
	"spoon.reflect.factory.MethodFactory" -> "spoon.template.TemplateParameter";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.declaration.CtMethod";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.MethodFactory" -> "spoon.template.Substitution";
	"spoon.reflect.factory.MethodFactory" -> "java.lang.reflect.Method";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.MethodFactory" -> "java.lang.Class";
	"spoon.reflect.factory.MethodFactory" -> "java.lang.reflect.Array";
	"spoon.reflect.factory.MethodFactory" -> "java.util.Arrays";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.factory.MethodFactory" -> "java.lang.SuppressWarnings";
	"spoon.reflect.factory.MethodFactory" -> "java.util.ArrayList";
	"spoon.reflect.factory.MethodFactory" -> "java.util.Collection";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.reflect.factory.MethodFactory" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.reflect.reference.CtTypeReference" -> "java.lang.String";
	"spoon.reflect.reference.CtTypeReference" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.reference.CtTypeReference" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.reference.CtTypeReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtTypeReference" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.reference.CtTypeReference" -> "java.lang.Class";
	"spoon.reflect.reference.CtTypeReference" -> "java.util.Collection";
	"spoon.reflect.reference.CtTypeReference" -> "java.util.Set";
	"spoon.reflect.reference.CtTypeReference" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.reference.CtTypeReference" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.reference.CtTypeReference" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.reference.CtTypeReference" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.reference.CtTypeReference" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.processing.FileGenerator" -> "java.io.File";
	"spoon.processing.FileGenerator" -> "java.util.List";
	"spoon.reflect.visitor.CtScanner" -> "java.lang.Object";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.CtScanner" -> "java.lang.Comparable";
	"spoon.reflect.visitor.CtScanner" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.CtScanner" -> "java.util.List";
	"spoon.reflect.visitor.CtScanner" -> "java.util.Map";
	"spoon.reflect.visitor.CtScanner" -> "java.util.Collection";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.visitor.CtScanner" -> "java.util.Set";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.visitor.CtScanner" -> "java.lang.Iterable";
	"spoon.reflect.visitor.CtScanner" -> "spoon.template.TemplateParameter";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtReturn";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtCase";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtSwitch";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtEnum";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtAssignment";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.reflect.visitor.CtScanner" -> "E";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtAssert";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtConditional";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtField";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtInterface";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtInvocation";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtLiteral";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtMethod";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtNewArray";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtNewClass";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtParameter";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtThisAccess";
	"spoon.reflect.visitor.CtScanner" -> "java.lang.Override";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtBreak";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtCatch";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtContinue";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtDo";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtLoop";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtFor";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtForEach";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtIf";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtSynchronized";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtThrow";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtTry";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.reflect.visitor.CtScanner" -> "spoon.reflect.code.CtWhile";
	"java.util.ArrayList" [color=grey];
	"spoon.template.BlockTemplate" -> "java.lang.Object";
	"spoon.template.BlockTemplate" -> "spoon.template.Template";
	"spoon.template.BlockTemplate" -> "spoon.template.TemplateParameter";
	"spoon.template.BlockTemplate" -> "java.lang.Void";
	"spoon.template.BlockTemplate" -> "spoon.reflect.declaration.CtClass";
	"spoon.template.BlockTemplate" -> "spoon.reflect.code.CtStatement";
	"spoon.template.BlockTemplate" -> "spoon.reflect.code.CtCodeElement";
	"spoon.template.BlockTemplate" -> "spoon.reflect.declaration.CtElement";
	"spoon.template.BlockTemplate" -> "java.lang.Comparable";
	"spoon.template.BlockTemplate" -> "spoon.processing.FactoryAccessor";
	"spoon.template.BlockTemplate" -> "spoon.reflect.declaration.CtType";
	"spoon.template.BlockTemplate" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.template.BlockTemplate" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.template.BlockTemplate" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.template.BlockTemplate" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.template.BlockTemplate" -> "java.lang.String";
	"spoon.template.BlockTemplate" -> "spoon.reflect.declaration.CtMethod";
	"spoon.template.BlockTemplate" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.template.BlockTemplate" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.template.BlockTemplate" -> "spoon.reflect.code.CtBlock";
	"spoon.template.BlockTemplate" -> "spoon.reflect.code.CtStatementList";
	"spoon.template.BlockTemplate" -> "java.lang.Iterable";
	"spoon.template.BlockTemplate" -> "spoon.reflect.factory.Factory";
	"spoon.template.BlockTemplate" -> "spoon.reflect.factory.ClassFactory";
	"spoon.template.BlockTemplate" -> "spoon.reflect.factory.TypeFactory";
	"spoon.template.BlockTemplate" -> "spoon.reflect.factory.SubFactory";
	"spoon.template.BlockTemplate" -> "java.lang.Class";
	"spoon.template.BlockTemplate" -> "spoon.template.Substitution";
	"spoon.template.BlockTemplate" -> "spoon.reflect.factory.CoreFactory";
	"spoon.template.BlockTemplate" -> "java.lang.Throwable";
	"spoon.reflect.code.CtConditional" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtConditional" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtConditional" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtConditional" -> "java.lang.Comparable";
	"spoon.reflect.code.CtConditional" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtConditional" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtConditional" -> "spoon.template.TemplateParameter";
	"spoon.reflect.declaration.CtField" -> "java.lang.String";
	"spoon.reflect.declaration.CtField" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.declaration.CtField" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.declaration.CtField" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.declaration.CtField" -> "java.lang.Comparable";
	"spoon.reflect.declaration.CtField" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.declaration.CtField" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.declaration.CtField" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.declaration.CtField" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.declaration.CtField" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtDoImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.support.reflect.code.CtLoopImpl";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtDoImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.reflect.code.CtLoop";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.reflect.code.CtDo";
	"spoon.support.reflect.code.CtDoImpl" -> "spoon.reflect.visitor.CtVisitor";
	"org.eclipse.jdt.internal.compiler.ast.ASTNode" [color=grey];
	"spoon.support.gui.SpoonTreeBuilder" -> "java.util.Stack";
	"spoon.support.gui.SpoonTreeBuilder" -> "javax.swing.tree.DefaultMutableTreeNode";
	"spoon.support.gui.SpoonTreeBuilder" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.gui.SpoonTreeBuilder" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.gui.SpoonTreeBuilder" -> "java.lang.String";
	"spoon.support.gui.SpoonTreeBuilder" -> "java.lang.Object";
	"spoon.support.gui.SpoonTreeBuilder" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.gui.SpoonTreeBuilder" -> "java.lang.Comparable";
	"spoon.support.gui.SpoonTreeBuilder" -> "spoon.processing.FactoryAccessor";
	"spoon.support.gui.SpoonTreeBuilder" -> "java.lang.Override";
	"spoon.support.gui.SpoonTreeBuilder" -> "spoon.reflect.reference.CtReference";
	"org.eclipse.jdt.internal.compiler.lookup.ClassScope" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.MemberValuePair" [color=grey];
	"spoon.template.ExpressionTemplate" -> "java.lang.Object";
	"spoon.template.ExpressionTemplate" -> "spoon.template.Template";
	"spoon.template.ExpressionTemplate" -> "spoon.template.TemplateParameter";
	"spoon.template.ExpressionTemplate" -> "java.lang.String";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.declaration.CtClass";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.code.CtStatement";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.code.CtCodeElement";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.declaration.CtElement";
	"spoon.template.ExpressionTemplate" -> "java.lang.Comparable";
	"spoon.template.ExpressionTemplate" -> "spoon.processing.FactoryAccessor";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.declaration.CtType";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.code.CtBlock";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.code.CtStatementList";
	"spoon.template.ExpressionTemplate" -> "java.lang.Iterable";
	"spoon.template.ExpressionTemplate" -> "java.util.List";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.code.CtReturn";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.code.CtExpression";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.template.ExpressionTemplate" -> "java.lang.SuppressWarnings";
	"spoon.template.ExpressionTemplate" -> "T";
	"spoon.template.ExpressionTemplate" -> "java.lang.Throwable";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.declaration.CtMethod";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.factory.Factory";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.factory.ClassFactory";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.factory.TypeFactory";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.factory.SubFactory";
	"spoon.template.ExpressionTemplate" -> "java.lang.Class";
	"spoon.template.ExpressionTemplate" -> "spoon.template.Substitution";
	"spoon.template.ExpressionTemplate" -> "spoon.reflect.factory.CoreFactory";
	"spoon.DirectoryScanner" [color=grey];
	"com.martiansoftware.jsap.JSAPResult" [color=grey];
	"spoon.reflect.code.CtLoop" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.code.CtLoop" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtLoop" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtLoop" -> "java.lang.Comparable";
	"spoon.reflect.code.CtLoop" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.filter.AbstractFilter" -> "java.lang.Class";
	"spoon.reflect.visitor.filter.AbstractFilter" -> "java.lang.String";
	"spoon.reflect.visitor.filter.AbstractFilter" -> "java.lang.Object";
	"spoon.reflect.visitor.filter.AbstractFilter" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.visitor.filter.AbstractFilter" -> "java.lang.SuppressWarnings";
	"org.eclipse.jdt.internal.compiler.ICompilerRequestor" [color=grey];
	"java.lang.reflect.InvocationTargetException" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding" [color=grey];
	"spoon.reflect.code.CtArrayAccess" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtArrayAccess" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtArrayAccess" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtArrayAccess" -> "java.lang.Comparable";
	"spoon.reflect.code.CtArrayAccess" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtArrayAccess" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtArrayAccess" -> "spoon.template.TemplateParameter";
	"java.lang.reflect.Modifier" [color=grey];
	"spoon.support.RuntimeProcessingManager" -> "spoon.processing.Processor";
	"spoon.support.RuntimeProcessingManager" -> "spoon.processing.FactoryAccessor";
	"spoon.support.RuntimeProcessingManager" -> "spoon.reflect.factory.Factory";
	"spoon.support.RuntimeProcessingManager" -> "java.util.List";
	"spoon.support.RuntimeProcessingManager" -> "spoon.support.visitor.ProcessingVisitor";
	"spoon.support.RuntimeProcessingManager" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.RuntimeProcessingManager" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.RuntimeProcessingManager" -> "java.lang.Object";
	"spoon.support.RuntimeProcessingManager" -> "spoon.processing.ProcessingManager";
	"spoon.support.RuntimeProcessingManager" -> "java.lang.Class";
	"spoon.support.RuntimeProcessingManager" -> "java.util.LinkedList";
	"spoon.support.RuntimeProcessingManager" -> "java.lang.Exception";
	"spoon.support.RuntimeProcessingManager" -> "spoon.compiler.Environment";
	"spoon.support.RuntimeProcessingManager" -> "spoon.processing.Severity";
	"spoon.support.RuntimeProcessingManager" -> "java.lang.String";
	"spoon.support.RuntimeProcessingManager" -> "java.lang.Thread";
	"spoon.support.RuntimeProcessingManager" -> "java.lang.ClassLoader";
	"spoon.support.RuntimeProcessingManager" -> "java.lang.ClassNotFoundException";
	"spoon.support.RuntimeProcessingManager" -> "java.lang.SuppressWarnings";
	"spoon.support.RuntimeProcessingManager" -> "java.lang.Override";
	"spoon.support.RuntimeProcessingManager" -> "spoon.support.util.Timer";
	"spoon.support.RuntimeProcessingManager" -> "spoon.reflect.factory.PackageFactory";
	"spoon.support.RuntimeProcessingManager" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.RuntimeProcessingManager" -> "java.io.Serializable";
	"spoon.support.RuntimeProcessingManager" -> "java.util.Collection";
	"spoon.support.RuntimeProcessingManager" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.RuntimeProcessingManager" -> "java.lang.Comparable";
	"spoon.support.RuntimeProcessingManager" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.RuntimeProcessingManager" -> "spoon.reflect.declaration.CtModifiable";
	"org.apache.log4j.Logger" [color=grey];
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "spoon.support.reflect.reference.CtReferenceImpl";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "java.io.Serializable";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "java.lang.Object";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "java.lang.String";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "java.lang.Override";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "java.util.Set";
	"spoon.support.reflect.reference.CtVariableReferenceImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.declaration.CtNamedElementImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.eval.SymbolicEvaluatorObserver" -> "spoon.reflect.eval.SymbolicEvaluator";
	"spoon.reflect.eval.SymbolicEvaluatorObserver" -> "spoon.reflect.eval.SymbolicEvaluationStep";
	"spoon.reflect.eval.SymbolicEvaluatorObserver" -> "spoon.support.reflect.eval.VisitorSymbolicEvaluator";
	"spoon.reflect.eval.SymbolicEvaluatorObserver" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.code.CtForEach" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtForEach" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtForEach" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtForEach" -> "java.lang.Comparable";
	"spoon.reflect.code.CtForEach" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtForEach" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtForEach" -> "spoon.template.TemplateParameter";
	"spoon.reflect.code.CtForEach" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.reflect.code.CtForEach" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.code.CtForEach" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.code.CtForEach" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.code.CtForEach" -> "spoon.reflect.declaration.CtModifiable";
	"java.lang.reflect.Field" [color=grey];
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtIfImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtIfImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.code.CtIf";
	"spoon.support.reflect.code.CtIfImpl" -> "java.lang.String";
	"spoon.support.reflect.code.CtIfImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.code.CtIfImpl" -> "S";
	"spoon.support.reflect.code.CtIfImpl" -> "java.lang.Void";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.factory.CoreFactory";
	"spoon.support.reflect.code.CtIfImpl" -> "spoon.reflect.visitor.CtVisitor";
	"org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.TypeDeclaration" [color=grey];
	"Java" [color=grey];
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.CtVisitor" -> "java.lang.Comparable";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.visitor.CtVisitor" -> "java.lang.Iterable";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.template.TemplateParameter";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtReturn";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtCase";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtSwitch";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtEnum";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtAssignment";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtAssert";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtConditional";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtField";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtInterface";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtInvocation";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtLiteral";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtMethod";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtNewArray";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtNewClass";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtParameter";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtThisAccess";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtBreak";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtCatch";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtContinue";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtDo";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtLoop";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtFor";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtForEach";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtIf";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtSynchronized";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtThrow";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtTry";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.reflect.visitor.CtVisitor" -> "spoon.reflect.code.CtWhile";
	"spoon.reflect.eval.SymbolicEvaluationStep" -> "spoon.reflect.eval.SymbolicStackFrame";
	"spoon.reflect.eval.SymbolicEvaluationStep" -> "spoon.reflect.eval.SymbolicHeap";
	"spoon.reflect.eval.SymbolicEvaluationStep" -> "spoon.reflect.eval.StepKind";
	"spoon.reflect.eval.SymbolicEvaluationStep" -> "java.lang.Object";
	"spoon.reflect.eval.SymbolicEvaluationStep" -> "java.lang.Enum";
	"spoon.reflect.eval.SymbolicEvaluationStep" -> "java.lang.String";
	"spoon.reflect.eval.SymbolicEvaluationStep" -> "java.lang.Override";
	"spoon.reflect.eval.SymbolicEvaluationStep" -> "spoon.reflect.eval.SymbolicInstance";
	"spoon.reflect.eval.SymbolicEvaluationStep" -> "java.util.Map";
	"spoon.reflect.eval.SymbolicEvaluationStep" -> "java.util.Collection";
	"java.util.Stack" [color=grey];
	"java.lang.Double" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference" [color=grey];
	"org.eclipse.jdt.internal.compiler.batch.Main" [color=grey];
	"spoon.compiler.SpoonResourceHelper" -> "java.lang.Object";
	"spoon.compiler.SpoonResourceHelper" -> "java.io.File";
	"spoon.compiler.SpoonResourceHelper" -> "java.lang.String";
	"spoon.compiler.SpoonResourceHelper" -> "java.lang.reflect.Array";
	"spoon.compiler.SpoonResourceHelper" -> "java.util.ArrayList";
	"spoon.compiler.SpoonResourceHelper" -> "java.util.List";
	"spoon.compiler.SpoonResourceHelper" -> "spoon.compiler.SpoonResource";
	"spoon.compiler.SpoonResourceHelper" -> "java.io.FileNotFoundException";
	"spoon.compiler.SpoonResourceHelper" -> "spoon.support.compiler.FileSystemFile";
	"spoon.compiler.SpoonResourceHelper" -> "spoon.compiler.SpoonFile";
	"spoon.compiler.SpoonResourceHelper" -> "spoon.support.compiler.FileSystemFolder";
	"spoon.compiler.SpoonResourceHelper" -> "spoon.compiler.SpoonFolder";
	"spoon.compiler.SpoonResourceHelper" -> "spoon.support.compiler.ZipFolder";
	"spoon.compiler.SpoonResourceHelper" -> "java.io.IOException";
	"spoon.compiler.SpoonResourceHelper" -> "org.apache.log4j.Logger";
	"spoon.compiler.SpoonResourceHelper" -> "java.lang.Throwable";
	"spoon.compiler.SpoonResourceHelper" -> "org.apache.log4j.Category";
	"spoon.reflect.reference.CtTypeParameterReference" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.reference.CtTypeParameterReference" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.reference.CtTypeParameterReference" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.reference.CtTypeParameterReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtTypeParameterReference" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.reference.CtTypeParameterReference" -> "java.util.List";
	"org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference" [color=grey];
	"spoon.support.template.UndefinedParameterException" -> "spoon.SpoonException";
	"spoon.support.template.UndefinedParameterException" -> "java.lang.RuntimeException";
	"spoon.support.template.UndefinedParameterException" -> "java.lang.String";
	"spoon.support.template.UndefinedParameterException" -> "java.lang.Throwable";
	"org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression" [color=grey];
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.support.reflect.code.CtFieldAccessImpl";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.support.reflect.code.CtTargetedAccessImpl";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.support.reflect.code.CtVariableAccessImpl";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.reflect.code.CtFieldAccess";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.code.CtBlock" -> "T";
	"spoon.reflect.code.CtBlock" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.code.CtBlock" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtBlock" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtBlock" -> "java.lang.Comparable";
	"spoon.reflect.code.CtBlock" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtBlock" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.code.CtBlock" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.code.CtBlock" -> "java.lang.Iterable";
	"java.lang.Package" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.MethodVerifier" [color=grey];
	"java.awt.event.ActionEvent" [color=grey];
	"java.lang.Integer" [color=grey];
	"org.apache.commons.io.FileUtils" [color=grey];
	"java.lang.Short" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.FieldReference" [color=grey];
	"org.eclipse.jdt.internal.compiler.ast.NormalAnnotation" [color=grey];
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.reflect.code.BinaryOperatorKind";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.support.reflect.code.CtAssignmentImpl";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.support.reflect.code.CtStatementImpl";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.reflect.code.CtAssignment";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.reflect.code.CtOperatorAssignmentImpl" -> "java.lang.Override";
	"spoon.reflect.reference.CtArrayTypeReference" -> "java.lang.String";
	"spoon.reflect.reference.CtArrayTypeReference" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.reference.CtArrayTypeReference" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.reference.CtArrayTypeReference" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.reference.CtArrayTypeReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtArrayTypeReference" -> "spoon.processing.FactoryAccessor";
	"org.eclipse.jdt.internal.compiler.ast.StringLiteral" [color=grey];
	"java.lang.IllegalArgumentException" [color=grey];
	"java.lang.InstantiationException" [color=grey];
	"spoon.processing.AbstractProcessor" -> "spoon.reflect.factory.Factory";
	"spoon.processing.AbstractProcessor" -> "java.util.HashSet";
	"spoon.processing.AbstractProcessor" -> "java.util.Set";
	"spoon.processing.AbstractProcessor" -> "java.lang.String";
	"spoon.processing.AbstractProcessor" -> "java.lang.Object";
	"spoon.processing.AbstractProcessor" -> "java.lang.reflect.Method";
	"spoon.processing.AbstractProcessor" -> "java.lang.Class";
	"spoon.processing.AbstractProcessor" -> "java.lang.reflect.Array";
	"spoon.processing.AbstractProcessor" -> "spoon.reflect.declaration.CtElement";
	"spoon.processing.AbstractProcessor" -> "java.lang.Comparable";
	"spoon.processing.AbstractProcessor" -> "spoon.processing.FactoryAccessor";
	"spoon.processing.AbstractProcessor" -> "spoon.processing.Processor";
	"spoon.processing.AbstractProcessor" -> "java.lang.SuppressWarnings";
	"spoon.processing.AbstractProcessor" -> "E";
	"spoon.processing.AbstractProcessor" -> "spoon.compiler.Environment";
	"spoon.processing.AbstractProcessor" -> "spoon.processing.ProcessorProperties";
	"spoon.processing.AbstractProcessor" -> "java.io.FileNotFoundException";
	"spoon.processing.AbstractProcessor" -> "java.io.IOException";
	"spoon.processing.AbstractProcessor" -> "spoon.processing.Severity";
	"spoon.processing.AbstractProcessor" -> "org.apache.log4j.Logger";
	"spoon.processing.AbstractProcessor" -> "java.lang.Throwable";
	"spoon.processing.AbstractProcessor" -> "org.apache.log4j.Category";
	"spoon.processing.AbstractProcessor" -> "java.lang.Exception";
	"spoon.processing.AbstractProcessor" -> "spoon.processing.TraversalStrategy";
	"spoon.processing.AbstractProcessor" -> "java.lang.reflect.Field";
	"spoon.processing.AbstractProcessor" -> "spoon.support.util.RtHelper";
	"spoon.processing.AbstractProcessor" -> "spoon.processing.Property";
	"spoon.processing.AbstractProcessor" -> "java.lang.reflect.AccessibleObject";
	"javax.swing.JTable" [color=grey];
	"spoon.reflect.visitor.CtInheritanceScanner" -> "java.lang.Object";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "java.lang.Comparable";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtCase";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "java.lang.Iterable";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtSwitch";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.template.TemplateParameter";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtReturn";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtEnum";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtAssignment";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtAssert";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtConditional";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtField";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtInterface";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtInvocation";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtLiteral";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtMethod";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtNewArray";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtNewClass";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtParameter";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtThisAccess";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "java.util.Collection";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtLoop";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.ModifierKind";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "java.util.Set";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtBreak";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtCatch";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtContinue";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtDo";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtFor";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtForEach";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtIf";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtSynchronized";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtThrow";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtTry";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.reflect.visitor.CtInheritanceScanner" -> "spoon.reflect.code.CtWhile";
	"java.awt.BorderLayout" [color=grey];
	"spoon.reflect.visitor.ReferenceFilter" -> "T";
	"spoon.reflect.visitor.ReferenceFilter" -> "java.lang.Class";
	"org.eclipse.jdt.internal.compiler.ast.ArrayInitializer" [color=grey];
	"org.eclipse.jdt.internal.compiler.env.ICompilationUnit" [color=grey];
	"spoon.processing.AbstractProblemFixer" -> "spoon.reflect.factory.Factory";
	"spoon.processing.AbstractProblemFixer" -> "java.lang.Object";
	"spoon.processing.AbstractProblemFixer" -> "spoon.processing.ProblemFixer";
	"spoon.processing.AbstractProblemFixer" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtUnaryOperator" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.code.CtUnaryOperator" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtUnaryOperator" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtUnaryOperator" -> "java.lang.Comparable";
	"spoon.reflect.code.CtUnaryOperator" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.code.CtUnaryOperator" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.code.CtUnaryOperator" -> "spoon.template.TemplateParameter";
	"spoon.reflect.code.CtUnaryOperator" -> "spoon.reflect.code.UnaryOperatorKind";
	"spoon.support.gui.SpoonModelTree" -> "java.util.Enumeration";
	"spoon.support.gui.SpoonModelTree" -> "spoon.reflect.factory.Factory";
	"spoon.support.gui.SpoonModelTree" -> "javax.swing.JPanel";
	"spoon.support.gui.SpoonModelTree" -> "javax.swing.JScrollPane";
	"spoon.support.gui.SpoonModelTree" -> "javax.swing.JTree";
	"spoon.support.gui.SpoonModelTree" -> "javax.swing.JPopupMenu";
	"spoon.support.gui.SpoonModelTree" -> "javax.swing.tree.DefaultMutableTreeNode";
	"spoon.support.gui.SpoonModelTree" -> "java.lang.String";
	"spoon.support.gui.SpoonModelTree" -> "javax.swing.JFrame";
	"spoon.support.gui.SpoonModelTree" -> "spoon.support.gui.SpoonTreeBuilder";
	"spoon.support.gui.SpoonModelTree" -> "spoon.reflect.visitor.CtScanner";
	"spoon.support.gui.SpoonModelTree" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.support.gui.SpoonModelTree" -> "spoon.reflect.declaration.CtPackage";
	"spoon.support.gui.SpoonModelTree" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.gui.SpoonModelTree" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.gui.SpoonModelTree" -> "java.lang.Comparable";
	"spoon.support.gui.SpoonModelTree" -> "spoon.processing.FactoryAccessor";
	"spoon.support.gui.SpoonModelTree" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.gui.SpoonModelTree" -> "spoon.reflect.factory.PackageFactory";
	"spoon.support.gui.SpoonModelTree" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.gui.SpoonModelTree" -> "java.io.Serializable";
	"spoon.support.gui.SpoonModelTree" -> "java.util.Collection";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.event.KeyListener";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.event.MouseListener";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.GridLayout";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.Container";
	"spoon.support.gui.SpoonModelTree" -> "javax.swing.JMenuItem";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.event.ActionListener";
	"spoon.support.gui.SpoonModelTree" -> "javax.swing.AbstractButton";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.Component";
	"spoon.support.gui.SpoonModelTree" -> "java.lang.Object";
	"spoon.support.gui.SpoonModelTree" -> "javax.swing.JOptionPane";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.Window";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.GraphicsConfiguration";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.GraphicsDevice";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.DisplayMode";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.Frame";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.event.KeyEvent";
	"spoon.support.gui.SpoonModelTree" -> "spoon.support.gui.SpoonObjectFieldsTable";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.event.MouseEvent";
	"spoon.support.gui.SpoonModelTree" -> "java.awt.event.ComponentEvent";
	"spoon.support.gui.SpoonModelTree" -> "java.lang.reflect.Array";
	"spoon.support.gui.SpoonModelTree" -> "javax.swing.tree.TreePath";
	"java.io.FileInputStream" [color=grey];
	"spoon.support.reflect.code.CtThisAccessImpl" -> "spoon.support.reflect.code.CtExpressionImpl";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "spoon.support.reflect.code.CtCodeElementImpl";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "java.io.Serializable";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "spoon.reflect.code.CtExpression";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "spoon.reflect.code.CtThisAccess";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "java.lang.Override";
	"spoon.support.reflect.code.CtThisAccessImpl" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "java.lang.Comparable";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.code.CtInvocation";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.template.TemplateParameter";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.visitor.filter.AbstractFilter";
	"spoon.reflect.visitor.filter.InvocationFilter" -> "spoon.reflect.visitor.Filter";
	"java.lang.StringBuffer" [color=grey];
	"spoon.reflect.factory.CompilationUnitFactory" -> "java.util.TreeMap";
	"spoon.reflect.factory.CompilationUnitFactory" -> "java.util.Map";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.factory.Factory";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.factory.SubFactory";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.factory.CoreFactory";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.cu.CompilationUnit";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.factory.CompilationUnitFactory" -> "java.lang.String";
	"spoon.reflect.factory.CompilationUnitFactory" -> "java.io.File";
	"spoon.reflect.factory.CompilationUnitFactory" -> "java.lang.Class";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.factory.TypeFactory";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.factory.CompilationUnitFactory" -> "java.lang.Comparable";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.support.reflect.cu.ImportImpl";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.cu.Import";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.factory.CompilationUnitFactory" -> "spoon.reflect.reference.CtPackageReference";
	"org.eclipse.jdt.internal.compiler.env.INameEnvironment" [color=grey];
	"spoon.reflect.code.CtStatementList" -> "java.util.List";
	"spoon.reflect.code.CtStatementList" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.code.CtStatementList" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.code.CtStatementList" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.code.CtStatementList" -> "java.lang.Comparable";
	"spoon.reflect.code.CtStatementList" -> "spoon.processing.FactoryAccessor";
	"spoon.template.TypedStatementListTemplateParameter" -> "java.lang.Object";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.template.TemplateParameter";
	"spoon.template.TypedStatementListTemplateParameter" -> "R";
	"spoon.template.TypedStatementListTemplateParameter" -> "java.lang.Throwable";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.declaration.CtElement";
	"spoon.template.TypedStatementListTemplateParameter" -> "java.lang.Comparable";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.processing.FactoryAccessor";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.declaration.CtClass";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.code.CtStatement";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.code.CtCodeElement";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.declaration.CtType";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.code.CtBlock";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.code.CtStatementList";
	"spoon.template.TypedStatementListTemplateParameter" -> "java.lang.Iterable";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.factory.Factory";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.factory.ClassFactory";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.factory.TypeFactory";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.factory.SubFactory";
	"spoon.template.TypedStatementListTemplateParameter" -> "java.lang.Class";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.factory.CoreFactory";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.template.Template";
	"spoon.template.TypedStatementListTemplateParameter" -> "java.lang.String";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.declaration.CtMethod";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.template.TypedStatementListTemplateParameter" -> "spoon.template.Substitution";
	"spoon.template.TypedStatementListTemplateParameter" -> "java.util.List";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.code.CtBlock";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.code.CtStatement";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "java.lang.Comparable";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.code.CtStatementList";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "java.lang.Iterable";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.template.TemplateParameter";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.support.reflect.declaration.CtElementImpl";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "java.util.List";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "java.io.Serializable";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "java.util.Set";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.support.reflect.declaration.CtNamedElementImpl";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "java.lang.String";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "java.lang.SuppressWarnings";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.reference.CtReference";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "java.util.ArrayList";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.declaration.CtParameter";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.declaration.CtVariable";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "java.util.TreeSet";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.factory.Factory";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.factory.ExecutableFactory";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.factory.SubFactory";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.reflect.declaration.CtExecutableImpl" -> "java.lang.Override";
	"java.net.URI" [color=grey];
	"spoon.support.reflect.cu.CtLineElementComparator" -> "java.lang.Object";
	"spoon.support.reflect.cu.CtLineElementComparator" -> "java.util.Comparator";
	"spoon.support.reflect.cu.CtLineElementComparator" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.reflect.cu.CtLineElementComparator" -> "java.lang.Comparable";
	"spoon.support.reflect.cu.CtLineElementComparator" -> "spoon.processing.FactoryAccessor";
	"spoon.support.reflect.cu.CtLineElementComparator" -> "spoon.reflect.cu.SourcePosition";
	"spoon.support.reflect.cu.CtLineElementComparator" -> "java.lang.Integer";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "java.lang.Object";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.visitor.CtVisitor";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtAnnotation";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "java.lang.Comparable";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtAnnotationType";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtSimpleType";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtBlock";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtStatementList";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "java.lang.Iterable";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.template.TemplateParameter";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtReturn";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtCFlowBreak";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtCase";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtSwitch";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtEnum";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtClass";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtType";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtGenericElement";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtAssignment";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtExpression";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtOperatorAssignment";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtArrayAccess";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtAnnotationFieldAccess";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtVariableAccess";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.reference.CtArrayTypeReference";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.reference.CtReference";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtAssert";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtBinaryOperator";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtCodeSnippetExpression";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtCodeSnippet";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtConditional";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtConstructor";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtExecutable";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtField";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.reference.CtFieldReference";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.reference.CtVariableReference";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtInterface";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtInvocation";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtLiteral";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.reference.CtLocalVariableReference";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtMethod";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtNewArray";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtNewClass";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtParameter";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.reference.CtParameterReference";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtTargetedAccess";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtUnaryOperator";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "java.util.Collection";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtAnonymousExecutable";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtBreak";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtCatch";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtCodeSnippetStatement";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtContinue";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtDo";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtLoop";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtFor";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtForEach";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtIf";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtPackage";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.reference.CtPackageReference";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtSynchronized";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtThrow";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtTry";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.declaration.CtTypeParameter";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.reference.CtTypeParameterReference";
	"spoon.reflect.visitor.CtAbstractVisitor" -> "spoon.reflect.code.CtWhile";
	"java.net.URL" [color=grey];
	"org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding" [color=grey];
	"spoon.reflect.visitor.filter.RegexFilter" -> "java.util.regex.Pattern";
	"spoon.reflect.visitor.filter.RegexFilter" -> "java.lang.String";
	"spoon.reflect.visitor.filter.RegexFilter" -> "java.lang.Object";
	"spoon.reflect.visitor.filter.RegexFilter" -> "java.lang.IllegalArgumentException";
	"spoon.reflect.visitor.filter.RegexFilter" -> "spoon.reflect.visitor.Filter";
	"spoon.reflect.visitor.filter.RegexFilter" -> "E";
	"spoon.reflect.visitor.filter.RegexFilter" -> "java.util.regex.Matcher";
	"spoon.reflect.visitor.filter.RegexFilter" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.visitor.filter.RegexFilter" -> "java.lang.Comparable";
	"spoon.reflect.visitor.filter.RegexFilter" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.visitor.filter.RegexFilter" -> "java.lang.Class";
	"spoon.OutputType" -> "java.lang.String";
	"spoon.OutputType" -> "java.lang.Override";
	"spoon.support.compiler.jdt.JDTBatchCompiler$" -> "java.lang.Object";
	"spoon.support.compiler.jdt.JDTBatchCompiler$" -> "org.eclipse.jdt.internal.compiler.ICompilerRequestor";
	"spoon.support.compiler.jdt.JDTBatchCompiler$" -> "org.eclipse.jdt.internal.compiler.CompilationResult";
	"spoon.support.compiler.jdt.JDTBatchCompiler$" -> "spoon.support.compiler.jdt.JDTBatchCompiler";
	"spoon.support.compiler.jdt.JDTBatchCompiler$" -> "org.eclipse.jdt.internal.compiler.batch.Main";
	"spoon.support.compiler.jdt.JDTBatchCompiler$" -> "spoon.support.compiler.jdt.JDTBasedSpoonCompiler";
	"spoon.support.compiler.jdt.JDTBatchCompiler$" -> "spoon.compiler.SpoonCompiler";
	"spoon.support.compiler.jdt.JDTBatchCompiler$" -> "spoon.processing.FactoryAccessor";
	"spoon.support.compiler.jdt.JDTBatchCompiler$" -> "java.util.List";
	"spoon.support.compiler.jdt.JDTBatchCompiler$" -> "java.lang.reflect.Array";
	"spoon.reflect.reference.CtLocalVariableReference" -> "spoon.reflect.code.CtLocalVariable";
	"spoon.reflect.reference.CtLocalVariableReference" -> "spoon.reflect.code.CtStatement";
	"spoon.reflect.reference.CtLocalVariableReference" -> "spoon.reflect.code.CtCodeElement";
	"spoon.reflect.reference.CtLocalVariableReference" -> "spoon.reflect.declaration.CtElement";
	"spoon.reflect.reference.CtLocalVariableReference" -> "java.lang.Comparable";
	"spoon.reflect.reference.CtLocalVariableReference" -> "spoon.processing.FactoryAccessor";
	"spoon.reflect.reference.CtLocalVariableReference" -> "spoon.reflect.declaration.CtVariable";
	"spoon.reflect.reference.CtLocalVariableReference" -> "spoon.reflect.declaration.CtNamedElement";
	"spoon.reflect.reference.CtLocalVariableReference" -> "spoon.reflect.declaration.CtModifiable";
	"spoon.reflect.reference.CtLocalVariableReference" -> "spoon.reflect.declaration.CtTypedElement";
	"java.awt.Container" [color=grey];
	"spoon.processing.AbstractManualProcessor" -> "spoon.reflect.factory.Factory";
	"spoon.processing.AbstractManualProcessor" -> "java.lang.Object";
	"spoon.processing.AbstractManualProcessor" -> "spoon.processing.Processor";
	"spoon.processing.AbstractManualProcessor" -> "spoon.processing.FactoryAccessor";
	"spoon.processing.AbstractManualProcessor" -> "spoon.reflect.declaration.CtElement";
	"spoon.processing.AbstractManualProcessor" -> "java.lang.Comparable";
	"spoon.processing.AbstractManualProcessor" -> "java.util.Set";
	"spoon.processing.AbstractManualProcessor" -> "spoon.compiler.Environment";
	"spoon.processing.AbstractManualProcessor" -> "spoon.processing.TraversalStrategy";
	"spoon.processing.AbstractManualProcessor" -> "java.lang.Class";
	"spoon.processing.AbstractManualProcessor" -> "spoon.processing.ProcessorProperties";
	"spoon.processing.AbstractManualProcessor" -> "spoon.processing.AbstractProcessor";
	"spoon.support.util.RtHelper" -> "java.lang.Object";
	"spoon.support.util.RtHelper" -> "java.lang.String";
	"spoon.support.util.RtHelper" -> "spoon.reflect.code.CtInvocation";
	"spoon.support.util.RtHelper" -> "spoon.reflect.code.CtAbstractInvocation";
	"spoon.support.util.RtHelper" -> "spoon.reflect.declaration.CtElement";
	"spoon.support.util.RtHelper" -> "java.lang.Comparable";
	"spoon.support.util.RtHelper" -> "spoon.processing.FactoryAccessor";
	"spoon.support.util.RtHelper" -> "spoon.reflect.code.CtStatement";
	"spoon.support.util.RtHelper" -> "spoon.reflect.code.CtCodeElement";
	"spoon.support.util.RtHelper" -> "spoon.reflect.code.CtTargetedExpression";
	"spoon.support.util.RtHelper" -> "spoon.reflect.code.CtExpression";
	"spoon.support.util.RtHelper" -> "spoon.reflect.declaration.CtTypedElement";
	"spoon.support.util.RtHelper" -> "spoon.template.TemplateParameter";
	"spoon.support.util.RtHelper" -> "spoon.reflect.code.CtLiteral";
	"spoon.support.util.RtHelper" -> "java.util.ArrayList";
	"spoon.support.util.RtHelper" -> "java.util.List";
	"spoon.support.util.RtHelper" -> "spoon.reflect.reference.CtExecutableReference";
	"spoon.support.util.RtHelper" -> "spoon.reflect.reference.CtGenericElementReference";
	"spoon.support.util.RtHelper" -> "spoon.reflect.reference.CtReference";
	"spoon.support.util.RtHelper" -> "spoon.reflect.reference.CtTypeReference";
	"spoon.support.util.RtHelper" -> "java.lang.Class";
	"spoon.support.util.RtHelper" -> "java.lang.reflect.Array";
	"spoon.support.util.RtHelper" -> "java.lang.reflect.Method";
	"spoon.support.util.RtHelper" -> "java.lang.SuppressWarnings";
	"spoon.support.util.RtHelper" -> "java.lang.IllegalAccessException";
	"spoon.support.util.RtHelper" -> "java.lang.NoSuchMethodException";
	"spoon.support.util.RtHelper" -> "java.lang.reflect.InvocationTargetException";
	"spoon.support.util.RtHelper" -> "T";
	"spoon.support.util.RtHelper" -> "java.lang.reflect.Field";
	"spoon.support.util.RtHelper" -> "java.util.TreeSet";
	"spoon.support.util.RtHelper" -> "java.util.Set";
	"spoon.support.util.RtHelper" -> "java.lang.reflect.Modifier";
	"spoon.support.util.RtHelper" -> "spoon.reflect.declaration.ModifierKind";
	"java.util.Queue" [color=grey];
	"spoon.reflect.Changes" -> "java.util.List";
	"spoon.reflect.Changes" -> "java.lang.Object";
	"spoon.reflect.Changes" -> "java.util.ArrayList";
	subgraph cluster0 { 
		rankdir=LR;label="javax.swing";
		"javax.swing.JPopupMenu" [label="JPopupMenu"]
		"javax.swing.AbstractButton" [label="AbstractButton"]
	subgraph cluster1 { 
		rankdir=LR;label="javax.swing.tree";
		"javax.swing.tree.DefaultMutableTreeNode" [label="DefaultMutableTreeNode"]
		"javax.swing.tree.TreePath" [label="TreePath"]
	};
		"javax.swing.JFrame" [label="JFrame"]
		"javax.swing.JScrollPane" [label="JScrollPane"]
		"javax.swing.JFileChooser" [label="JFileChooser"]
		"javax.swing.JMenuItem" [label="JMenuItem"]
		"javax.swing.JPanel" [label="JPanel"]
		"javax.swing.JOptionPane" [label="JOptionPane"]
	subgraph cluster2 { 
		rankdir=LR;label="javax.swing.table";
		"javax.swing.table.AbstractTableModel" [label="AbstractTableModel"]
	};
		"javax.swing.JTree" [label="JTree"]
		"javax.swing.JTable" [label="JTable"]
	};
	subgraph cluster3 { 
		rankdir=LR;label="javax.xml.parsers";
		"javax.xml.parsers.DocumentBuilderFactory" [label="DocumentBuilderFactory"]
		"javax.xml.parsers.DocumentBuilder" [label="DocumentBuilder"]
		"javax.xml.parsers.ParserConfigurationException" [label="ParserConfigurationException"]
	};
	subgraph cluster4 { 
		rankdir=LR;label="spoon";
	subgraph cluster5 { 
		rankdir=LR;label="spoon.support";
	subgraph cluster6 { 
		rankdir=LR;label="spoon.support.reflect.code";
		"spoon.support.reflect.code.CtAssertImpl" [label="CtAssertImpl"]
		"spoon.support.reflect.code.CtCodeSnippetStatementImpl" [label="CtCodeSnippetStatementImpl"]
		"spoon.support.reflect.code.CtCaseImpl" [label="CtCaseImpl"]
		"spoon.support.reflect.code.CtWhileImpl" [label="CtWhileImpl"]
		"spoon.support.reflect.code.CtArrayAccessImpl" [label="CtArrayAccessImpl"]
		"spoon.support.reflect.code.CtLiteralImpl" [label="CtLiteralImpl"]
		"spoon.support.reflect.code.CtNewArrayImpl" [label="CtNewArrayImpl"]
		"spoon.support.reflect.code.CtLocalVariableImpl" [label="CtLocalVariableImpl"]
		"spoon.support.reflect.code.CtStatementListImpl" [label="CtStatementListImpl"]
		"spoon.support.reflect.code.CtInvocationImpl" [label="CtInvocationImpl"]
		"spoon.support.reflect.code.CtSynchronizedImpl" [label="CtSynchronizedImpl"]
		"spoon.support.reflect.code.CtCatchImpl" [label="CtCatchImpl"]
		"spoon.support.reflect.code.CtConditionalImpl" [label="CtConditionalImpl"]
		"spoon.support.reflect.code.CtExpressionImpl" [label="CtExpressionImpl"]
		"spoon.support.reflect.code.CtStatementImpl" [label="CtStatementImpl"]
		"spoon.support.reflect.code.CtBreakImpl" [label="CtBreakImpl"]
		"spoon.support.reflect.code.CtTargetedAccessImpl" [label="CtTargetedAccessImpl"]
		"spoon.support.reflect.code.CtNewClassImpl" [label="CtNewClassImpl"]
		"spoon.support.reflect.code.CtForImpl" [label="CtForImpl"]
		"spoon.support.reflect.code.CtReturnImpl" [label="CtReturnImpl"]
		"spoon.support.reflect.code.CtSwitchImpl" [label="CtSwitchImpl"]
		"spoon.support.reflect.code.CtVariableAccessImpl" [label="CtVariableAccessImpl"]
		"spoon.support.reflect.code.CtUnaryOperatorImpl" [label="CtUnaryOperatorImpl"]
		"spoon.support.reflect.code.CtCodeElementImpl" [label="CtCodeElementImpl"]
		"spoon.support.reflect.code.CtFieldAccessImpl" [label="CtFieldAccessImpl"]
		"spoon.support.reflect.code.CtCodeSnippetExpressionImpl" [label="CtCodeSnippetExpressionImpl"]
		"spoon.support.reflect.code.CtBinaryOperatorImpl" [label="CtBinaryOperatorImpl"]
		"spoon.support.reflect.code.CtSuperAccessImpl" [label="CtSuperAccessImpl"]
		"spoon.support.reflect.code.CtContinueImpl" [label="CtContinueImpl"]
		"spoon.support.reflect.code.CtTryImpl" [label="CtTryImpl"]
		"spoon.support.reflect.code.CtThrowImpl" [label="CtThrowImpl"]
		"spoon.support.reflect.code.CtForEachImpl" [label="CtForEachImpl"]
		"spoon.support.reflect.code.CtLoopImpl" [label="CtLoopImpl"]
		"spoon.support.reflect.code.CtBlockImpl" [label="CtBlockImpl"]
		"spoon.support.reflect.code.CtAssignmentImpl" [label="CtAssignmentImpl"]
		"spoon.support.reflect.code.CtTargetedExpressionImpl" [label="CtTargetedExpressionImpl"]
		"spoon.support.reflect.code.CtDoImpl" [label="CtDoImpl"]
		"spoon.support.reflect.code.CtIfImpl" [label="CtIfImpl"]
		"spoon.support.reflect.code.CtAnnotationFieldAccesImpl" [label="CtAnnotationFieldAccesImpl"]
		"spoon.support.reflect.code.CtOperatorAssignmentImpl" [label="CtOperatorAssignmentImpl"]
		"spoon.support.reflect.code.CtThisAccessImpl" [label="CtThisAccessImpl"]
	};
	subgraph cluster7 { 
		rankdir=LR;label="spoon.support.reflect.reference";
		"spoon.support.reflect.reference.CtParameterReferenceImpl" [label="CtParameterReferenceImpl"]
		"spoon.support.reflect.reference.CtExecutableReferenceImpl" [label="CtExecutableReferenceImpl"]
		"spoon.support.reflect.reference.CtTypeParameterReferenceImpl" [label="CtTypeParameterReferenceImpl"]
		"spoon.support.reflect.reference.CtTypeReferenceImpl" [label="CtTypeReferenceImpl"]
		"spoon.support.reflect.reference.CtReferenceImpl" [label="CtReferenceImpl"]
		"spoon.support.reflect.reference.CtFieldReferenceImpl" [label="CtFieldReferenceImpl"]
		"spoon.support.reflect.reference.CtLocalVariableReferenceImpl" [label="CtLocalVariableReferenceImpl"]
		"spoon.support.reflect.reference.CtArrayTypeReferenceImpl" [label="CtArrayTypeReferenceImpl"]
		"spoon.support.reflect.reference.CtPackageReferenceImpl" [label="CtPackageReferenceImpl"]
		"spoon.support.reflect.reference.CtVariableReferenceImpl" [label="CtVariableReferenceImpl"]
	};
	subgraph cluster8 { 
		rankdir=LR;label="spoon.support.reflect.cu";
		"spoon.support.reflect.cu.CompilationUnitImpl" [label="CompilationUnitImpl"]
		"spoon.support.reflect.cu.SourcePositionImpl" [label="SourcePositionImpl"]
		"spoon.support.reflect.cu.ImportImpl" [label="ImportImpl"]
		"spoon.support.reflect.cu.CtLineElementComparator" [label="CtLineElementComparator"]
	};
	subgraph cluster9 { 
		rankdir=LR;label="spoon.support.reflect.declaration";
		"spoon.support.reflect.declaration.CtTypeParameterImpl" [label="CtTypeParameterImpl"]
		"spoon.support.reflect.declaration.CtAnnotationImpl" [label="CtAnnotationImpl"]
		"spoon.support.reflect.declaration.CtFieldImpl" [label="CtFieldImpl"]
		"spoon.support.reflect.declaration.CtConstructorImpl" [label="CtConstructorImpl"]
		"spoon.support.reflect.declaration.CompilationUnitVirtualImpl" [label="CompilationUnitVirtualImpl"]
		"spoon.support.reflect.declaration.CtAnnotationTypeImpl" [label="CtAnnotationTypeImpl"]
		"spoon.support.reflect.declaration.CtInterfaceImpl" [label="CtInterfaceImpl"]
		"spoon.support.reflect.declaration.CtParameterImpl" [label="CtParameterImpl"]
		"spoon.support.reflect.declaration.CtElementImpl" [label="CtElementImpl"]
		"spoon.support.reflect.declaration.CtPackageImpl" [label="CtPackageImpl"]
		"spoon.support.reflect.declaration.CtAnnotationImpl$AnnotationInvocationHandler" [label="CtAnnotationImpl$AnnotationInvocationHandler"]
		"spoon.support.reflect.declaration.CtMethodImpl" [label="CtMethodImpl"]
		"spoon.support.reflect.declaration.CtElementImpl$" [label="CtElementImpl$"]
		"spoon.support.reflect.declaration.CtClassImpl" [label="CtClassImpl"]
		"spoon.support.reflect.declaration.CtUncomparableException" [label="CtUncomparableException"]
		"spoon.support.reflect.declaration.CtSimpleTypeImpl" [label="CtSimpleTypeImpl"]
		"spoon.support.reflect.declaration.CtSimpleTypeImpl$NestedTypeScanner" [label="CtSimpleTypeImpl$NestedTypeScanner"]
		"spoon.support.reflect.declaration.CtEnumImpl" [label="CtEnumImpl"]
		"spoon.support.reflect.declaration.CtAnonymousExecutableImpl" [label="CtAnonymousExecutableImpl"]
		"spoon.support.reflect.declaration.CtAnnotationImpl$" [label="CtAnnotationImpl$"]
		"spoon.support.reflect.declaration.CtTypeImpl" [label="CtTypeImpl"]
		"spoon.support.reflect.declaration.CtNamedElementImpl" [label="CtNamedElementImpl"]
		"spoon.support.reflect.declaration.CtExecutableImpl" [label="CtExecutableImpl"]
	};
	subgraph cluster10 { 
		rankdir=LR;label="spoon.support.reflect.eval";
		"spoon.support.reflect.eval.VisitorSymbolicEvaluator" [label="VisitorSymbolicEvaluator"]
		"spoon.support.reflect.eval.SymbolicWrappedException" [label="SymbolicWrappedException"]
		"spoon.support.reflect.eval.VisitorSymbolicEvaluator$BranchingPoint" [label="VisitorSymbolicEvaluator$BranchingPoint"]
		"spoon.support.reflect.eval.VisitorPartialEvaluator" [label="VisitorPartialEvaluator"]
		"spoon.support.reflect.eval.ReturnException" [label="ReturnException"]
	};
	subgraph cluster11 { 
		rankdir=LR;label="spoon.support.template";
		"spoon.support.template.SubstitutionVisitor" [label="SubstitutionVisitor"]
		"spoon.support.template.Parameters$" [label="Parameters$"]
		"spoon.support.template.DefaultParameterMatcher" [label="DefaultParameterMatcher"]
		"spoon.support.template.Parameters" [label="Parameters"]
		"spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner" [label="SubstitutionVisitor$InheritanceSustitutionScanner"]
		"spoon.support.template.SkipException" [label="SkipException"]
		"spoon.support.template.ParameterMatcher" [label="ParameterMatcher"]
		"spoon.support.template.UndefinedParameterException" [label="UndefinedParameterException"]
	};
	subgraph cluster12 { 
		rankdir=LR;label="spoon.support.visitor";
		"spoon.support.visitor.SignaturePrinter" [label="SignaturePrinter"]
		"spoon.support.visitor.TypeReferenceScanner" [label="TypeReferenceScanner"]
		"spoon.support.visitor.ProcessingVisitor" [label="ProcessingVisitor"]
	};
	subgraph cluster13 { 
		rankdir=LR;label="spoon.support.compiler";
	subgraph cluster14 { 
		rankdir=LR;label="spoon.support.compiler.jdt";
		"spoon.support.compiler.jdt.JDTBasedSpoonCompiler" [label="JDTBasedSpoonCompiler"]
		"spoon.support.compiler.jdt.TreeBuilderCompiler" [label="TreeBuilderCompiler"]
		"spoon.support.compiler.jdt.TreeBuilderRequestor" [label="TreeBuilderRequestor"]
		"spoon.support.compiler.jdt.JDTTreeBuilder$" [label="JDTTreeBuilder$"]
		"spoon.support.compiler.jdt.JDTTreeBuilder$BuilderContext" [label="JDTTreeBuilder$BuilderContext"]
		"spoon.support.compiler.jdt.JDTTreeBuilder" [label="JDTTreeBuilder"]
		"spoon.support.compiler.jdt.CompilerClassLoader" [label="CompilerClassLoader"]
		"spoon.support.compiler.jdt.CompilationUnitWrapper" [label="CompilationUnitWrapper"]
		"spoon.support.compiler.jdt.ParentExiter" [label="ParentExiter"]
		"spoon.support.compiler.jdt.JDTTreeBuilder$ReferenceBuilder" [label="JDTTreeBuilder$ReferenceBuilder"]
		"spoon.support.compiler.jdt.JDTBatchCompiler" [label="JDTBatchCompiler"]
		"spoon.support.compiler.jdt.JDTTreeBuilder$ASTPair" [label="JDTTreeBuilder$ASTPair"]
		"spoon.support.compiler.jdt.JDTSnippetCompiler" [label="JDTSnippetCompiler"]
		"spoon.support.compiler.jdt.JDTBatchCompiler$" [label="JDTBatchCompiler$"]
	};
		"spoon.support.compiler.SnippetCompilationError" [label="SnippetCompilationError"]
		"spoon.support.compiler.ZipFolder" [label="ZipFolder"]
		"spoon.support.compiler.VirtualFile" [label="VirtualFile"]
		"spoon.support.compiler.SnippetCompilationHelper$" [label="SnippetCompilationHelper$"]
		"spoon.support.compiler.SnippetCompilationHelper" [label="SnippetCompilationHelper"]
		"spoon.support.compiler.FileSystemFolder" [label="FileSystemFolder"]
		"spoon.support.compiler.VirtualFolder" [label="VirtualFolder"]
		"spoon.support.compiler.ZipFile" [label="ZipFile"]
		"spoon.support.compiler.FileSystemFile" [label="FileSystemFile"]
	};
	subgraph cluster15 { 
		rankdir=LR;label="spoon.support.util";
		"spoon.support.util.BasicCompilationUnit" [label="BasicCompilationUnit"]
		"spoon.support.util.NotDirectlyModifiableList" [label="NotDirectlyModifiableList"]
		"spoon.support.util.SortedList" [label="SortedList"]
		"spoon.support.util.Timer" [label="Timer"]
		"spoon.support.util.NotDirectlyModifiableSet" [label="NotDirectlyModifiableSet"]
		"spoon.support.util.RtHelper" [label="RtHelper"]
	};
		"spoon.support.QueueProcessingManager" [label="QueueProcessingManager"]
		"spoon.support.StandardEnvironment" [label="StandardEnvironment"]
	subgraph cluster16 { 
		rankdir=LR;label="spoon.support.processing";
		"spoon.support.processing.SpoonletXmlHandler" [label="SpoonletXmlHandler"]
		"spoon.support.processing.XmlProcessorProperties$Loader" [label="XmlProcessorProperties$Loader"]
		"spoon.support.processing.XmlProcessorProperties" [label="XmlProcessorProperties"]
	};
		"spoon.support.SerializationModelStreamer" [label="SerializationModelStreamer"]
		"spoon.support.JavaOutputProcessor" [label="JavaOutputProcessor"]
		"spoon.support.DefaultCoreFactory" [label="DefaultCoreFactory"]
	subgraph cluster17 { 
		rankdir=LR;label="spoon.support.gui";
		"spoon.support.gui.SpoonTreeBuilder$" [label="SpoonTreeBuilder$"]
		"spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel" [label="SpoonObjectFieldsTable$SpoonObjectTableModel"]
		"spoon.support.gui.SpoonObjectFieldsTable" [label="SpoonObjectFieldsTable"]
		"spoon.support.gui.SpoonModelTree$" [label="SpoonModelTree$"]
		"spoon.support.gui.SpoonTreeBuilder" [label="SpoonTreeBuilder"]
		"spoon.support.gui.SpoonModelTree" [label="SpoonModelTree"]
	};
		"spoon.support.SerializationModelStreamer$" [label="SerializationModelStreamer$"]
		"spoon.support.RuntimeProcessingManager" [label="RuntimeProcessingManager"]
	};
	subgraph cluster18 { 
		rankdir=LR;label="spoon.reflect";
	subgraph cluster19 { 
		rankdir=LR;label="spoon.reflect.code";
		"spoon.reflect.code.CtTargetedAccess" [label="CtTargetedAccess"]
		"spoon.reflect.code.CtCodeElement" [label="CtCodeElement"]
		"spoon.reflect.code.CtAssert" [label="CtAssert"]
		"spoon.reflect.code.CtContinue" [label="CtContinue"]
		"spoon.reflect.code.CtNewArray" [label="CtNewArray"]
		"spoon.reflect.code.CtDo" [label="CtDo"]
		"spoon.reflect.code.CtCase" [label="CtCase"]
		"spoon.reflect.code.CtCatch" [label="CtCatch"]
		"spoon.reflect.code.CtInvocation" [label="CtInvocation"]
		"spoon.reflect.code.CtThrow" [label="CtThrow"]
		"spoon.reflect.code.CtWhile" [label="CtWhile"]
		"spoon.reflect.code.CtAnnotationFieldAccess" [label="CtAnnotationFieldAccess"]
		"spoon.reflect.code.CtLiteral" [label="CtLiteral"]
		"spoon.reflect.code.CtVariableAccess" [label="CtVariableAccess"]
		"spoon.reflect.code.CtCFlowBreak" [label="CtCFlowBreak"]
		"spoon.reflect.code.CtAbstractInvocation" [label="CtAbstractInvocation"]
		"spoon.reflect.code.BinaryOperatorKind" [label="BinaryOperatorKind"]
		"spoon.reflect.code.CtNewClass" [label="CtNewClass"]
		"spoon.reflect.code.CtFieldAccess" [label="CtFieldAccess"]
		"spoon.reflect.code.CtIf" [label="CtIf"]
		"spoon.reflect.code.CtSwitch" [label="CtSwitch"]
		"spoon.reflect.code.CtSuperAccess" [label="CtSuperAccess"]
		"spoon.reflect.code.CtTry" [label="CtTry"]
		"spoon.reflect.code.CtSynchronized" [label="CtSynchronized"]
		"spoon.reflect.code.CtTargetedExpression" [label="CtTargetedExpression"]
		"spoon.reflect.code.CtLocalVariable" [label="CtLocalVariable"]
		"spoon.reflect.code.CtBreak" [label="CtBreak"]
		"spoon.reflect.code.CtCodeSnippetExpression" [label="CtCodeSnippetExpression"]
		"spoon.reflect.code.CtExpression" [label="CtExpression"]
		"spoon.reflect.code.CtStatement" [label="CtStatement"]
		"spoon.reflect.code.CtCodeSnippetStatement" [label="CtCodeSnippetStatement"]
		"spoon.reflect.code.CtReturn" [label="CtReturn"]
		"spoon.reflect.code.CtOperatorAssignment" [label="CtOperatorAssignment"]
		"spoon.reflect.code.CtBinaryOperator" [label="CtBinaryOperator"]
		"spoon.reflect.code.CtFor" [label="CtFor"]
		"spoon.reflect.code.CtAssignment" [label="CtAssignment"]
		"spoon.reflect.code.CtConditional" [label="CtConditional"]
		"spoon.reflect.code.CtThisAccess" [label="CtThisAccess"]
		"spoon.reflect.code.CtLoop" [label="CtLoop"]
		"spoon.reflect.code.CtArrayAccess" [label="CtArrayAccess"]
		"spoon.reflect.code.CtForEach" [label="CtForEach"]
		"spoon.reflect.code.UnaryOperatorKind" [label="UnaryOperatorKind"]
		"spoon.reflect.code.CtBlock" [label="CtBlock"]
		"spoon.reflect.code.CtUnaryOperator" [label="CtUnaryOperator"]
		"spoon.reflect.code.CtStatementList" [label="CtStatementList"]
	};
	subgraph cluster20 { 
		rankdir=LR;label="spoon.reflect.declaration";
		"spoon.reflect.declaration.CtAnonymousExecutable" [label="CtAnonymousExecutable"]
		"spoon.reflect.declaration.CtTypedElement" [label="CtTypedElement"]
		"spoon.reflect.declaration.CtVariable" [label="CtVariable"]
		"spoon.reflect.declaration.CtAnnotation" [label="CtAnnotation"]
		"spoon.reflect.declaration.CtMethod" [label="CtMethod"]
		"spoon.reflect.declaration.CtInterface" [label="CtInterface"]
		"spoon.reflect.declaration.CtNamedElement" [label="CtNamedElement"]
		"spoon.reflect.declaration.CtSimpleType" [label="CtSimpleType"]
		"spoon.reflect.declaration.ModifierKind" [label="ModifierKind"]
		"spoon.reflect.declaration.CtClass" [label="CtClass"]
		"spoon.reflect.declaration.CtExecutable" [label="CtExecutable"]
		"spoon.reflect.declaration.CtType" [label="CtType"]
		"spoon.reflect.declaration.CtCodeSnippet" [label="CtCodeSnippet"]
		"spoon.reflect.declaration.CtParameter" [label="CtParameter"]
		"spoon.reflect.declaration.CtElement" [label="CtElement"]
		"spoon.reflect.declaration.CtGenericElement" [label="CtGenericElement"]
		"spoon.reflect.declaration.CtModifiable" [label="CtModifiable"]
		"spoon.reflect.declaration.CtEnum" [label="CtEnum"]
		"spoon.reflect.declaration.CtPackage" [label="CtPackage"]
		"spoon.reflect.declaration.CtConstructor" [label="CtConstructor"]
		"spoon.reflect.declaration.ParentNotInitializedException" [label="ParentNotInitializedException"]
		"spoon.reflect.declaration.CtTypeParameter" [label="CtTypeParameter"]
		"spoon.reflect.declaration.CtField" [label="CtField"]
		"spoon.reflect.declaration.CtAnnotationType" [label="CtAnnotationType"]
	};
	subgraph cluster21 { 
		rankdir=LR;label="spoon.reflect.visitor";
	subgraph cluster22 { 
		rankdir=LR;label="spoon.reflect.visitor.filter";
		"spoon.reflect.visitor.filter.DirectReferenceFilter" [label="DirectReferenceFilter"]
		"spoon.reflect.visitor.filter.ReferenceTypeFilter" [label="ReferenceTypeFilter"]
		"spoon.reflect.visitor.filter.CompositeFilter" [label="CompositeFilter"]
		"spoon.reflect.visitor.filter.AnnotationFilter" [label="AnnotationFilter"]
		"spoon.reflect.visitor.filter.TypeFilter" [label="TypeFilter"]
		"spoon.reflect.visitor.filter.FieldAccessFilter" [label="FieldAccessFilter"]
		"spoon.reflect.visitor.filter.ReturnOrThrowFilter" [label="ReturnOrThrowFilter"]
		"spoon.reflect.visitor.filter.FilteringOperator" [label="FilteringOperator"]
		"spoon.reflect.visitor.filter.NameFilter" [label="NameFilter"]
		"spoon.reflect.visitor.filter.AbstractReferenceFilter" [label="AbstractReferenceFilter"]
		"spoon.reflect.visitor.filter.VariableAccessFilter" [label="VariableAccessFilter"]
		"spoon.reflect.visitor.filter.AbstractFilter" [label="AbstractFilter"]
		"spoon.reflect.visitor.filter.InvocationFilter" [label="InvocationFilter"]
		"spoon.reflect.visitor.filter.RegexFilter" [label="RegexFilter"]
	};
		"spoon.reflect.visitor.JavaIdentifiers" [label="JavaIdentifiers"]
		"spoon.reflect.visitor.Child" [label="Child"]
		"spoon.reflect.visitor.CtStackScanner" [label="CtStackScanner"]
		"spoon.reflect.visitor.Query" [label="Query"]
		"spoon.reflect.visitor.Filter" [label="Filter"]
		"spoon.reflect.visitor.FragmentDrivenJavaPrettyPrinter" [label="FragmentDrivenJavaPrettyPrinter"]
		"spoon.reflect.visitor.ModelConsistencyChecker" [label="ModelConsistencyChecker"]
		"spoon.reflect.visitor.DefaultJavaPrettyPrinter$Printingcontext" [label="DefaultJavaPrettyPrinter$Printingcontext"]
		"spoon.reflect.visitor.Parent" [label="Parent"]
		"spoon.reflect.visitor.Root" [label="Root"]
		"spoon.reflect.visitor.PrettyPrinter" [label="PrettyPrinter"]
		"spoon.reflect.visitor.DefaultJavaPrettyPrinter" [label="DefaultJavaPrettyPrinter"]
		"spoon.reflect.visitor.DefaultJavaPrettyPrinter$ImportScanner" [label="DefaultJavaPrettyPrinter$ImportScanner"]
		"spoon.reflect.visitor.ReferenceQueryVisitor" [label="ReferenceQueryVisitor"]
		"spoon.reflect.visitor.QueryVisitor" [label="QueryVisitor"]
		"spoon.reflect.visitor.CtScanner" [label="CtScanner"]
		"spoon.reflect.visitor.CtVisitor" [label="CtVisitor"]
		"spoon.reflect.visitor.CtInheritanceScanner" [label="CtInheritanceScanner"]
		"spoon.reflect.visitor.ReferenceFilter" [label="ReferenceFilter"]
		"spoon.reflect.visitor.CtAbstractVisitor" [label="CtAbstractVisitor"]
	};
	subgraph cluster23 { 
		rankdir=LR;label="spoon.reflect.factory";
		"spoon.reflect.factory.PackageFactory" [label="PackageFactory"]
		"spoon.reflect.factory.CodeFactory" [label="CodeFactory"]
		"spoon.reflect.factory.ConstructorFactory" [label="ConstructorFactory"]
		"spoon.reflect.factory.EvalFactory" [label="EvalFactory"]
		"spoon.reflect.factory.AnnotationFactory" [label="AnnotationFactory"]
		"spoon.reflect.factory.EnumFactory" [label="EnumFactory"]
		"spoon.reflect.factory.SubFactory" [label="SubFactory"]
		"spoon.reflect.factory.FactoryImpl" [label="FactoryImpl"]
		"spoon.reflect.factory.ClassFactory" [label="ClassFactory"]
		"spoon.reflect.factory.InterfaceFactory" [label="InterfaceFactory"]
		"spoon.reflect.factory.CoreFactory" [label="CoreFactory"]
		"spoon.reflect.factory.FieldFactory" [label="FieldFactory"]
		"spoon.reflect.factory.ExecutableFactory" [label="ExecutableFactory"]
		"spoon.reflect.factory.Factory" [label="Factory"]
		"spoon.reflect.factory.TypeFactory" [label="TypeFactory"]
		"spoon.reflect.factory.MethodFactory" [label="MethodFactory"]
		"spoon.reflect.factory.CompilationUnitFactory" [label="CompilationUnitFactory"]
	};
	subgraph cluster24 { 
		rankdir=LR;label="spoon.reflect.reference";
		"spoon.reflect.reference.CtGenericElementReference" [label="CtGenericElementReference"]
		"spoon.reflect.reference.CtParameterReference" [label="CtParameterReference"]
		"spoon.reflect.reference.CtFieldReference" [label="CtFieldReference"]
		"spoon.reflect.reference.CtExecutableReference" [label="CtExecutableReference"]
		"spoon.reflect.reference.CtReference" [label="CtReference"]
		"spoon.reflect.reference.CtAnnonTypeParameterReference" [label="CtAnnonTypeParameterReference"]
		"spoon.reflect.reference.CtPackageReference" [label="CtPackageReference"]
		"spoon.reflect.reference.CtVariableReference" [label="CtVariableReference"]
		"spoon.reflect.reference.CtTypeReference" [label="CtTypeReference"]
		"spoon.reflect.reference.CtTypeParameterReference" [label="CtTypeParameterReference"]
		"spoon.reflect.reference.CtArrayTypeReference" [label="CtArrayTypeReference"]
		"spoon.reflect.reference.CtLocalVariableReference" [label="CtLocalVariableReference"]
	};
		"spoon.reflect.ModelStreamer" [label="ModelStreamer"]
	subgraph cluster25 { 
		rankdir=LR;label="spoon.reflect.eval";
	subgraph cluster26 { 
		rankdir=LR;label="spoon.reflect.eval.observer";
		"spoon.reflect.eval.observer.SymbolicEvaluationPrinter" [label="SymbolicEvaluationPrinter"]
		"spoon.reflect.eval.observer.SymbolicEvaluationPathsMaker" [label="SymbolicEvaluationPathsMaker"]
	};
		"spoon.reflect.eval.SymbolicEvaluationPath" [label="SymbolicEvaluationPath"]
		"spoon.reflect.eval.PartialEvaluator" [label="PartialEvaluator"]
		"spoon.reflect.eval.SymbolicHeap" [label="SymbolicHeap"]
		"spoon.reflect.eval.SymbolicEvaluationStack" [label="SymbolicEvaluationStack"]
		"spoon.reflect.eval.SymbolicInstance" [label="SymbolicInstance"]
		"spoon.reflect.eval.SymbolicEvaluator" [label="SymbolicEvaluator"]
		"spoon.reflect.eval.SymbolicStackFrame" [label="SymbolicStackFrame"]
		"spoon.reflect.eval.SymbolicEvaluatorObserver" [label="SymbolicEvaluatorObserver"]
		"spoon.reflect.eval.SymbolicEvaluationStep" [label="SymbolicEvaluationStep"]
		"spoon.reflect.eval.StepKind" [label="StepKind"]
	};
	subgraph cluster27 { 
		rankdir=LR;label="spoon.reflect.cu";
		"spoon.reflect.cu.Import" [label="Import"]
		"spoon.reflect.cu.SourcePosition" [label="SourcePosition"]
		"spoon.reflect.cu.CompilationUnit" [label="CompilationUnit"]
		"spoon.reflect.cu.SourceCodeFragment" [label="SourceCodeFragment"]
	};
		"spoon.reflect.Changes" [label="Changes"]
	};
		"spoon.Path" [label="Path"]
	subgraph cluster28 { 
		rankdir=LR;label="spoon.compiler";
		"spoon.compiler.ModelBuildingException" [label="ModelBuildingException"]
		"spoon.compiler.SpoonFile" [label="SpoonFile"]
		"spoon.compiler.SpoonResource" [label="SpoonResource"]
		"spoon.compiler.SpoonCompiler" [label="SpoonCompiler"]
		"spoon.compiler.Environment" [label="Environment"]
		"spoon.compiler.SpoonFolder" [label="SpoonFolder"]
		"spoon.compiler.InvalidClassPathException" [label="InvalidClassPathException"]
		"spoon.compiler.SpoonResourceHelper" [label="SpoonResourceHelper"]
	};
		"spoon.FileSet" [label="FileSet"]
		"spoon.SpoonTask" [label="SpoonTask"]
		"spoon.Java" [label="Java"]
	subgraph cluster29 { 
		rankdir=LR;label="spoon.template";
		"spoon.template.StatementTemplate" [label="StatementTemplate"]
		"spoon.template.Local" [label="Local"]
		"spoon.template.TemplateMatcher" [label="TemplateMatcher"]
		"spoon.template.TemplateMatcher$" [label="TemplateMatcher$"]
		"spoon.template.Parameter" [label="Parameter"]
		"spoon.template.TypedBlockTemplateParameter" [label="TypedBlockTemplateParameter"]
		"spoon.template.TemplateParameter" [label="TemplateParameter"]
		"spoon.template.TemplateException" [label="TemplateException"]
		"spoon.template.Substitution" [label="Substitution"]
		"spoon.template.Template" [label="Template"]
		"spoon.template.BlockTemplate" [label="BlockTemplate"]
		"spoon.template.ExpressionTemplate" [label="ExpressionTemplate"]
		"spoon.template.TypedStatementListTemplateParameter" [label="TypedStatementListTemplateParameter"]
	};
		"spoon.SpoonException" [label="SpoonException"]
	subgraph cluster30 { 
		rankdir=LR;label="spoon.processing";
		"spoon.processing.ProcessorProperties" [label="ProcessorProperties"]
		"spoon.processing.Property" [label="Property"]
		"spoon.processing.AbstractAnnotationProcessor" [label="AbstractAnnotationProcessor"]
		"spoon.processing.XMLAnnotationProcessor" [label="XMLAnnotationProcessor"]
		"spoon.processing.Processor" [label="Processor"]
		"spoon.processing.FactoryAccessor" [label="FactoryAccessor"]
		"spoon.processing.ProblemFixer" [label="ProblemFixer"]
		"spoon.processing.AnnotationProcessor" [label="AnnotationProcessor"]
		"spoon.processing.Severity" [label="Severity"]
		"spoon.processing.ProcessingManager" [label="ProcessingManager"]
		"spoon.processing.TraversalStrategy" [label="TraversalStrategy"]
		"spoon.processing.FileGenerator" [label="FileGenerator"]
		"spoon.processing.AbstractProcessor" [label="AbstractProcessor"]
		"spoon.processing.AbstractProblemFixer" [label="AbstractProblemFixer"]
		"spoon.processing.AbstractManualProcessor" [label="AbstractManualProcessor"]
	};
		"spoon.BuildException" [label="BuildException"]
		"spoon.Launcher" [label="Launcher"]
		"spoon.Reference" [label="Reference"]
		"spoon.SpoonTask$ProcessorType" [label="SpoonTask$ProcessorType"]
		"spoon.DirectoryScanner" [label="DirectoryScanner"]
		"spoon.OutputType" [label="OutputType"]
	};
	subgraph cluster31 { 
		rankdir=LR;label="java.lang";
		"java.lang.SafeVarargs" [label="SafeVarargs"]
		"java.lang.UnsupportedOperationException" [label="UnsupportedOperationException"]
		"java.lang.Comparable" [label="Comparable"]
		"java.lang.IllegalStateException" [label="IllegalStateException"]
	subgraph cluster32 { 
		rankdir=LR;label="java.lang.annotation";
		"java.lang.annotation.ElementType" [label="ElementType"]
		"java.lang.annotation.Annotation" [label="Annotation"]
	};
	subgraph cluster33 { 
		rankdir=LR;label="java.lang.reflect";
		"java.lang.reflect.Method" [label="Method"]
		"java.lang.reflect.Proxy" [label="Proxy"]
		"java.lang.reflect.Array" [label="Array"]
		"java.lang.reflect.AnnotatedElement" [label="AnnotatedElement"]
		"java.lang.reflect.InvocationHandler" [label="InvocationHandler"]
		"java.lang.reflect.AccessibleObject" [label="AccessibleObject"]
		"java.lang.reflect.Constructor" [label="Constructor"]
		"java.lang.reflect.Member" [label="Member"]
		"java.lang.reflect.InvocationTargetException" [label="InvocationTargetException"]
		"java.lang.reflect.Modifier" [label="Modifier"]
		"java.lang.reflect.Field" [label="Field"]
	};
		"java.lang.Thread" [label="Thread"]
		"java.lang.IllegalAccessException" [label="IllegalAccessException"]
		"java.lang.Cloneable" [label="Cloneable"]
		"java.lang.Exception" [label="Exception"]
		"java.lang.NullPointerException" [label="NullPointerException"]
		"java.lang.Enum" [label="Enum"]
		"java.lang.Throwable" [label="Throwable"]
		"java.lang.Class" [label="Class"]
		"java.lang.Object" [label="Object"]
		"java.lang.Override" [label="Override"]
		"java.lang.String" [label="String"]
		"java.lang.NoSuchMethodException" [label="NoSuchMethodException"]
		"java.lang.Long" [label="Long"]
		"java.lang.System" [label="System"]
		"java.lang.Iterable" [label="Iterable"]
		"java.lang.Void" [label="Void"]
		"java.lang.ClassLoader" [label="ClassLoader"]
		"java.lang.Float" [label="Float"]
		"java.lang.SuppressWarnings" [label="SuppressWarnings"]
		"java.lang.ClassNotFoundException" [label="ClassNotFoundException"]
		"java.lang.Deprecated" [label="Deprecated"]
		"java.lang.ClassCastException" [label="ClassCastException"]
		"java.lang.StringIndexOutOfBoundsException" [label="StringIndexOutOfBoundsException"]
		"java.lang.Byte" [label="Byte"]
		"java.lang.RuntimeException" [label="RuntimeException"]
		"java.lang.Boolean" [label="Boolean"]
		"java.lang.Number" [label="Number"]
		"java.lang.Character" [label="Character"]
		"java.lang.Double" [label="Double"]
		"java.lang.Package" [label="Package"]
		"java.lang.Integer" [label="Integer"]
		"java.lang.Short" [label="Short"]
		"java.lang.IllegalArgumentException" [label="IllegalArgumentException"]
		"java.lang.InstantiationException" [label="InstantiationException"]
		"java.lang.StringBuffer" [label="StringBuffer"]
	};
	subgraph cluster34 { 
		rankdir=LR;label="java.io";
		"java.io.Serializable" [label="Serializable"]
		"java.io.ObjectOutputStream" [label="ObjectOutputStream"]
		"java.io.FileNotFoundException" [label="FileNotFoundException"]
		"java.io.ObjectInputStream" [label="ObjectInputStream"]
		"java.io.InputStream" [label="InputStream"]
		"java.io.IOException" [label="IOException"]
		"java.io.File" [label="File"]
		"java.io.ByteArrayOutputStream" [label="ByteArrayOutputStream"]
		"java.io.FileOutputStream" [label="FileOutputStream"]
		"java.io.PrintStream" [label="PrintStream"]
		"java.io.ByteArrayInputStream" [label="ByteArrayInputStream"]
		"java.io.OutputStream" [label="OutputStream"]
		"java.io.PrintWriter" [label="PrintWriter"]
		"java.io.BufferedInputStream" [label="BufferedInputStream"]
		"java.io.FileInputStream" [label="FileInputStream"]
	};
	subgraph cluster35 { 
		rankdir=LR;label="java.util";
	subgraph cluster36 { 
		rankdir=LR;label="java.util.zip";
		"java.util.zip.ZipInputStream" [label="ZipInputStream"]
		"java.util.zip.ZipEntry" [label="ZipEntry"]
	};
		"java.util.HashMap" [label="HashMap"]
	subgraph cluster37 { 
		rankdir=LR;label="java.util.regex";
		"java.util.regex.Matcher" [label="Matcher"]
		"java.util.regex.Pattern" [label="Pattern"]
	};
		"java.util.StringTokenizer" [label="StringTokenizer"]
		"java.util.Collections" [label="Collections"]
		"java.util.Collection" [label="Collection"]
		"java.util.Date" [label="Date"]
		"java.util.HashSet" [label="HashSet"]
		"java.util.TreeMap" [label="TreeMap"]
		"java.util.Vector" [label="Vector"]
		"java.util.Iterator" [label="Iterator"]
		"java.util.Arrays" [label="Arrays"]
		"java.util.Locale" [label="Locale"]
		"java.util.ResourceBundle" [label="ResourceBundle"]
		"java.util.LinkedList" [label="LinkedList"]
		"java.util.Map$Entry" [label="Map$Entry"]
		"java.util.List" [label="List"]
		"java.util.Comparator" [label="Comparator"]
		"java.util.Enumeration" [label="Enumeration"]
		"java.util.TreeSet" [label="TreeSet"]
		"java.util.Set" [label="Set"]
		"java.util.Map" [label="Map"]
		"java.util.AbstractSet" [label="AbstractSet"]
		"java.util.ArrayList" [label="ArrayList"]
		"java.util.Stack" [label="Stack"]
		"java.util.Queue" [label="Queue"]
	};
	subgraph cluster38 { 
		rankdir=LR;label="java.awt";
		"java.awt.Window" [label="Window"]
		"java.awt.GraphicsConfiguration" [label="GraphicsConfiguration"]
		"java.awt.GridLayout" [label="GridLayout"]
		"java.awt.GraphicsDevice" [label="GraphicsDevice"]
	subgraph cluster39 { 
		rankdir=LR;label="java.awt.event";
		"java.awt.event.KeyListener" [label="KeyListener"]
		"java.awt.event.KeyEvent" [label="KeyEvent"]
		"java.awt.event.MouseListener" [label="MouseListener"]
		"java.awt.event.MouseEvent" [label="MouseEvent"]
		"java.awt.event.ActionListener" [label="ActionListener"]
		"java.awt.event.ComponentEvent" [label="ComponentEvent"]
		"java.awt.event.ActionEvent" [label="ActionEvent"]
	};
		"java.awt.Component" [label="Component"]
		"java.awt.DisplayMode" [label="DisplayMode"]
		"java.awt.Frame" [label="Frame"]
		"java.awt.BorderLayout" [label="BorderLayout"]
		"java.awt.Container" [label="Container"]
	};
	subgraph cluster40 { 
		rankdir=LR;label="java.net";
		"java.net.URLClassLoader" [label="URLClassLoader"]
		"java.net.URI" [label="URI"]
		"java.net.URL" [label="URL"]
	};
	subgraph cluster41 { 
		rankdir=LR;label="org.eclipse.jdt.internal.compiler";
	subgraph cluster42 { 
		rankdir=LR;label="org.eclipse.jdt.internal.compiler.ast";
		"org.eclipse.jdt.internal.compiler.ast.Block" [label="Block"]
		"org.eclipse.jdt.internal.compiler.ast.NameReference" [label="NameReference"]
		"org.eclipse.jdt.internal.compiler.ast.CaseStatement" [label="CaseStatement"]
		"org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression" [label="QualifiedAllocationExpression"]
		"org.eclipse.jdt.internal.compiler.ast.PrefixExpression" [label="PrefixExpression"]
		"org.eclipse.jdt.internal.compiler.ast.ThrowStatement" [label="ThrowStatement"]
		"org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral" [label="ExtendedStringLiteral"]
		"org.eclipse.jdt.internal.compiler.ast.BinaryExpression" [label="BinaryExpression"]
		"org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration" [label="CompilationUnitDeclaration"]
		"org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration" [label="AnnotationMethodDeclaration"]
		"org.eclipse.jdt.internal.compiler.ast.AssertStatement" [label="AssertStatement"]
		"org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation" [label="SingleMemberAnnotation"]
		"org.eclipse.jdt.internal.compiler.ast.NullLiteral" [label="NullLiteral"]
		"org.eclipse.jdt.internal.compiler.ast.FieldDeclaration" [label="FieldDeclaration"]
		"org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression" [label="OR_OR_Expression"]
		"org.eclipse.jdt.internal.compiler.ast.UnaryExpression" [label="UnaryExpression"]
		"org.eclipse.jdt.internal.compiler.ast.ForeachStatement" [label="ForeachStatement"]
		"org.eclipse.jdt.internal.compiler.ast.TryStatement" [label="TryStatement"]
		"org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation" [label="StringLiteralConcatenation"]
		"org.eclipse.jdt.internal.compiler.ast.UnionTypeReference" [label="UnionTypeReference"]
		"org.eclipse.jdt.internal.compiler.ast.SingleNameReference" [label="SingleNameReference"]
		"org.eclipse.jdt.internal.compiler.ast.Initializer" [label="Initializer"]
		"org.eclipse.jdt.internal.compiler.ast.FalseLiteral" [label="FalseLiteral"]
		"org.eclipse.jdt.internal.compiler.ast.TypeReference" [label="TypeReference"]
		"org.eclipse.jdt.internal.compiler.ast.DoStatement" [label="DoStatement"]
		"org.eclipse.jdt.internal.compiler.ast.AllocationExpression" [label="AllocationExpression"]
		"org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference" [label="QualifiedTypeReference"]
		"org.eclipse.jdt.internal.compiler.ast.Assignment" [label="Assignment"]
		"org.eclipse.jdt.internal.compiler.ast.MethodDeclaration" [label="MethodDeclaration"]
		"org.eclipse.jdt.internal.compiler.ast.DoubleLiteral" [label="DoubleLiteral"]
		"org.eclipse.jdt.internal.compiler.ast.EqualExpression" [label="EqualExpression"]
		"org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression" [label="InstanceOfExpression"]
		"org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference" [label="ArrayTypeReference"]
		"org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall" [label="ExplicitConstructorCall"]
		"org.eclipse.jdt.internal.compiler.ast.TypeParameter" [label="TypeParameter"]
		"org.eclipse.jdt.internal.compiler.ast.CharLiteral" [label="CharLiteral"]
		"org.eclipse.jdt.internal.compiler.ast.CompoundAssignment" [label="CompoundAssignment"]
		"org.eclipse.jdt.internal.compiler.ast.FloatLiteral" [label="FloatLiteral"]
		"org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement" [label="SynchronizedStatement"]
		"org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference" [label="ParameterizedQualifiedTypeReference"]
		"org.eclipse.jdt.internal.compiler.ast.TrueLiteral" [label="TrueLiteral"]
		"org.eclipse.jdt.internal.compiler.ast.SingleTypeReference" [label="SingleTypeReference"]
		"org.eclipse.jdt.internal.compiler.ast.IntLiteral" [label="IntLiteral"]
		"org.eclipse.jdt.internal.compiler.ast.CastExpression" [label="CastExpression"]
		"org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference" [label="QualifiedThisReference"]
		"org.eclipse.jdt.internal.compiler.ast.Javadoc" [label="Javadoc"]
		"org.eclipse.jdt.internal.compiler.ast.SuperReference" [label="SuperReference"]
		"org.eclipse.jdt.internal.compiler.ast.LocalDeclaration" [label="LocalDeclaration"]
		"org.eclipse.jdt.internal.compiler.ast.PostfixExpression" [label="PostfixExpression"]
		"org.eclipse.jdt.internal.compiler.ast.ArrayReference" [label="ArrayReference"]
		"org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression" [label="AND_AND_Expression"]
		"org.eclipse.jdt.internal.compiler.ast.MessageSend" [label="MessageSend"]
		"org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess" [label="ClassLiteralAccess"]
		"org.eclipse.jdt.internal.compiler.ast.ReturnStatement" [label="ReturnStatement"]
		"org.eclipse.jdt.internal.compiler.ast.ConditionalExpression" [label="ConditionalExpression"]
		"org.eclipse.jdt.internal.compiler.ast.WhileStatement" [label="WhileStatement"]
		"org.eclipse.jdt.internal.compiler.ast.LabeledStatement" [label="LabeledStatement"]
		"org.eclipse.jdt.internal.compiler.ast.ThisReference" [label="ThisReference"]
		"org.eclipse.jdt.internal.compiler.ast.IfStatement" [label="IfStatement"]
		"org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration" [label="ConstructorDeclaration"]
		"org.eclipse.jdt.internal.compiler.ast.BreakStatement" [label="BreakStatement"]
		"org.eclipse.jdt.internal.compiler.ast.LongLiteral" [label="LongLiteral"]
		"org.eclipse.jdt.internal.compiler.ast.ContinueStatement" [label="ContinueStatement"]
		"org.eclipse.jdt.internal.compiler.ast.SwitchStatement" [label="SwitchStatement"]
		"org.eclipse.jdt.internal.compiler.ast.Argument" [label="Argument"]
		"org.eclipse.jdt.internal.compiler.ast.ForStatement" [label="ForStatement"]
		"org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration" [label="AbstractMethodDeclaration"]
		"org.eclipse.jdt.internal.compiler.ast.Expression" [label="Expression"]
		"org.eclipse.jdt.internal.compiler.ast.Statement" [label="Statement"]
		"org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation" [label="MarkerAnnotation"]
		"org.eclipse.jdt.internal.compiler.ast.Annotation" [label="Annotation"]
		"org.eclipse.jdt.internal.compiler.ast.ASTNode" [label="ASTNode"]
		"org.eclipse.jdt.internal.compiler.ast.MemberValuePair" [label="MemberValuePair"]
		"org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference" [label="QualifiedNameReference"]
		"org.eclipse.jdt.internal.compiler.ast.TypeDeclaration" [label="TypeDeclaration"]
		"org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference" [label="QualifiedSuperReference"]
		"org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference" [label="ParameterizedSingleTypeReference"]
		"org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression" [label="ArrayAllocationExpression"]
		"org.eclipse.jdt.internal.compiler.ast.FieldReference" [label="FieldReference"]
		"org.eclipse.jdt.internal.compiler.ast.NormalAnnotation" [label="NormalAnnotation"]
		"org.eclipse.jdt.internal.compiler.ast.StringLiteral" [label="StringLiteral"]
		"org.eclipse.jdt.internal.compiler.ast.ArrayInitializer" [label="ArrayInitializer"]
	};
	subgraph cluster43 { 
		rankdir=LR;label="org.eclipse.jdt.internal.compiler.util";
		"org.eclipse.jdt.internal.compiler.util.Util" [label="Util"]
	};
	subgraph cluster44 { 
		rankdir=LR;label="org.eclipse.jdt.internal.compiler.lookup";
		"org.eclipse.jdt.internal.compiler.lookup.ProblemReferenceBinding" [label="ProblemReferenceBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.WildcardBinding" [label="WildcardBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.Scope" [label="Scope"]
		"org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding" [label="LocalVariableBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.ArrayBinding" [label="ArrayBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding" [label="BinaryTypeBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.CaptureBinding" [label="CaptureBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.TypeBinding" [label="TypeBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.FieldBinding" [label="FieldBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.MethodScope" [label="MethodScope"]
		"org.eclipse.jdt.internal.compiler.lookup.PackageBinding" [label="PackageBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.MethodBinding" [label="MethodBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding" [label="BaseTypeBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.RawTypeBinding" [label="RawTypeBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding" [label="SourceTypeBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment" [label="LookupEnvironment"]
		"org.eclipse.jdt.internal.compiler.lookup.VariableBinding" [label="VariableBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope" [label="CompilationUnitScope"]
		"org.eclipse.jdt.internal.compiler.lookup.Binding" [label="Binding"]
		"org.eclipse.jdt.internal.compiler.lookup.BlockScope" [label="BlockScope"]
		"org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding" [label="TypeVariableBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.ClassScope" [label="ClassScope"]
		"org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding" [label="LocalTypeBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding" [label="ReferenceBinding"]
		"org.eclipse.jdt.internal.compiler.lookup.MethodVerifier" [label="MethodVerifier"]
		"org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding" [label="ParameterizedTypeBinding"]
	};
		"org.eclipse.jdt.internal.compiler.ASTVisitor" [label="ASTVisitor"]
		"org.eclipse.jdt.internal.compiler.IProblemFactory" [label="IProblemFactory"]
	subgraph cluster45 { 
		rankdir=LR;label="org.eclipse.jdt.internal.compiler.impl";
		"org.eclipse.jdt.internal.compiler.impl.Constant" [label="Constant"]
		"org.eclipse.jdt.internal.compiler.impl.CompilerOptions" [label="CompilerOptions"]
		"org.eclipse.jdt.internal.compiler.impl.ReferenceContext" [label="ReferenceContext"]
	};
		"org.eclipse.jdt.internal.compiler.Compiler" [label="Compiler"]
	subgraph cluster46 { 
		rankdir=LR;label="org.eclipse.jdt.internal.compiler.parser";
		"org.eclipse.jdt.internal.compiler.parser.Parser" [label="Parser"]
	};
		"org.eclipse.jdt.internal.compiler.CompilationResult" [label="CompilationResult"]
	subgraph cluster47 { 
		rankdir=LR;label="org.eclipse.jdt.internal.compiler.batch";
		"org.eclipse.jdt.internal.compiler.batch.FileSystem" [label="FileSystem"]
		"org.eclipse.jdt.internal.compiler.batch.CompilationUnit" [label="CompilationUnit"]
		"org.eclipse.jdt.internal.compiler.batch.Main" [label="Main"]
	};
		"org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy" [label="IErrorHandlingPolicy"]
		"org.eclipse.jdt.internal.compiler.ICompilerRequestor" [label="ICompilerRequestor"]
	subgraph cluster48 { 
		rankdir=LR;label="org.eclipse.jdt.internal.compiler.env";
		"org.eclipse.jdt.internal.compiler.env.ICompilationUnit" [label="ICompilationUnit"]
		"org.eclipse.jdt.internal.compiler.env.INameEnvironment" [label="INameEnvironment"]
	};
	};
	subgraph cluster49 { 
		rankdir=LR;label="org.eclipse.jdt.core.compiler";
		"org.eclipse.jdt.core.compiler.CategorizedProblem" [label="CategorizedProblem"]
		"org.eclipse.jdt.core.compiler.IProblem" [label="IProblem"]
		"org.eclipse.jdt.core.compiler.CompilationProgress" [label="CompilationProgress"]
		"org.eclipse.jdt.core.compiler.CharOperation" [label="CharOperation"]
	};
	subgraph cluster50 { 
		rankdir=LR;label="org.xml.sax";
		"org.xml.sax.SAXException" [label="SAXException"]
		"org.xml.sax.Attributes" [label="Attributes"]
	subgraph cluster51 { 
		rankdir=LR;label="org.xml.sax.helpers";
		"org.xml.sax.helpers.DefaultHandler" [label="DefaultHandler"]
		"org.xml.sax.helpers.XMLReaderFactory" [label="XMLReaderFactory"]
	};
		"org.xml.sax.SAXParseException" [label="SAXParseException"]
		"org.xml.sax.XMLReader" [label="XMLReader"]
		"org.xml.sax.InputSource" [label="InputSource"]
	};
	subgraph cluster52 { 
		rankdir=LR;label="org.w3c.dom";
		"org.w3c.dom.Node" [label="Node"]
		"org.w3c.dom.Element" [label="Element"]
		"org.w3c.dom.Document" [label="Document"]
		"org.w3c.dom.NodeList" [label="NodeList"]
	};
	subgraph cluster53 { 
		rankdir=LR;label="org.apache.log4j";
		"org.apache.log4j.Category" [label="Category"]
		"org.apache.log4j.Logger" [label="Logger"]
	};
	subgraph cluster54 { 
		rankdir=LR;label="org.apache.commons.io";
		"org.apache.commons.io.IOUtils" [label="IOUtils"]
		"org.apache.commons.io.FileUtils" [label="FileUtils"]
	};
	subgraph cluster55 { 
		rankdir=LR;label="com.martiansoftware.jsap";
		"com.martiansoftware.jsap.FlaggedOption" [label="FlaggedOption"]
		"com.martiansoftware.jsap.Switch" [label="Switch"]
		"com.martiansoftware.jsap.Parameter" [label="Parameter"]
		"com.martiansoftware.jsap.JSAP" [label="JSAP"]
		"com.martiansoftware.jsap.JSAPException" [label="JSAPException"]
	subgraph cluster56 { 
		rankdir=LR;label="com.martiansoftware.jsap.stringparsers";
		"com.martiansoftware.jsap.stringparsers.StringStringParser" [label="StringStringParser"]
		"com.martiansoftware.jsap.stringparsers.IntegerStringParser" [label="IntegerStringParser"]
		"com.martiansoftware.jsap.stringparsers.FileStringParser" [label="FileStringParser"]
	};
		"com.martiansoftware.jsap.JSAPResult" [label="JSAPResult"]
	};
}
